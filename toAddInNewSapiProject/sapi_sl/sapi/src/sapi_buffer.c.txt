/* Copyright Year, Author
 *
 * This file is part of a project.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice,
 *    this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * 3. Neither the name of the copyright holder nor the names of its
 *    contributors may be used to endorse or promote products derived from this
 *    software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 */

/** @brief Brief for this file.
 **
 **/

/** \addtogroup groupName Group Name
 ** @{ */

/*
 * Initials     Name
 * ---------------------------
 * FN           Full Name
 */

/*
 * modification history (new versions first)
 * -----------------------------------------------------------
 * yyyymmdd v0.0.1   FN first version
 */

/*==================[inclusions]=============================================*/

#include "Buffer.h"
#include "Task.h"

/*==================[macros and definitions]=================================*/

/*==================[internal data declaration]==============================*/

/*==================[internal functions declaration]=========================*/

/*==================[internal data definition]===============================*/

static uint8_t TX_Indice_escritura = 0;
static uint8_t TX_Indice_lectura = 0;
static uint8_t TX_Buffer[TX_BUFFER_LENGTH];

/*==================[external data definition]===============================*/

extern uint8_t Error_code;

/*==================[internal functions definition]==========================*/

/*==================[external functions definition]==========================*/

void Write_String_To_Buffer(uint8_t *strPtr){
   uint8_t i = 0;
   while ( strPtr[i] != '\0'){
      Write_Char_To_Buffer( strPtr[i] );
      i++;
   }
}


void Write_Char_To_Buffer(uint8_t data)
{
   // Write to the buffer *only* if there is space
   if (TX_Indice_escritura < TX_BUFFER_LENGTH){
      TX_Buffer[TX_Indice_escritura] = data;
      TX_Indice_escritura++;
   }
   else{
      // Write buffer is full
      Error_code = ERROR_UART_FULL_BUFF;
   }
}


uint8_t Read_Char_From_Buffer(void){

   uint8_t ret_val = 0;

   // Hay byte en el buffer Tx para transmitir?
   if (TX_Indice_lectura < TX_Indice_escritura){

      ret_val = TX_Buffer[TX_Indice_lectura];
      TX_Indice_lectura++;

   }
   else{

      // No hay datos disponibles para enviar
      TX_Indice_lectura = 0;
      TX_Indice_escritura = 0;
      ret_val = 0;

   }

   return ret_val;
}



/** @} doxygen end group definition */
/*==================[end of file]============================================*/
