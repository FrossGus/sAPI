
out/program.elf:     file format elf32-littlearm
out/program.elf
architecture: arm, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x1a000a31

Program Header:
    LOAD off    0x00008000 vaddr 0x10000000 paddr 0x10000000 align 2**15
         filesz 0x00000000 memsz 0x0000000c flags rw-
    LOAD off    0x00008000 vaddr 0x1a000000 paddr 0x1a000000 align 2**15
         filesz 0x00001110 memsz 0x00001110 flags r-x
private flags = 5000402: [Version5 EABI] [hard-float ABI] [has entry point]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001110  1a000000  1a000000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  10000000  10000000  00009110  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .data_RAM2    00000000  10080000  10080000  00009110  2**2
                  CONTENTS
  3 .data_RAM3    00000000  20000000  20000000  00009110  2**2
                  CONTENTS
  4 .data_RAM4    00000000  20008000  20008000  00009110  2**2
                  CONTENTS
  5 .data_RAM5    00000000  2000c000  2000c000  00009110  2**2
                  CONTENTS
  6 .bss          0000000c  10000000  10000000  00008000  2**2
                  ALLOC
  7 .bss_RAM2     00000000  10080000  10080000  00009110  2**2
                  CONTENTS
  8 .bss_RAM3     00000000  20000000  20000000  00009110  2**2
                  CONTENTS
  9 .bss_RAM4     00000000  20008000  20008000  00009110  2**2
                  CONTENTS
 10 .bss_RAM5     00000000  2000c000  2000c000  00009110  2**2
                  CONTENTS
 11 .uninit_RESERVED 00000000  10000000  10000000  00009110  2**2
                  CONTENTS
 12 .noinit_RAM2  00000000  10080000  10080000  00009110  2**2
                  CONTENTS
 13 .noinit_RAM3  00000000  20000000  20000000  00009110  2**2
                  CONTENTS
 14 .noinit_RAM4  00000000  20008000  20008000  00009110  2**2
                  CONTENTS
 15 .noinit_RAM5  00000000  2000c000  2000c000  00009110  2**2
                  CONTENTS
 16 .noinit       00000000  1000000c  1000000c  00009110  2**2
                  CONTENTS
 17 .debug_info   00007bc4  00000000  00000000  00009110  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_abbrev 00001555  00000000  00000000  00010cd4  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_aranges 000003f8  00000000  00000000  00012229  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_ranges 00000320  00000000  00000000  00012621  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_macro  000067e0  00000000  00000000  00012941  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_line   00005200  00000000  00000000  00019121  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_str    000197dc  00000000  00000000  0001e321  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .comment      00000070  00000000  00000000  00037afd  2**0
                  CONTENTS, READONLY
 25 .ARM.attributes 00000039  00000000  00000000  00037b6d  2**0
                  CONTENTS, READONLY
 26 .debug_frame  0000086c  00000000  00000000  00037ba8  2**2
                  CONTENTS, READONLY, DEBUGGING
 27 .debug_loc    000024a4  00000000  00000000  00038414  2**0
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
1a000000 l    d  .text	00000000 .text
10000000 l    d  .data	00000000 .data
10080000 l    d  .data_RAM2	00000000 .data_RAM2
20000000 l    d  .data_RAM3	00000000 .data_RAM3
20008000 l    d  .data_RAM4	00000000 .data_RAM4
2000c000 l    d  .data_RAM5	00000000 .data_RAM5
10000000 l    d  .bss	00000000 .bss
10080000 l    d  .bss_RAM2	00000000 .bss_RAM2
20000000 l    d  .bss_RAM3	00000000 .bss_RAM3
20008000 l    d  .bss_RAM4	00000000 .bss_RAM4
2000c000 l    d  .bss_RAM5	00000000 .bss_RAM5
10000000 l    d  .uninit_RESERVED	00000000 .uninit_RESERVED
10080000 l    d  .noinit_RAM2	00000000 .noinit_RAM2
20000000 l    d  .noinit_RAM3	00000000 .noinit_RAM3
20008000 l    d  .noinit_RAM4	00000000 .noinit_RAM4
2000c000 l    d  .noinit_RAM5	00000000 .noinit_RAM5
1000000c l    d  .noinit	00000000 .noinit
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    df *ABS*	00000000 cr_startup_lpc43xx.c
00000000 l    df *ABS*	00000000 crp.c
00000000 l    df *ABS*	00000000 programa.c
00000000 l    df *ABS*	00000000 chip_18xx_43xx.c
00000000 l    df *ABS*	00000000 clock_18xx_43xx.c
1a000364 l     F .text	000000a8 pll_calc_divs
1a00040c l     F .text	000000fa pll_get_frac
1a000508 l     F .text	00000048 Chip_Clock_FindBaseClock
1a000774 l     F .text	00000022 Chip_Clock_GetDivRate
10000000 l     O .bss	00000008 audio_usb_pll_freq
1a000eb0 l     O .text	0000006c periph_to_base
00000000 l    df *ABS*	00000000 fpu_init.c
00000000 l    df *ABS*	00000000 gpio_18xx_43xx.c
00000000 l    df *ABS*	00000000 sysinit_18xx_43xx.c
1a000f1c l     O .text	00000048 InitClkStates
00000000 l    df *ABS*	00000000 sysinit.c
00000000 l    df *ABS*	00000000 board_sysinit.c
1a000f6c l     O .text	0000000c InitClkStates
1a000f78 l     O .text	00000060 pinmuxing
00000000 l    df *ABS*	00000000 sapi_board.c
00000000 l    df *ABS*	00000000 sapi_gpio.c
1a000c44 l     F .text	0000002c gpioObtainPinConfig
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 board.c
00000000 l    df *ABS*	00000000 
1a080000 l       *ABS*	00000000 __top_MFlashA512
1a001110 l       .text	00000000 __exidx_end
1a001110 l       .text	00000000 _etext
20008000 l       *ABS*	00000000 __top_RamAHB32
1a001110 l       .text	00000000 __exidx_start
20010000 l       *ABS*	00000000 __top_RamAHB_ETB16
10008000 l       *ABS*	00000000 __top_RamLoc32
2000c000 l       *ABS*	00000000 __top_RamAHB16
1008a000 l       *ABS*	00000000 __top_RamLoc40
1000000c l       .bss	00000000 _pvHeapStart
1b080000 l       *ABS*	00000000 __top_MFlashB512
1a00059c g     F .text	0000001c Chip_Clock_GetDividerSource
1a00019c  w    F .text	00000002 TIMER2_IRQHandler
1a000190  w    F .text	00000002 DebugMon_Handler
1a00019c  w    F .text	00000002 RIT_IRQHandler
1a00019c  w    F .text	00000002 ADCHS_IRQHandler
1a000114 g       .text	00000000 __section_table_start
1a00019c  w    F .text	00000002 FLASH_EEPROM_IRQHandler
1a00019c  w    F .text	00000002 I2C0_IRQHandler
1a0008b4 g     F .text	00000024 Chip_GPIO_SetDir
1a00017c  w    F .text	00000002 HardFault_Handler
1a000000 g       *ABS*	00000000 __vectors_start__
1a000198  w    F .text	00000002 SysTick_Handler
1a00019c  w    F .text	00000002 SDIO_IRQHandler
1a00019c  w    F .text	00000002 ATIMER_IRQHandler
1a000194  w    F .text	00000002 PendSV_Handler
1a000178  w    F .text	00000002 NMI_Handler
1a000150 g       .text	00000000 __data_section_table_end
1a00019c  w    F .text	00000002 I2C1_IRQHandler
1a00019c  w    F .text	00000002 UART1_IRQHandler
1a00019c  w    F .text	00000002 GPIO5_IRQHandler
1a00019c  w    F .text	00000002 CAN1_IRQHandler
53ff6e4a g       *ABS*	00000000 __valid_user_code_checksum
1a00019c  w    F .text	00000002 USB1_IRQHandler
1a00019c  w    F .text	00000002 I2S0_IRQHandler
1a00019c  w    F .text	00000002 TIMER3_IRQHandler
1a000800 g     F .text	0000000c Chip_Clock_GetBaseClocktHz
1a00019c  w    F .text	00000002 UART0_IRQHandler
1a0001bc g     F .text	00000012 bss_init
1a00019c  w    F .text	00000002 SGPIO_IRQHandler
1000000c g       .noinit	00000000 _noinit
10000008 g     O .bss	00000004 SystemCoreClock
1a00019c  w    F .text	00000002 ADC0_IRQHandler
1a000188  w    F .text	00000002 UsageFault_Handler
1a00080c g     F .text	0000004c Chip_Clock_GetRate
1a00019c  w    F .text	00000002 GPIO6_IRQHandler
1a000aec g     F .text	0000006c Board_SetupClocking
1a000f68 g     O .text	00000004 ExtRateIn
1a00019c  w    F .text	00000002 IntDefaultHandler
1a000300 g       .text	00000000 __CRP_WORD_END__
1a00019c  w    F .text	00000002 GPIO1_IRQHandler
1a00019c  w    F .text	00000002 SSP0_IRQHandler
1a000c70 g     F .text	00000174 gpioConfig
1a0002fc g     O .text	00000004 CRP_WORD
1a00019c  w    F .text	00000002 ADC1_IRQHandler
1a000114 g       .text	00000000 __data_section_table
1a00019c  w    F .text	00000002 RTC_IRQHandler
1000000c g       .bss	00000000 _ebss
1a00019c  w    F .text	00000002 TIMER0_IRQHandler
1a00019c  w    F .text	00000002 SPI_IRQHandler
1a00019c  w    F .text	00000002 LCD_IRQHandler
1a000550 g     F .text	0000004c Chip_Clock_EnableCrystal
1a0001a0 g     F .text	0000001a data_init
1a00019c  w    F .text	00000002 TIMER1_IRQHandler
1a00019c  w    F .text	00000002 UART2_IRQHandler
1a00070c g     F .text	00000068 Chip_Clock_GetMainPLLHz
1a00019c  w    F .text	00000002 GPIO2_IRQHandler
1a0007dc g     F .text	00000024 Chip_Clock_GetBaseClock
10000000 g       .bss	00000000 _bss
1a00019c  w    F .text	00000002 I2S1_IRQHandler
1a0008b0 g     F .text	00000002 Chip_GPIO_Init
1a000f64 g     O .text	00000004 OscRateIn
1000000c g       .noinit	00000000 _end_noinit
10008000 g       *ABS*	00000000 _vStackTop
1a00019c  w    F .text	00000002 SSP1_IRQHandler
1a000178 g       .text	00000000 __bss_section_table_end
1a00019c  w    F .text	00000002 USB0_IRQHandler
1a00019c  w    F .text	00000002 GPIO3_IRQHandler
1a00019c  w    F .text	00000002 SCT_IRQHandler
1a0005b8 g     F .text	0000001c Chip_Clock_GetDividerDivisor
1a0002fc g       .text	00000000 __CRP_WORD_START__
1a000e94 g     F .text	00000010 memset
1a000180  w    F .text	00000002 MemManage_Handler
1a000300 g     F .text	00000050 main
1a00019c  w    F .text	00000002 WDT_IRQHandler
1a00018c  w    F .text	00000002 SVC_Handler
1a00019c  w    F .text	00000002 GPIO7_IRQHandler
1a000fd8 g     O .text	00000136 gpioPinsConfig
1a0005d4 g     F .text	000000b8 Chip_Clock_GetClockInputHz
1a000858 g     F .text	00000058 fpuInit
1a00068c g     F .text	00000080 Chip_Clock_CalcMainPLLValue
1a000aac g     F .text	0000000c SystemInit
1a00019c  w    F .text	00000002 SPIFI_IRQHandler
1a00019c  w    F .text	00000002 QEI_IRQHandler
1a000150 g       .text	00000000 __bss_section_table
1a000de4 g     F .text	00000058 gpioWrite
1a000ab8 g     F .text	00000034 Board_SetupMuxing
1a00019c  w    F .text	00000002 ETH_IRQHandler
10000000 g       .uninit_RESERVED	00000000 _end_uninit_RESERVED
1a00019c  w    F .text	00000002 CAN0_IRQHandler
10000000 g       .data	00000000 _data
1a000178 g       .text	00000000 __section_table_end
1a00019c  w    F .text	00000002 GINT0_IRQHandler
1a00019c  w    F .text	00000002 DAC_IRQHandler
10000000 g       .data	00000000 _edata
1a00019c  w    F .text	00000002 M0SUB_IRQHandler
1a0008d8 g     F .text	00000158 Chip_SetupCoreClock
1a00019c  w    F .text	00000002 GPIO0_IRQHandler
1a000000 g     O .text	00000114 g_pfnVectors
1a000a30 g     F .text	0000007c ResetISR
1a000350 g     F .text	00000014 SystemCoreClockUpdate
1a00019c  w    F .text	00000002 DMA_IRQHandler
1a00019c  w    F .text	00000002 EVRT_IRQHandler
1a000184  w    F .text	00000002 BusFault_Handler
1a00019c  w    F .text	00000002 UART3_IRQHandler
1a00019c  w    F .text	00000002 MCPWM_IRQHandler
1a00019c  w    F .text	00000002 M0APP_IRQHandler
1a000e3c g     F .text	00000058 gpioRead
1a000b64 g     F .text	000000e0 boardInit
1a00019c  w    F .text	00000002 GINT1_IRQHandler
1a000798 g     F .text	00000044 Chip_Clock_SetBaseClock
1a00019c  w    F .text	00000002 GPIO4_IRQHandler
1a000b58 g     F .text	0000000c Board_SystemInit



Disassembly of section .text:

1a000000 <g_pfnVectors>:
1a000000:	00 80 00 10 31 0a 00 1a 79 01 00 1a 7d 01 00 1a     ....1...y...}...
1a000010:	81 01 00 1a 85 01 00 1a 89 01 00 1a 4a 6e ff 53     ............Jn.S
	...
1a00002c:	8d 01 00 1a 91 01 00 1a 00 00 00 00 95 01 00 1a     ................
1a00003c:	99 01 00 1a 9d 01 00 1a 9d 01 00 1a 9d 01 00 1a     ................
1a00004c:	00 00 00 00 9d 01 00 1a 9d 01 00 1a 9d 01 00 1a     ................
1a00005c:	9d 01 00 1a 9d 01 00 1a 9d 01 00 1a 9d 01 00 1a     ................
1a00006c:	9d 01 00 1a 9d 01 00 1a 9d 01 00 1a 9d 01 00 1a     ................
1a00007c:	9d 01 00 1a 9d 01 00 1a 9d 01 00 1a 9d 01 00 1a     ................
1a00008c:	9d 01 00 1a 9d 01 00 1a 9d 01 00 1a 9d 01 00 1a     ................
1a00009c:	9d 01 00 1a 9d 01 00 1a 9d 01 00 1a 9d 01 00 1a     ................
1a0000ac:	9d 01 00 1a 9d 01 00 1a 9d 01 00 1a 9d 01 00 1a     ................
1a0000bc:	9d 01 00 1a 9d 01 00 1a 9d 01 00 1a 9d 01 00 1a     ................
1a0000cc:	9d 01 00 1a 9d 01 00 1a 9d 01 00 1a 9d 01 00 1a     ................
1a0000dc:	9d 01 00 1a 9d 01 00 1a 9d 01 00 1a 9d 01 00 1a     ................
1a0000ec:	9d 01 00 1a 00 00 00 00 9d 01 00 1a 9d 01 00 1a     ................
1a0000fc:	9d 01 00 1a 00 00 00 00 9d 01 00 1a 9d 01 00 1a     ................
1a00010c:	9d 01 00 1a 9d 01 00 1a                             ........

1a000114 <__data_section_table>:
1a000114:	1a001110 	.word	0x1a001110
1a000118:	10000000 	.word	0x10000000
1a00011c:	00000000 	.word	0x00000000
1a000120:	1a001110 	.word	0x1a001110
1a000124:	10080000 	.word	0x10080000
1a000128:	00000000 	.word	0x00000000
1a00012c:	1a001110 	.word	0x1a001110
1a000130:	20000000 	.word	0x20000000
1a000134:	00000000 	.word	0x00000000
1a000138:	1a001110 	.word	0x1a001110
1a00013c:	20008000 	.word	0x20008000
1a000140:	00000000 	.word	0x00000000
1a000144:	1a001110 	.word	0x1a001110
1a000148:	2000c000 	.word	0x2000c000
1a00014c:	00000000 	.word	0x00000000

1a000150 <__bss_section_table>:
1a000150:	10000000 	.word	0x10000000
1a000154:	0000000c 	.word	0x0000000c
1a000158:	10080000 	.word	0x10080000
1a00015c:	00000000 	.word	0x00000000
1a000160:	20000000 	.word	0x20000000
1a000164:	00000000 	.word	0x00000000
1a000168:	20008000 	.word	0x20008000
1a00016c:	00000000 	.word	0x00000000
1a000170:	2000c000 	.word	0x2000c000
1a000174:	00000000 	.word	0x00000000

1a000178 <NMI_Handler>:
// handler routines in your application code.
//*****************************************************************************
__attribute__ ((section(".after_vectors")))
void NMI_Handler(void) {
    while (1) {
    }
1a000178:	e7fe      	b.n	1a000178 <NMI_Handler>
1a00017a:	bf00      	nop

1a00017c <HardFault_Handler>:
}
__attribute__ ((section(".after_vectors")))
void HardFault_Handler(void) {
    while (1) {
    }
1a00017c:	e7fe      	b.n	1a00017c <HardFault_Handler>
1a00017e:	bf00      	nop

1a000180 <MemManage_Handler>:
}
__attribute__ ((section(".after_vectors")))
void MemManage_Handler(void) {
    while (1) {
    }
1a000180:	e7fe      	b.n	1a000180 <MemManage_Handler>
1a000182:	bf00      	nop

1a000184 <BusFault_Handler>:
}
__attribute__ ((section(".after_vectors")))
void BusFault_Handler(void) {
    while (1) {
    }
1a000184:	e7fe      	b.n	1a000184 <BusFault_Handler>
1a000186:	bf00      	nop

1a000188 <UsageFault_Handler>:
}
__attribute__ ((section(".after_vectors")))
void UsageFault_Handler(void) {
    while (1) {
    }
1a000188:	e7fe      	b.n	1a000188 <UsageFault_Handler>
1a00018a:	bf00      	nop

1a00018c <SVC_Handler>:
}
__attribute__ ((section(".after_vectors")))
void SVC_Handler(void) {
    while (1) {
    }
1a00018c:	e7fe      	b.n	1a00018c <SVC_Handler>
1a00018e:	bf00      	nop

1a000190 <DebugMon_Handler>:
}
__attribute__ ((section(".after_vectors")))
void DebugMon_Handler(void) {
    while (1) {
    }
1a000190:	e7fe      	b.n	1a000190 <DebugMon_Handler>
1a000192:	bf00      	nop

1a000194 <PendSV_Handler>:
}
__attribute__ ((section(".after_vectors")))
void PendSV_Handler(void) {
    while (1) {
    }
1a000194:	e7fe      	b.n	1a000194 <PendSV_Handler>
1a000196:	bf00      	nop

1a000198 <SysTick_Handler>:
}
__attribute__ ((section(".after_vectors")))
void SysTick_Handler(void) {
    while (1) {
    }
1a000198:	e7fe      	b.n	1a000198 <SysTick_Handler>
1a00019a:	bf00      	nop

1a00019c <ADC0_IRQHandler>:
//
//*****************************************************************************
__attribute__ ((section(".after_vectors")))
void IntDefaultHandler(void) {
    while (1) {
    }
1a00019c:	e7fe      	b.n	1a00019c <ADC0_IRQHandler>
1a00019e:	bf00      	nop

1a0001a0 <data_init>:
// ResetISR() function in order to cope with MCUs with multiple banks of
// memory.
//*****************************************************************************
        __attribute__((section(".after_vectors"
)))
void data_init(unsigned int romstart, unsigned int start, unsigned int len) {
1a0001a0:	b410      	push	{r4}
    unsigned int *pulDest = (unsigned int*) start;
    unsigned int *pulSrc = (unsigned int*) romstart;
    unsigned int loop;
    for (loop = 0; loop < len; loop = loop + 4)
1a0001a2:	2300      	movs	r3, #0
1a0001a4:	e004      	b.n	1a0001b0 <data_init+0x10>
        *pulDest++ = *pulSrc++;
1a0001a6:	6804      	ldr	r4, [r0, #0]
1a0001a8:	600c      	str	r4, [r1, #0]
)))
void data_init(unsigned int romstart, unsigned int start, unsigned int len) {
    unsigned int *pulDest = (unsigned int*) start;
    unsigned int *pulSrc = (unsigned int*) romstart;
    unsigned int loop;
    for (loop = 0; loop < len; loop = loop + 4)
1a0001aa:	3304      	adds	r3, #4
        *pulDest++ = *pulSrc++;
1a0001ac:	3004      	adds	r0, #4
1a0001ae:	3104      	adds	r1, #4
)))
void data_init(unsigned int romstart, unsigned int start, unsigned int len) {
    unsigned int *pulDest = (unsigned int*) start;
    unsigned int *pulSrc = (unsigned int*) romstart;
    unsigned int loop;
    for (loop = 0; loop < len; loop = loop + 4)
1a0001b0:	4293      	cmp	r3, r2
1a0001b2:	d3f8      	bcc.n	1a0001a6 <data_init+0x6>
        *pulDest++ = *pulSrc++;
}
1a0001b4:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0001b8:	4770      	bx	lr
1a0001ba:	bf00      	nop

1a0001bc <bss_init>:

__attribute__ ((section(".after_vectors")))
void bss_init(unsigned int start, unsigned int len) {
    unsigned int *pulDest = (unsigned int*) start;
    unsigned int loop;
    for (loop = 0; loop < len; loop = loop + 4)
1a0001bc:	2300      	movs	r3, #0
1a0001be:	e003      	b.n	1a0001c8 <bss_init+0xc>
        *pulDest++ = 0;
1a0001c0:	2200      	movs	r2, #0
1a0001c2:	6002      	str	r2, [r0, #0]

__attribute__ ((section(".after_vectors")))
void bss_init(unsigned int start, unsigned int len) {
    unsigned int *pulDest = (unsigned int*) start;
    unsigned int loop;
    for (loop = 0; loop < len; loop = loop + 4)
1a0001c4:	3304      	adds	r3, #4
        *pulDest++ = 0;
1a0001c6:	3004      	adds	r0, #4

__attribute__ ((section(".after_vectors")))
void bss_init(unsigned int start, unsigned int len) {
    unsigned int *pulDest = (unsigned int*) start;
    unsigned int loop;
    for (loop = 0; loop < len; loop = loop + 4)
1a0001c8:	428b      	cmp	r3, r1
1a0001ca:	d3f9      	bcc.n	1a0001c0 <bss_init+0x4>
        *pulDest++ = 0;
}
1a0001cc:	4770      	bx	lr
1a0001ce:	bf00      	nop
1a0001d0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001fc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000200:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000204:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000208:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00020c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000210:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000214:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000218:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00021c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000220:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000224:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000228:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00022c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000230:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000234:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000238:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00023c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000240:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000244:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000248:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00024c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000250:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000254:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000258:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00025c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000260:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000264:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000268:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00026c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000270:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000274:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000278:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00027c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000280:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000284:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000288:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00028c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000290:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000294:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000298:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00029c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ac:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002bc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002cc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

1a0002fc <CRP_WORD>:
1a0002fc:	ffff ffff                                   ....

1a000300 <main>:
/*==================[declaraciones de funciones externas]====================*/

/*==================[funcion principal]======================================*/

// FUNCION PRINCIPAL, PUNTO DE ENTRADA AL PROGRAMA LUEGO DE ENCENDIDO O RESET.
int main( void ){
1a000300:	b508      	push	{r3, lr}

   // ---------- CONFIGURACIONES ------------------------------
   // Inicializar y configurar la plataforma
   boardInit();   
1a000302:	f000 fc2f 	bl	1a000b64 <boardInit>
   
   // ---------- REPETIR POR SIEMPRE --------------------------
   while( TRUE )
   {      
      // Si se presiona TEC1, enciende el LEDR
      gpioWrite( LEDR, !(gpioRead(TEC1)) );
1a000306:	2024      	movs	r0, #36	; 0x24
1a000308:	f000 fd98 	bl	1a000e3c <gpioRead>
1a00030c:	fab0 f180 	clz	r1, r0
1a000310:	0949      	lsrs	r1, r1, #5
1a000312:	2028      	movs	r0, #40	; 0x28
1a000314:	f000 fd66 	bl	1a000de4 <gpioWrite>
      
      // Si se presiona TEC2, enciende el LED1
      gpioWrite( LED1, !(gpioRead(TEC2)) );
1a000318:	2025      	movs	r0, #37	; 0x25
1a00031a:	f000 fd8f 	bl	1a000e3c <gpioRead>
1a00031e:	fab0 f180 	clz	r1, r0
1a000322:	0949      	lsrs	r1, r1, #5
1a000324:	202b      	movs	r0, #43	; 0x2b
1a000326:	f000 fd5d 	bl	1a000de4 <gpioWrite>
      
      // Si se presiona TEC3, enciende el LED2
      gpioWrite( LED2, !(gpioRead(TEC3)) );
1a00032a:	2026      	movs	r0, #38	; 0x26
1a00032c:	f000 fd86 	bl	1a000e3c <gpioRead>
1a000330:	fab0 f180 	clz	r1, r0
1a000334:	0949      	lsrs	r1, r1, #5
1a000336:	202c      	movs	r0, #44	; 0x2c
1a000338:	f000 fd54 	bl	1a000de4 <gpioWrite>
      
      // Si se presiona TEC4, enciende el LED3
      gpioWrite( LED3, !(gpioRead(TEC4)) );
1a00033c:	2027      	movs	r0, #39	; 0x27
1a00033e:	f000 fd7d 	bl	1a000e3c <gpioRead>
1a000342:	fab0 f180 	clz	r1, r0
1a000346:	0949      	lsrs	r1, r1, #5
1a000348:	202d      	movs	r0, #45	; 0x2d
1a00034a:	f000 fd4b 	bl	1a000de4 <gpioWrite>
      gpioToggle( LEDB );
      
      // Retardo bloqueante durante 100ms
      delay( 100 );
*/
   } 
1a00034e:	e7da      	b.n	1a000306 <main+0x6>

1a000350 <SystemCoreClockUpdate>:


/* Update system core clock rate, should be called if the system has
   a clock rate change */
void SystemCoreClockUpdate(void)
{
1a000350:	b508      	push	{r3, lr}
   /* CPU core speed */
   SystemCoreClock = Chip_Clock_GetRate(CLK_MX_MXCORE);
1a000352:	2069      	movs	r0, #105	; 0x69
1a000354:	f000 fa5a 	bl	1a00080c <Chip_Clock_GetRate>
1a000358:	4b01      	ldr	r3, [pc, #4]	; (1a000360 <SystemCoreClockUpdate+0x10>)
1a00035a:	6018      	str	r0, [r3, #0]
1a00035c:	bd08      	pop	{r3, pc}
1a00035e:	bf00      	nop
1a000360:	10000008 	.word	0x10000008

1a000364 <pll_calc_divs>:
       return -val;
   return val;
}

static void pll_calc_divs(uint32_t freq, PLL_PARAM_T *ppll)
{
1a000364:	b5f0      	push	{r4, r5, r6, r7, lr}

   uint32_t prev = freq;
   int n, m, p;

   /* When direct mode is set FBSEL should be a don't care */
   if (ppll->ctrl & (1 << 7)) {
1a000366:	680b      	ldr	r3, [r1, #0]
1a000368:	f013 0f80 	tst.w	r3, #128	; 0x80
1a00036c:	d002      	beq.n	1a000374 <pll_calc_divs+0x10>
       ppll->ctrl &= ~(1 << 6);
1a00036e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a000372:	600b      	str	r3, [r1, #0]
1a000374:	4686      	mov	lr, r0
1a000376:	2601      	movs	r6, #1
1a000378:	e041      	b.n	1a0003fe <pll_calc_divs+0x9a>
   }
   for (n = 1; n <= 4; n++) {
       for (p = 0; p < 4; p ++) {
           for (m = 1; m <= 256; m++) {
               uint32_t fcco, fout;
               if (ppll->ctrl & (1 << 6)) {
1a00037a:	680d      	ldr	r5, [r1, #0]
1a00037c:	f015 0f40 	tst.w	r5, #64	; 0x40
1a000380:	d008      	beq.n	1a000394 <pll_calc_divs+0x30>
                   fcco = ((m << (p + 1)) * ppll->fin) / n;
1a000382:	1c7b      	adds	r3, r7, #1
1a000384:	fa04 f203 	lsl.w	r2, r4, r3
1a000388:	694b      	ldr	r3, [r1, #20]
1a00038a:	fb03 f302 	mul.w	r3, r3, r2
1a00038e:	fbb3 f3f6 	udiv	r3, r3, r6
1a000392:	e004      	b.n	1a00039e <pll_calc_divs+0x3a>
               } else {
                   fcco = (m * ppll->fin) / n;
1a000394:	694b      	ldr	r3, [r1, #20]
1a000396:	fb04 f303 	mul.w	r3, r4, r3
1a00039a:	fbb3 f3f6 	udiv	r3, r3, r6
               }
               if (fcco < PLL_MIN_CCO_FREQ) continue;
1a00039e:	4a19      	ldr	r2, [pc, #100]	; (1a000404 <pll_calc_divs+0xa0>)
1a0003a0:	4293      	cmp	r3, r2
1a0003a2:	d920      	bls.n	1a0003e6 <pll_calc_divs+0x82>
               if (fcco > PLL_MAX_CCO_FREQ) break;
1a0003a4:	4a18      	ldr	r2, [pc, #96]	; (1a000408 <pll_calc_divs+0xa4>)
1a0003a6:	4293      	cmp	r3, r2
1a0003a8:	d823      	bhi.n	1a0003f2 <pll_calc_divs+0x8e>
               if (ppll->ctrl & (1 << 7)) {
1a0003aa:	f015 0f80 	tst.w	r5, #128	; 0x80
1a0003ae:	d103      	bne.n	1a0003b8 <pll_calc_divs+0x54>
                   fout = fcco;
               } else {
                   fout = fcco >> (p + 1);
1a0003b0:	1c7a      	adds	r2, r7, #1
1a0003b2:	fa23 f202 	lsr.w	r2, r3, r2
1a0003b6:	e000      	b.n	1a0003ba <pll_calc_divs+0x56>
                   fcco = (m * ppll->fin) / n;
               }
               if (fcco < PLL_MIN_CCO_FREQ) continue;
               if (fcco > PLL_MAX_CCO_FREQ) break;
               if (ppll->ctrl & (1 << 7)) {
                   fout = fcco;
1a0003b8:	461a      	mov	r2, r3
/*****************************************************************************
 * Private functions
 ****************************************************************************/
__STATIC_INLINE uint32_t ABS(int val)
{
   if (val < 0)
1a0003ba:	1a85      	subs	r5, r0, r2
1a0003bc:	d502      	bpl.n	1a0003c4 <pll_calc_divs+0x60>
       return -val;
1a0003be:	f1c5 0c00 	rsb	ip, r5, #0
1a0003c2:	e000      	b.n	1a0003c6 <pll_calc_divs+0x62>
   return val;
1a0003c4:	46ac      	mov	ip, r5
                   fout = fcco;
               } else {
                   fout = fcco >> (p + 1);
               }

               if (ABS(freq - fout) < prev) {
1a0003c6:	45e6      	cmp	lr, ip
1a0003c8:	d90d      	bls.n	1a0003e6 <pll_calc_divs+0x82>
                   ppll->nsel = n;
1a0003ca:	608e      	str	r6, [r1, #8]
                   ppll->psel = p + 1;
1a0003cc:	f107 0e01 	add.w	lr, r7, #1
1a0003d0:	f8c1 e00c 	str.w	lr, [r1, #12]
                   ppll->msel = m;
1a0003d4:	610c      	str	r4, [r1, #16]
                   ppll->fout = fout;
1a0003d6:	618a      	str	r2, [r1, #24]
                   ppll->fcco = fcco;
1a0003d8:	61cb      	str	r3, [r1, #28]
/*****************************************************************************
 * Private functions
 ****************************************************************************/
__STATIC_INLINE uint32_t ABS(int val)
{
   if (val < 0)
1a0003da:	2d00      	cmp	r5, #0
1a0003dc:	da02      	bge.n	1a0003e4 <pll_calc_divs+0x80>
       return -val;
1a0003de:	f1c5 0e00 	rsb	lr, r5, #0
1a0003e2:	e000      	b.n	1a0003e6 <pll_calc_divs+0x82>
   return val;
1a0003e4:	46ae      	mov	lr, r5
   if (ppll->ctrl & (1 << 7)) {
       ppll->ctrl &= ~(1 << 6);
   }
   for (n = 1; n <= 4; n++) {
       for (p = 0; p < 4; p ++) {
           for (m = 1; m <= 256; m++) {
1a0003e6:	3401      	adds	r4, #1
1a0003e8:	e000      	b.n	1a0003ec <pll_calc_divs+0x88>
1a0003ea:	2401      	movs	r4, #1
1a0003ec:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
1a0003f0:	ddc3      	ble.n	1a00037a <pll_calc_divs+0x16>
   /* When direct mode is set FBSEL should be a don't care */
   if (ppll->ctrl & (1 << 7)) {
       ppll->ctrl &= ~(1 << 6);
   }
   for (n = 1; n <= 4; n++) {
       for (p = 0; p < 4; p ++) {
1a0003f2:	3701      	adds	r7, #1
1a0003f4:	e000      	b.n	1a0003f8 <pll_calc_divs+0x94>
1a0003f6:	2700      	movs	r7, #0
1a0003f8:	2f03      	cmp	r7, #3
1a0003fa:	ddf6      	ble.n	1a0003ea <pll_calc_divs+0x86>

   /* When direct mode is set FBSEL should be a don't care */
   if (ppll->ctrl & (1 << 7)) {
       ppll->ctrl &= ~(1 << 6);
   }
   for (n = 1; n <= 4; n++) {
1a0003fc:	3601      	adds	r6, #1
1a0003fe:	2e04      	cmp	r6, #4
1a000400:	ddf9      	ble.n	1a0003f6 <pll_calc_divs+0x92>
                   prev = ABS(freq - fout);
               }
           }
       }
   }
}
1a000402:	bdf0      	pop	{r4, r5, r6, r7, pc}
1a000404:	094c5eff 	.word	0x094c5eff
1a000408:	1312d000 	.word	0x1312d000

1a00040c <pll_get_frac>:

static void pll_get_frac(uint32_t freq, PLL_PARAM_T *ppll)
{
1a00040c:	b5f0      	push	{r4, r5, r6, r7, lr}
1a00040e:	b099      	sub	sp, #100	; 0x64
1a000410:	4605      	mov	r5, r0
1a000412:	460c      	mov	r4, r1
   int diff[3];
   PLL_PARAM_T pll[3] = {{0},{0},{0}};
1a000414:	4668      	mov	r0, sp
1a000416:	2100      	movs	r1, #0
1a000418:	2260      	movs	r2, #96	; 0x60
1a00041a:	f000 fd3b 	bl	1a000e94 <memset>

   /* Try direct mode */
   pll[0].ctrl |= (1 << 7);
1a00041e:	2380      	movs	r3, #128	; 0x80
1a000420:	9300      	str	r3, [sp, #0]
   pll[0].fin = ppll->fin;
1a000422:	6963      	ldr	r3, [r4, #20]
1a000424:	9305      	str	r3, [sp, #20]
   pll[0].srcin = ppll->srcin;
1a000426:	7923      	ldrb	r3, [r4, #4]
1a000428:	f88d 3004 	strb.w	r3, [sp, #4]
   pll_calc_divs(freq, &pll[0]);
1a00042c:	4628      	mov	r0, r5
1a00042e:	4669      	mov	r1, sp
1a000430:	f7ff ff98 	bl	1a000364 <pll_calc_divs>
   if (pll[0].fout == freq) {
1a000434:	9b06      	ldr	r3, [sp, #24]
1a000436:	42ab      	cmp	r3, r5
1a000438:	d107      	bne.n	1a00044a <pll_get_frac+0x3e>
       *ppll = pll[0];
1a00043a:	466d      	mov	r5, sp
1a00043c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a00043e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000440:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000444:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
       return ;
1a000448:	e05b      	b.n	1a000502 <pll_get_frac+0xf6>
/*****************************************************************************
 * Private functions
 ****************************************************************************/
__STATIC_INLINE uint32_t ABS(int val)
{
   if (val < 0)
1a00044a:	1aeb      	subs	r3, r5, r3
1a00044c:	d500      	bpl.n	1a000450 <pll_get_frac+0x44>
       return -val;
1a00044e:	425b      	negs	r3, r3
   pll_calc_divs(freq, &pll[0]);
   if (pll[0].fout == freq) {
       *ppll = pll[0];
       return ;
   }
   diff[0] = ABS(freq - pll[0].fout);
1a000450:	461e      	mov	r6, r3

   /* Try non-Integer mode */
   pll[2].ctrl = (1 << 6);
1a000452:	2340      	movs	r3, #64	; 0x40
1a000454:	9310      	str	r3, [sp, #64]	; 0x40
   pll[2].fin = ppll->fin;
1a000456:	6963      	ldr	r3, [r4, #20]
1a000458:	9315      	str	r3, [sp, #84]	; 0x54
   pll[2].srcin = ppll->srcin;
1a00045a:	7923      	ldrb	r3, [r4, #4]
1a00045c:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
   pll_calc_divs(freq, &pll[2]);
1a000460:	4628      	mov	r0, r5
1a000462:	a910      	add	r1, sp, #64	; 0x40
1a000464:	f7ff ff7e 	bl	1a000364 <pll_calc_divs>
   if (pll[2].fout == freq) {
1a000468:	9b16      	ldr	r3, [sp, #88]	; 0x58
1a00046a:	42ab      	cmp	r3, r5
1a00046c:	d107      	bne.n	1a00047e <pll_get_frac+0x72>
       *ppll = pll[2];
1a00046e:	ad10      	add	r5, sp, #64	; 0x40
1a000470:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000472:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000474:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000478:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
       return ;
1a00047c:	e041      	b.n	1a000502 <pll_get_frac+0xf6>
/*****************************************************************************
 * Private functions
 ****************************************************************************/
__STATIC_INLINE uint32_t ABS(int val)
{
   if (val < 0)
1a00047e:	1aeb      	subs	r3, r5, r3
1a000480:	d500      	bpl.n	1a000484 <pll_get_frac+0x78>
       return -val;
1a000482:	425b      	negs	r3, r3
   if (pll[2].fout == freq) {
       *ppll = pll[2];
       return ;
   }

   diff[2] = ABS(freq - pll[2].fout);
1a000484:	461f      	mov	r7, r3
   /* Try integer mode */
   pll[1].ctrl = (1 << 6);
1a000486:	2340      	movs	r3, #64	; 0x40
1a000488:	9308      	str	r3, [sp, #32]
   pll[1].fin = ppll->fin;
1a00048a:	6963      	ldr	r3, [r4, #20]
1a00048c:	930d      	str	r3, [sp, #52]	; 0x34
   pll[1].srcin = ppll->srcin;
1a00048e:	7923      	ldrb	r3, [r4, #4]
1a000490:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   pll_calc_divs(freq, &pll[1]);
1a000494:	4628      	mov	r0, r5
1a000496:	a908      	add	r1, sp, #32
1a000498:	f7ff ff64 	bl	1a000364 <pll_calc_divs>
   if (pll[1].fout == freq) {
1a00049c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a00049e:	42ab      	cmp	r3, r5
1a0004a0:	d107      	bne.n	1a0004b2 <pll_get_frac+0xa6>
       *ppll = pll[1];
1a0004a2:	ad08      	add	r5, sp, #32
1a0004a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a0004a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a0004a8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a0004ac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
       return ;
1a0004b0:	e027      	b.n	1a000502 <pll_get_frac+0xf6>
/*****************************************************************************
 * Private functions
 ****************************************************************************/
__STATIC_INLINE uint32_t ABS(int val)
{
   if (val < 0)
1a0004b2:	1aed      	subs	r5, r5, r3
1a0004b4:	d500      	bpl.n	1a0004b8 <pll_get_frac+0xac>
       return -val;
1a0004b6:	426d      	negs	r5, r5
       return ;
   }
   diff[1] = ABS(freq - pll[1].fout);

   /* Find the min of 3 and return */
   if (diff[0] <= diff[1]) {
1a0004b8:	42ae      	cmp	r6, r5
1a0004ba:	dc11      	bgt.n	1a0004e0 <pll_get_frac+0xd4>
       if (diff[0] <= diff[2]) {
1a0004bc:	42be      	cmp	r6, r7
1a0004be:	dc07      	bgt.n	1a0004d0 <pll_get_frac+0xc4>
           *ppll = pll[0];
1a0004c0:	466d      	mov	r5, sp
1a0004c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a0004c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a0004c6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a0004ca:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a0004ce:	e018      	b.n	1a000502 <pll_get_frac+0xf6>
       } else {
           *ppll = pll[2];
1a0004d0:	ad10      	add	r5, sp, #64	; 0x40
1a0004d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a0004d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a0004d6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a0004da:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a0004de:	e010      	b.n	1a000502 <pll_get_frac+0xf6>
       }
   } else {
       if (diff[1] <= diff[2]) {
1a0004e0:	42af      	cmp	r7, r5
1a0004e2:	db07      	blt.n	1a0004f4 <pll_get_frac+0xe8>
           *ppll = pll[1];
1a0004e4:	ad08      	add	r5, sp, #32
1a0004e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a0004e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a0004ea:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a0004ee:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a0004f2:	e006      	b.n	1a000502 <pll_get_frac+0xf6>
       } else {
           *ppll = pll[2];
1a0004f4:	ad10      	add	r5, sp, #64	; 0x40
1a0004f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a0004f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a0004fa:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a0004fe:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
       }
   }
}
1a000502:	b019      	add	sp, #100	; 0x64
1a000504:	bdf0      	pop	{r4, r5, r6, r7, pc}
1a000506:	bf00      	nop

1a000508 <Chip_Clock_FindBaseClock>:
   return Chip_Clock_GetClockInputHz(input) / (div + 1);
}

/* Finds the base clock for the peripheral clock */
static CHIP_CGU_BASE_CLK_T Chip_Clock_FindBaseClock(CHIP_CCU_CLK_T clk)
{
1a000508:	b430      	push	{r4, r5}
   CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
   int i = 0;
1a00050a:	2300      	movs	r3, #0
}

/* Finds the base clock for the peripheral clock */
static CHIP_CGU_BASE_CLK_T Chip_Clock_FindBaseClock(CHIP_CCU_CLK_T clk)
{
   CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
1a00050c:	211c      	movs	r1, #28
   int i = 0;

   while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a00050e:	e010      	b.n	1a000532 <Chip_Clock_FindBaseClock+0x2a>
       if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
1a000510:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a000514:	0052      	lsls	r2, r2, #1
1a000516:	4d0d      	ldr	r5, [pc, #52]	; (1a00054c <Chip_Clock_FindBaseClock+0x44>)
1a000518:	5aaa      	ldrh	r2, [r5, r2]
1a00051a:	4282      	cmp	r2, r0
1a00051c:	d806      	bhi.n	1a00052c <Chip_Clock_FindBaseClock+0x24>
1a00051e:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a000522:	0052      	lsls	r2, r2, #1
1a000524:	442a      	add	r2, r5
1a000526:	8852      	ldrh	r2, [r2, #2]
1a000528:	4282      	cmp	r2, r0
1a00052a:	d201      	bcs.n	1a000530 <Chip_Clock_FindBaseClock+0x28>
           baseclk = periph_to_base[i].clkbase;
       }
       else {
           i++;
1a00052c:	3301      	adds	r3, #1
1a00052e:	e000      	b.n	1a000532 <Chip_Clock_FindBaseClock+0x2a>
   CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
   int i = 0;

   while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
       if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
           baseclk = periph_to_base[i].clkbase;
1a000530:	4621      	mov	r1, r4
static CHIP_CGU_BASE_CLK_T Chip_Clock_FindBaseClock(CHIP_CCU_CLK_T clk)
{
   CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
   int i = 0;

   while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a000532:	291c      	cmp	r1, #28
1a000534:	d107      	bne.n	1a000546 <Chip_Clock_FindBaseClock+0x3e>
1a000536:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a00053a:	0052      	lsls	r2, r2, #1
1a00053c:	4c03      	ldr	r4, [pc, #12]	; (1a00054c <Chip_Clock_FindBaseClock+0x44>)
1a00053e:	4422      	add	r2, r4
1a000540:	7914      	ldrb	r4, [r2, #4]
1a000542:	428c      	cmp	r4, r1
1a000544:	d1e4      	bne.n	1a000510 <Chip_Clock_FindBaseClock+0x8>
           i++;
       }
   }

   return baseclk;
}
1a000546:	4608      	mov	r0, r1
1a000548:	bc30      	pop	{r4, r5}
1a00054a:	4770      	bx	lr
1a00054c:	1a000eb0 	.word	0x1a000eb0

1a000550 <Chip_Clock_EnableCrystal>:
 * Public functions
 ****************************************************************************/

/* Enables the crystal oscillator */
void Chip_Clock_EnableCrystal(void)
{
1a000550:	b082      	sub	sp, #8
   volatile uint32_t delay = 1000;
1a000552:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
1a000556:	9301      	str	r3, [sp, #4]

   uint32_t OldCrystalConfig = LPC_CGU->XTAL_OSC_CTRL;
1a000558:	4a0d      	ldr	r2, [pc, #52]	; (1a000590 <Chip_Clock_EnableCrystal+0x40>)
1a00055a:	6993      	ldr	r3, [r2, #24]

   /* Clear bypass mode */
   OldCrystalConfig &= (~2);
1a00055c:	f023 0102 	bic.w	r1, r3, #2
   if (OldCrystalConfig != LPC_CGU->XTAL_OSC_CTRL) {
1a000560:	6992      	ldr	r2, [r2, #24]
1a000562:	428a      	cmp	r2, r1
1a000564:	d001      	beq.n	1a00056a <Chip_Clock_EnableCrystal+0x1a>
       LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a000566:	4a0a      	ldr	r2, [pc, #40]	; (1a000590 <Chip_Clock_EnableCrystal+0x40>)
1a000568:	6191      	str	r1, [r2, #24]
   }

   /* Enable crystal oscillator */
   OldCrystalConfig &= (~1);
1a00056a:	f023 0303 	bic.w	r3, r3, #3
   if (OscRateIn >= 20000000) {
1a00056e:	4a09      	ldr	r2, [pc, #36]	; (1a000594 <Chip_Clock_EnableCrystal+0x44>)
1a000570:	6811      	ldr	r1, [r2, #0]
1a000572:	4a09      	ldr	r2, [pc, #36]	; (1a000598 <Chip_Clock_EnableCrystal+0x48>)
1a000574:	4291      	cmp	r1, r2
1a000576:	d901      	bls.n	1a00057c <Chip_Clock_EnableCrystal+0x2c>
       OldCrystalConfig |= 4;  /* Set high frequency mode */
1a000578:	f043 0304 	orr.w	r3, r3, #4

   }
   LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a00057c:	4a04      	ldr	r2, [pc, #16]	; (1a000590 <Chip_Clock_EnableCrystal+0x40>)
1a00057e:	6193      	str	r3, [r2, #24]

   /* Delay for 250uSec */
   while(delay--) {}
1a000580:	9b01      	ldr	r3, [sp, #4]
1a000582:	1e5a      	subs	r2, r3, #1
1a000584:	9201      	str	r2, [sp, #4]
1a000586:	2b00      	cmp	r3, #0
1a000588:	d1fa      	bne.n	1a000580 <Chip_Clock_EnableCrystal+0x30>
}
1a00058a:	b002      	add	sp, #8
1a00058c:	4770      	bx	lr
1a00058e:	bf00      	nop
1a000590:	40050000 	.word	0x40050000
1a000594:	1a000f64 	.word	0x1a000f64
1a000598:	01312cff 	.word	0x01312cff

1a00059c <Chip_Clock_GetDividerSource>:
}

/* Gets a CGU clock divider source */
CHIP_CGU_CLKIN_T Chip_Clock_GetDividerSource(CHIP_CGU_IDIV_T Divider)
{
   uint32_t reg = LPC_CGU->IDIV_CTRL[Divider];
1a00059c:	3012      	adds	r0, #18
1a00059e:	4b05      	ldr	r3, [pc, #20]	; (1a0005b4 <Chip_Clock_GetDividerSource+0x18>)
1a0005a0:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

   if (reg & 1) {  /* divider is powered down */
1a0005a4:	f010 0f01 	tst.w	r0, #1
1a0005a8:	d102      	bne.n	1a0005b0 <Chip_Clock_GetDividerSource+0x14>
       return CLKINPUT_PD;
   }

   return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a0005aa:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a0005ae:	4770      	bx	lr
CHIP_CGU_CLKIN_T Chip_Clock_GetDividerSource(CHIP_CGU_IDIV_T Divider)
{
   uint32_t reg = LPC_CGU->IDIV_CTRL[Divider];

   if (reg & 1) {  /* divider is powered down */
       return CLKINPUT_PD;
1a0005b0:	2011      	movs	r0, #17
   }

   return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
}
1a0005b2:	4770      	bx	lr
1a0005b4:	40050000 	.word	0x40050000

1a0005b8 <Chip_Clock_GetDividerDivisor>:

/* Gets a CGU clock divider divisor */
uint32_t Chip_Clock_GetDividerDivisor(CHIP_CGU_IDIV_T Divider)
{
   return (CHIP_CGU_CLKIN_T) ((LPC_CGU->IDIV_CTRL[Divider] >> 2) & CHIP_CGU_IDIV_MASK(Divider));
1a0005b8:	f100 0212 	add.w	r2, r0, #18
1a0005bc:	4b03      	ldr	r3, [pc, #12]	; (1a0005cc <Chip_Clock_GetDividerDivisor+0x14>)
1a0005be:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
1a0005c2:	4b03      	ldr	r3, [pc, #12]	; (1a0005d0 <Chip_Clock_GetDividerDivisor+0x18>)
1a0005c4:	5c18      	ldrb	r0, [r3, r0]
}
1a0005c6:	ea00 0092 	and.w	r0, r0, r2, lsr #2
1a0005ca:	4770      	bx	lr
1a0005cc:	40050000 	.word	0x40050000
1a0005d0:	1a000ea8 	.word	0x1a000ea8

1a0005d4 <Chip_Clock_GetClockInputHz>:

/* Returns the frequency of the specified input clock source */
uint32_t Chip_Clock_GetClockInputHz(CHIP_CGU_CLKIN_T input)
{
1a0005d4:	b508      	push	{r3, lr}
   uint32_t rate = 0;

   switch (input) {
1a0005d6:	2810      	cmp	r0, #16
1a0005d8:	d80a      	bhi.n	1a0005f0 <Chip_Clock_GetClockInputHz+0x1c>
1a0005da:	e8df f000 	tbb	[pc, r0]
1a0005de:	0b42      	.short	0x0b42
1a0005e0:	091f160d 	.word	0x091f160d
1a0005e4:	2b282522 	.word	0x2b282522
1a0005e8:	322e0909 	.word	0x322e0909
1a0005ec:	3a36      	.short	0x3a36
1a0005ee:	3e          	.byte	0x3e
1a0005ef:	00          	.byte	0x00
}

/* Returns the frequency of the specified input clock source */
uint32_t Chip_Clock_GetClockInputHz(CHIP_CGU_CLKIN_T input)
{
   uint32_t rate = 0;
1a0005f0:	2000      	movs	r0, #0
1a0005f2:	bd08      	pop	{r3, pc}
   case CLKIN_32K:
       rate = CRYSTAL_32K_FREQ_IN;
       break;

   case CLKIN_IRC:
       rate = CGU_IRC_FREQ;
1a0005f4:	481e      	ldr	r0, [pc, #120]	; (1a000670 <Chip_Clock_GetClockInputHz+0x9c>)
       break;
1a0005f6:	bd08      	pop	{r3, pc}

   case CLKIN_ENET_RX:
       if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a0005f8:	4b1e      	ldr	r3, [pc, #120]	; (1a000674 <Chip_Clock_GetClockInputHz+0xa0>)
1a0005fa:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a0005fe:	f003 0307 	and.w	r3, r3, #7
1a000602:	2b04      	cmp	r3, #4
1a000604:	d130      	bne.n	1a000668 <Chip_Clock_GetClockInputHz+0x94>
}

/* Returns the frequency of the specified input clock source */
uint32_t Chip_Clock_GetClockInputHz(CHIP_CGU_CLKIN_T input)
{
   uint32_t rate = 0;
1a000606:	2000      	movs	r0, #0
1a000608:	bd08      	pop	{r3, pc}
           rate = 25000000;
       }
       break;

   case CLKIN_ENET_TX:
       if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a00060a:	4b1a      	ldr	r3, [pc, #104]	; (1a000674 <Chip_Clock_GetClockInputHz+0xa0>)
1a00060c:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a000610:	f003 0307 	and.w	r3, r3, #7
1a000614:	2b04      	cmp	r3, #4
1a000616:	d029      	beq.n	1a00066c <Chip_Clock_GetClockInputHz+0x98>
           rate = 25000000; /* MII uses 25 MHz */
1a000618:	4817      	ldr	r0, [pc, #92]	; (1a000678 <Chip_Clock_GetClockInputHz+0xa4>)
1a00061a:	bd08      	pop	{r3, pc}
           rate = 50000000; /* RMII uses 50 MHz */
       }
       break;

   case CLKIN_CLKIN:
       rate = ExtRateIn;
1a00061c:	4b17      	ldr	r3, [pc, #92]	; (1a00067c <Chip_Clock_GetClockInputHz+0xa8>)
1a00061e:	6818      	ldr	r0, [r3, #0]
       break;
1a000620:	bd08      	pop	{r3, pc}

   case CLKIN_CRYSTAL:
       rate = OscRateIn;
1a000622:	4b17      	ldr	r3, [pc, #92]	; (1a000680 <Chip_Clock_GetClockInputHz+0xac>)
1a000624:	6818      	ldr	r0, [r3, #0]
       break;
1a000626:	bd08      	pop	{r3, pc}

   case CLKIN_USBPLL:
       rate = audio_usb_pll_freq[CGU_USB_PLL];
1a000628:	4b16      	ldr	r3, [pc, #88]	; (1a000684 <Chip_Clock_GetClockInputHz+0xb0>)
1a00062a:	6818      	ldr	r0, [r3, #0]
       break;
1a00062c:	bd08      	pop	{r3, pc}

   case CLKIN_AUDIOPLL:
       rate = audio_usb_pll_freq[CGU_AUDIO_PLL];
1a00062e:	4b15      	ldr	r3, [pc, #84]	; (1a000684 <Chip_Clock_GetClockInputHz+0xb0>)
1a000630:	6858      	ldr	r0, [r3, #4]
       break;
1a000632:	bd08      	pop	{r3, pc}

   case CLKIN_MAINPLL:
       rate = Chip_Clock_GetMainPLLHz();
1a000634:	f000 f86a 	bl	1a00070c <Chip_Clock_GetMainPLLHz>
       break;
1a000638:	bd08      	pop	{r3, pc}

   case CLKIN_IDIVA:
       rate = Chip_Clock_GetDivRate(input, CLK_IDIV_A);
1a00063a:	2100      	movs	r1, #0
1a00063c:	f000 f89a 	bl	1a000774 <Chip_Clock_GetDivRate>
       break;
1a000640:	bd08      	pop	{r3, pc}

   case CLKIN_IDIVB:
       rate = Chip_Clock_GetDivRate(input, CLK_IDIV_B);
1a000642:	2101      	movs	r1, #1
1a000644:	f000 f896 	bl	1a000774 <Chip_Clock_GetDivRate>
       break;
1a000648:	bd08      	pop	{r3, pc}

   case CLKIN_IDIVC:
       rate = Chip_Clock_GetDivRate(input, CLK_IDIV_C);
1a00064a:	2102      	movs	r1, #2
1a00064c:	f000 f892 	bl	1a000774 <Chip_Clock_GetDivRate>
       break;
1a000650:	bd08      	pop	{r3, pc}

   case CLKIN_IDIVD:
       rate = Chip_Clock_GetDivRate(input, CLK_IDIV_D);
1a000652:	2103      	movs	r1, #3
1a000654:	f000 f88e 	bl	1a000774 <Chip_Clock_GetDivRate>
       break;
1a000658:	bd08      	pop	{r3, pc}

   case CLKIN_IDIVE:
       rate = Chip_Clock_GetDivRate(input, CLK_IDIV_E);
1a00065a:	2104      	movs	r1, #4
1a00065c:	f000 f88a 	bl	1a000774 <Chip_Clock_GetDivRate>
       break;
1a000660:	bd08      	pop	{r3, pc}
{
   uint32_t rate = 0;

   switch (input) {
   case CLKIN_32K:
       rate = CRYSTAL_32K_FREQ_IN;
1a000662:	f44f 4000 	mov.w	r0, #32768	; 0x8000
1a000666:	bd08      	pop	{r3, pc}
       break;

   case CLKIN_ENET_RX:
       if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
           /* MII mode requires 25MHz clock */
           rate = 25000000;
1a000668:	4803      	ldr	r0, [pc, #12]	; (1a000678 <Chip_Clock_GetClockInputHz+0xa4>)
1a00066a:	bd08      	pop	{r3, pc}

   case CLKIN_ENET_TX:
       if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
           rate = 25000000; /* MII uses 25 MHz */
       } else {
           rate = 50000000; /* RMII uses 50 MHz */
1a00066c:	4806      	ldr	r0, [pc, #24]	; (1a000688 <Chip_Clock_GetClockInputHz+0xb4>)
   default:
       break;
   }

   return rate;
}
1a00066e:	bd08      	pop	{r3, pc}
1a000670:	00b71b00 	.word	0x00b71b00
1a000674:	40043000 	.word	0x40043000
1a000678:	017d7840 	.word	0x017d7840
1a00067c:	1a000f68 	.word	0x1a000f68
1a000680:	1a000f64 	.word	0x1a000f64
1a000684:	10000000 	.word	0x10000000
1a000688:	02faf080 	.word	0x02faf080

1a00068c <Chip_Clock_CalcMainPLLValue>:
   while(delay--) {}
}

/* Calculate the Main PLL div values */
int Chip_Clock_CalcMainPLLValue(uint32_t freq, PLL_PARAM_T *ppll)
{
1a00068c:	b538      	push	{r3, r4, r5, lr}
1a00068e:	4605      	mov	r5, r0
1a000690:	460c      	mov	r4, r1
   ppll->fin = Chip_Clock_GetClockInputHz(ppll->srcin);
1a000692:	7908      	ldrb	r0, [r1, #4]
1a000694:	f7ff ff9e 	bl	1a0005d4 <Chip_Clock_GetClockInputHz>
1a000698:	6160      	str	r0, [r4, #20]

   /* Do sanity check on frequency */
   if (freq > MAX_CLOCK_FREQ || freq < (PLL_MIN_CCO_FREQ / 16) || !ppll->fin) {
1a00069a:	4b19      	ldr	r3, [pc, #100]	; (1a000700 <Chip_Clock_CalcMainPLLValue+0x74>)
1a00069c:	442b      	add	r3, r5
1a00069e:	4a19      	ldr	r2, [pc, #100]	; (1a000704 <Chip_Clock_CalcMainPLLValue+0x78>)
1a0006a0:	4293      	cmp	r3, r2
1a0006a2:	d821      	bhi.n	1a0006e8 <Chip_Clock_CalcMainPLLValue+0x5c>
1a0006a4:	b318      	cbz	r0, 1a0006ee <Chip_Clock_CalcMainPLLValue+0x62>
       return -1;
   }

   ppll->ctrl = 1 << 7; /* Enable direct mode [If possible] */
1a0006a6:	2380      	movs	r3, #128	; 0x80
1a0006a8:	6023      	str	r3, [r4, #0]
   ppll->nsel = 0;
1a0006aa:	2300      	movs	r3, #0
1a0006ac:	60a3      	str	r3, [r4, #8]
   ppll->psel = 0;
1a0006ae:	60e3      	str	r3, [r4, #12]
   ppll->msel = freq / ppll->fin;
1a0006b0:	fbb5 f3f0 	udiv	r3, r5, r0
1a0006b4:	6123      	str	r3, [r4, #16]

   if (freq < PLL_MIN_CCO_FREQ || ppll->msel * ppll->fin != freq) {
1a0006b6:	4a14      	ldr	r2, [pc, #80]	; (1a000708 <Chip_Clock_CalcMainPLLValue+0x7c>)
1a0006b8:	4295      	cmp	r5, r2
1a0006ba:	d903      	bls.n	1a0006c4 <Chip_Clock_CalcMainPLLValue+0x38>
1a0006bc:	fb03 f000 	mul.w	r0, r3, r0
1a0006c0:	42a8      	cmp	r0, r5
1a0006c2:	d007      	beq.n	1a0006d4 <Chip_Clock_CalcMainPLLValue+0x48>
       pll_get_frac(freq, ppll);
1a0006c4:	4628      	mov	r0, r5
1a0006c6:	4621      	mov	r1, r4
1a0006c8:	f7ff fea0 	bl	1a00040c <pll_get_frac>
       if (!ppll->nsel) {
1a0006cc:	68a3      	ldr	r3, [r4, #8]
1a0006ce:	b18b      	cbz	r3, 1a0006f4 <Chip_Clock_CalcMainPLLValue+0x68>
           return -1;
       }
       ppll->nsel --;
1a0006d0:	3b01      	subs	r3, #1
1a0006d2:	60a3      	str	r3, [r4, #8]
   }

   if (ppll->msel == 0) {
1a0006d4:	6923      	ldr	r3, [r4, #16]
1a0006d6:	b183      	cbz	r3, 1a0006fa <Chip_Clock_CalcMainPLLValue+0x6e>
       return - 1;
   }

   if (ppll->psel) {
1a0006d8:	68e2      	ldr	r2, [r4, #12]
1a0006da:	b10a      	cbz	r2, 1a0006e0 <Chip_Clock_CalcMainPLLValue+0x54>
       ppll->psel --;
1a0006dc:	3a01      	subs	r2, #1
1a0006de:	60e2      	str	r2, [r4, #12]
   }

   ppll->msel --;
1a0006e0:	3b01      	subs	r3, #1
1a0006e2:	6123      	str	r3, [r4, #16]

   return 0;
1a0006e4:	2000      	movs	r0, #0
1a0006e6:	bd38      	pop	{r3, r4, r5, pc}
{
   ppll->fin = Chip_Clock_GetClockInputHz(ppll->srcin);

   /* Do sanity check on frequency */
   if (freq > MAX_CLOCK_FREQ || freq < (PLL_MIN_CCO_FREQ / 16) || !ppll->fin) {
       return -1;
1a0006e8:	f04f 30ff 	mov.w	r0, #4294967295
1a0006ec:	bd38      	pop	{r3, r4, r5, pc}
1a0006ee:	f04f 30ff 	mov.w	r0, #4294967295
1a0006f2:	bd38      	pop	{r3, r4, r5, pc}
   ppll->msel = freq / ppll->fin;

   if (freq < PLL_MIN_CCO_FREQ || ppll->msel * ppll->fin != freq) {
       pll_get_frac(freq, ppll);
       if (!ppll->nsel) {
           return -1;
1a0006f4:	f04f 30ff 	mov.w	r0, #4294967295
1a0006f8:	bd38      	pop	{r3, r4, r5, pc}
       }
       ppll->nsel --;
   }

   if (ppll->msel == 0) {
       return - 1;
1a0006fa:	f04f 30ff 	mov.w	r0, #4294967295
   }

   ppll->msel --;

   return 0;
}
1a0006fe:	bd38      	pop	{r3, r4, r5, pc}
1a000700:	ff6b3a10 	.word	0xff6b3a10
1a000704:	0b940510 	.word	0x0b940510
1a000708:	094c5eff 	.word	0x094c5eff

1a00070c <Chip_Clock_GetMainPLLHz>:
   return freq;
}

/* Returns the frequency of the main PLL */
uint32_t Chip_Clock_GetMainPLLHz(void)
{
1a00070c:	b570      	push	{r4, r5, r6, lr}
1a00070e:	b082      	sub	sp, #8
   uint32_t PLLReg = LPC_CGU->PLL1_CTRL;
1a000710:	4d16      	ldr	r5, [pc, #88]	; (1a00076c <Chip_Clock_GetMainPLLHz+0x60>)
1a000712:	6c6c      	ldr	r4, [r5, #68]	; 0x44
   uint32_t freq = Chip_Clock_GetClockInputHz((CHIP_CGU_CLKIN_T) ((PLLReg >> 24) & 0xF));
1a000714:	f3c4 6003 	ubfx	r0, r4, #24, #4
1a000718:	f7ff ff5c 	bl	1a0005d4 <Chip_Clock_GetClockInputHz>
1a00071c:	4606      	mov	r6, r0
   uint32_t msel, nsel, psel, direct, fbsel;
   uint32_t m, n, p;
   const uint8_t ptab[] = {1, 2, 4, 8};
1a00071e:	4b14      	ldr	r3, [pc, #80]	; (1a000770 <Chip_Clock_GetMainPLLHz+0x64>)
1a000720:	6818      	ldr	r0, [r3, #0]
1a000722:	9001      	str	r0, [sp, #4]

   /* No lock? */
   if (!(LPC_CGU->PLL1_STAT & 1)) {
1a000724:	6c28      	ldr	r0, [r5, #64]	; 0x40
1a000726:	f010 0001 	ands.w	r0, r0, #1
1a00072a:	d01d      	beq.n	1a000768 <Chip_Clock_GetMainPLLHz+0x5c>
       return 0;
   }

   msel = (PLLReg >> 16) & 0xFF;
1a00072c:	f3c4 4007 	ubfx	r0, r4, #16, #8
   nsel = (PLLReg >> 12) & 0x3;
1a000730:	f3c4 3201 	ubfx	r2, r4, #12, #2
   psel = (PLLReg >> 8) & 0x3;
1a000734:	f3c4 2101 	ubfx	r1, r4, #8, #2
   direct = (PLLReg >> 7) & 0x1;
   fbsel = (PLLReg >> 6) & 0x1;
1a000738:	f3c4 1580 	ubfx	r5, r4, #6, #1

   m = msel + 1;
1a00073c:	1c43      	adds	r3, r0, #1
   n = nsel + 1;
1a00073e:	3201      	adds	r2, #1
   p = ptab[psel];
1a000740:	a802      	add	r0, sp, #8
1a000742:	4401      	add	r1, r0
1a000744:	f811 0c04 	ldrb.w	r0, [r1, #-4]

   if (direct || fbsel) {
1a000748:	f014 0f80 	tst.w	r4, #128	; 0x80
1a00074c:	d100      	bne.n	1a000750 <Chip_Clock_GetMainPLLHz+0x44>
1a00074e:	b125      	cbz	r5, 1a00075a <Chip_Clock_GetMainPLLHz+0x4e>
       return m * (freq / n);
1a000750:	fbb6 f0f2 	udiv	r0, r6, r2
1a000754:	fb03 f000 	mul.w	r0, r3, r0
1a000758:	e006      	b.n	1a000768 <Chip_Clock_GetMainPLLHz+0x5c>
   }

   return (m / (2 * p)) * (freq / n);
1a00075a:	0040      	lsls	r0, r0, #1
1a00075c:	fbb3 f3f0 	udiv	r3, r3, r0
1a000760:	fbb6 f0f2 	udiv	r0, r6, r2
1a000764:	fb00 f003 	mul.w	r0, r0, r3
}
1a000768:	b002      	add	sp, #8
1a00076a:	bd70      	pop	{r4, r5, r6, pc}
1a00076c:	40050000 	.word	0x40050000
1a000770:	1a000ea4 	.word	0x1a000ea4

1a000774 <Chip_Clock_GetDivRate>:
   return TestHz;
}

/* Returns clock rate out of a divider */
static uint32_t Chip_Clock_GetDivRate(CHIP_CGU_CLKIN_T clock, CHIP_CGU_IDIV_T divider)
{
1a000774:	b538      	push	{r3, r4, r5, lr}
1a000776:	460c      	mov	r4, r1
   CHIP_CGU_CLKIN_T input;
   uint32_t div;

   input = Chip_Clock_GetDividerSource(divider);
1a000778:	4608      	mov	r0, r1
1a00077a:	f7ff ff0f 	bl	1a00059c <Chip_Clock_GetDividerSource>
1a00077e:	4605      	mov	r5, r0
   div = Chip_Clock_GetDividerDivisor(divider);
1a000780:	4620      	mov	r0, r4
1a000782:	f7ff ff19 	bl	1a0005b8 <Chip_Clock_GetDividerDivisor>
1a000786:	4604      	mov	r4, r0
   return Chip_Clock_GetClockInputHz(input) / (div + 1);
1a000788:	4628      	mov	r0, r5
1a00078a:	f7ff ff23 	bl	1a0005d4 <Chip_Clock_GetClockInputHz>
1a00078e:	3401      	adds	r4, #1
}
1a000790:	fbb0 f0f4 	udiv	r0, r0, r4
1a000794:	bd38      	pop	{r3, r4, r5, pc}
1a000796:	bf00      	nop

1a000798 <Chip_Clock_SetBaseClock>:
   return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
}

/* Sets a CGU Base Clock clock source */
void Chip_Clock_SetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock, CHIP_CGU_CLKIN_T Input, bool autoblocken, bool powerdn)
{
1a000798:	b430      	push	{r4, r5}
   uint32_t reg = LPC_CGU->BASE_CLK[BaseClock];
1a00079a:	0085      	lsls	r5, r0, #2
1a00079c:	4c0d      	ldr	r4, [pc, #52]	; (1a0007d4 <Chip_Clock_SetBaseClock+0x3c>)
1a00079e:	5965      	ldr	r5, [r4, r5]

   if (BaseClock < CLK_BASE_NONE) {
1a0007a0:	281b      	cmp	r0, #27
1a0007a2:	d80f      	bhi.n	1a0007c4 <Chip_Clock_SetBaseClock+0x2c>
       if (Input != CLKINPUT_PD) {
1a0007a4:	2911      	cmp	r1, #17
1a0007a6:	d012      	beq.n	1a0007ce <Chip_Clock_SetBaseClock+0x36>
           /* Mask off fields we plan to update */
           reg &= ~((0x1F << 24) | 1 | (1 << 11));
1a0007a8:	4c0b      	ldr	r4, [pc, #44]	; (1a0007d8 <Chip_Clock_SetBaseClock+0x40>)
1a0007aa:	402c      	ands	r4, r5

           if (autoblocken) {
1a0007ac:	b10a      	cbz	r2, 1a0007b2 <Chip_Clock_SetBaseClock+0x1a>
               reg |= (1 << 11);
1a0007ae:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
           }
           if (powerdn) {
1a0007b2:	b10b      	cbz	r3, 1a0007b8 <Chip_Clock_SetBaseClock+0x20>
               reg |= (1 << 0);
1a0007b4:	f044 0401 	orr.w	r4, r4, #1
           }

           /* Set clock source */
           reg |= (Input << 24);
1a0007b8:	ea44 6401 	orr.w	r4, r4, r1, lsl #24

           LPC_CGU->BASE_CLK[BaseClock] = reg;
1a0007bc:	0080      	lsls	r0, r0, #2
1a0007be:	4b05      	ldr	r3, [pc, #20]	; (1a0007d4 <Chip_Clock_SetBaseClock+0x3c>)
1a0007c0:	501c      	str	r4, [r3, r0]
1a0007c2:	e004      	b.n	1a0007ce <Chip_Clock_SetBaseClock+0x36>
       }
   }
   else {
       LPC_CGU->BASE_CLK[BaseClock] = reg | 1; /* Power down this base clock */
1a0007c4:	f045 0501 	orr.w	r5, r5, #1
1a0007c8:	0080      	lsls	r0, r0, #2
1a0007ca:	4b02      	ldr	r3, [pc, #8]	; (1a0007d4 <Chip_Clock_SetBaseClock+0x3c>)
1a0007cc:	501d      	str	r5, [r3, r0]
   }
}
1a0007ce:	bc30      	pop	{r4, r5}
1a0007d0:	4770      	bx	lr
1a0007d2:	bf00      	nop
1a0007d4:	4005005c 	.word	0x4005005c
1a0007d8:	e0fff7fe 	.word	0xe0fff7fe

1a0007dc <Chip_Clock_GetBaseClock>:
/* Gets a CGU Base Clock clock source */
CHIP_CGU_CLKIN_T Chip_Clock_GetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock)
{
   uint32_t reg;

   if (BaseClock >= CLK_BASE_NONE) {
1a0007dc:	281b      	cmp	r0, #27
1a0007de:	d808      	bhi.n	1a0007f2 <Chip_Clock_GetBaseClock+0x16>
       return CLKINPUT_PD;
   }

   reg = LPC_CGU->BASE_CLK[BaseClock];
1a0007e0:	0080      	lsls	r0, r0, #2
1a0007e2:	4b06      	ldr	r3, [pc, #24]	; (1a0007fc <Chip_Clock_GetBaseClock+0x20>)
1a0007e4:	5818      	ldr	r0, [r3, r0]

   /* base clock is powered down? */
   if (reg & 1) {
1a0007e6:	f010 0f01 	tst.w	r0, #1
1a0007ea:	d104      	bne.n	1a0007f6 <Chip_Clock_GetBaseClock+0x1a>
       return CLKINPUT_PD;
   }

   return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a0007ec:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a0007f0:	4770      	bx	lr
CHIP_CGU_CLKIN_T Chip_Clock_GetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock)
{
   uint32_t reg;

   if (BaseClock >= CLK_BASE_NONE) {
       return CLKINPUT_PD;
1a0007f2:	2011      	movs	r0, #17
1a0007f4:	4770      	bx	lr

   reg = LPC_CGU->BASE_CLK[BaseClock];

   /* base clock is powered down? */
   if (reg & 1) {
       return CLKINPUT_PD;
1a0007f6:	2011      	movs	r0, #17
   }

   return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
}
1a0007f8:	4770      	bx	lr
1a0007fa:	bf00      	nop
1a0007fc:	4005005c 	.word	0x4005005c

1a000800 <Chip_Clock_GetBaseClocktHz>:
   return rate;
}

/* Returns the frequency of the specified base clock source */
uint32_t Chip_Clock_GetBaseClocktHz(CHIP_CGU_BASE_CLK_T clock)
{
1a000800:	b508      	push	{r3, lr}
   return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
1a000802:	f7ff ffeb 	bl	1a0007dc <Chip_Clock_GetBaseClock>
1a000806:	f7ff fee5 	bl	1a0005d4 <Chip_Clock_GetClockInputHz>
}
1a00080a:	bd08      	pop	{r3, pc}

1a00080c <Chip_Clock_GetRate>:
   LPC_CCU2->PM = 0;
}

/* Returns a peripheral clock rate */
uint32_t Chip_Clock_GetRate(CHIP_CCU_CLK_T clk)
{
1a00080c:	b510      	push	{r4, lr}
   CHIP_CGU_BASE_CLK_T baseclk;
   uint32_t reg, div, rate;

   /* Get CCU config register for clock */
   if (clk >= CLK_CCU2_START) {
1a00080e:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a000812:	d305      	bcc.n	1a000820 <Chip_Clock_GetRate+0x14>
       reg = LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG;
1a000814:	f5a0 7391 	sub.w	r3, r0, #290	; 0x122
1a000818:	4a0d      	ldr	r2, [pc, #52]	; (1a000850 <Chip_Clock_GetRate+0x44>)
1a00081a:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
1a00081e:	e004      	b.n	1a00082a <Chip_Clock_GetRate+0x1e>
   }
   else {
       reg = LPC_CCU1->CLKCCU[clk].CFG;
1a000820:	f100 0320 	add.w	r3, r0, #32
1a000824:	4a0b      	ldr	r2, [pc, #44]	; (1a000854 <Chip_Clock_GetRate+0x48>)
1a000826:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
   }

   /* Is the clock enabled? */
   if (reg & 1) {
1a00082a:	f014 0f01 	tst.w	r4, #1
1a00082e:	d00c      	beq.n	1a00084a <Chip_Clock_GetRate+0x3e>
       /* Get base clock for this peripheral clock */
       baseclk = Chip_Clock_FindBaseClock(clk);
1a000830:	f7ff fe6a 	bl	1a000508 <Chip_Clock_FindBaseClock>

       /* Get base clock rate */
       rate = Chip_Clock_GetBaseClocktHz(baseclk);
1a000834:	f7ff ffe4 	bl	1a000800 <Chip_Clock_GetBaseClocktHz>

       /* Get divider for this clock */
       if (((reg >> 5) & 0x7) == 0) {
1a000838:	f014 0fe0 	tst.w	r4, #224	; 0xe0
1a00083c:	d101      	bne.n	1a000842 <Chip_Clock_GetRate+0x36>
           div = 1;
1a00083e:	2301      	movs	r3, #1
1a000840:	e000      	b.n	1a000844 <Chip_Clock_GetRate+0x38>
       }
       else {
           div = 2;/* No other dividers supported */
1a000842:	2302      	movs	r3, #2

       }
       rate = rate / div;
1a000844:	fbb0 f0f3 	udiv	r0, r0, r3
1a000848:	bd10      	pop	{r4, pc}
   }
   else {
       rate = 0;
1a00084a:	2000      	movs	r0, #0
   }

   return rate;
}
1a00084c:	bd10      	pop	{r4, pc}
1a00084e:	bf00      	nop
1a000850:	40052000 	.word	0x40052000
1a000854:	40051000 	.word	0x40051000

1a000858 <fpuInit>:
 * Public functions
 ****************************************************************************/

/* Early initialization of the FPU */
void fpuInit(void)
{
1a000858:	b084      	sub	sp, #16
   volatile uint32_t Cpacr;
   volatile uint32_t Mvfr0;
   volatile uint32_t Mvfr1;
   char vfpPresent = 0;

   Mvfr0 = *regMvfr0;
1a00085a:	4b10      	ldr	r3, [pc, #64]	; (1a00089c <fpuInit+0x44>)
1a00085c:	681b      	ldr	r3, [r3, #0]
1a00085e:	9302      	str	r3, [sp, #8]
   Mvfr1 = *regMvfr1;
1a000860:	4b0f      	ldr	r3, [pc, #60]	; (1a0008a0 <fpuInit+0x48>)
1a000862:	681b      	ldr	r3, [r3, #0]
1a000864:	9301      	str	r3, [sp, #4]

   vfpPresent = ((SCB_MVFR0_RESET == Mvfr0) && (SCB_MVFR1_RESET == Mvfr1));
1a000866:	9a02      	ldr	r2, [sp, #8]
1a000868:	4b0e      	ldr	r3, [pc, #56]	; (1a0008a4 <fpuInit+0x4c>)
1a00086a:	429a      	cmp	r2, r3
1a00086c:	d105      	bne.n	1a00087a <fpuInit+0x22>
1a00086e:	9a01      	ldr	r2, [sp, #4]
1a000870:	4b0d      	ldr	r3, [pc, #52]	; (1a0008a8 <fpuInit+0x50>)
1a000872:	429a      	cmp	r2, r3
1a000874:	d003      	beq.n	1a00087e <fpuInit+0x26>
1a000876:	2300      	movs	r3, #0
1a000878:	e002      	b.n	1a000880 <fpuInit+0x28>
1a00087a:	2300      	movs	r3, #0
1a00087c:	e000      	b.n	1a000880 <fpuInit+0x28>
1a00087e:	2301      	movs	r3, #1

   if (vfpPresent) {
1a000880:	f013 0fff 	tst.w	r3, #255	; 0xff
1a000884:	d008      	beq.n	1a000898 <fpuInit+0x40>
       Cpacr = *regCpacr;
1a000886:	4a09      	ldr	r2, [pc, #36]	; (1a0008ac <fpuInit+0x54>)
1a000888:	6813      	ldr	r3, [r2, #0]
1a00088a:	9303      	str	r3, [sp, #12]
       Cpacr |= (0xF << 20);
1a00088c:	9b03      	ldr	r3, [sp, #12]
1a00088e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
1a000892:	9303      	str	r3, [sp, #12]
       *regCpacr = Cpacr;  // enable CP10 and CP11 for full access
1a000894:	9b03      	ldr	r3, [sp, #12]
1a000896:	6013      	str	r3, [r2, #0]
   }
#endif /* __FPU_PRESENT != 0 */
}
1a000898:	b004      	add	sp, #16
1a00089a:	4770      	bx	lr
1a00089c:	e000ef40 	.word	0xe000ef40
1a0008a0:	e000ef44 	.word	0xe000ef44
1a0008a4:	10110021 	.word	0x10110021
1a0008a8:	11000011 	.word	0x11000011
1a0008ac:	e000ed88 	.word	0xe000ed88

1a0008b0 <Chip_GPIO_Init>:
 * Public functions
 ****************************************************************************/

/* Initialize GPIO block */
void Chip_GPIO_Init(LPC_GPIO_T *pGPIO)
{
1a0008b0:	4770      	bx	lr
1a0008b2:	bf00      	nop

1a0008b4 <Chip_GPIO_SetDir>:
}

/* Set Direction for a GPIO port */
void Chip_GPIO_SetDir(LPC_GPIO_T *pGPIO, uint8_t portNum, uint32_t bitValue, uint8_t out)
{
   if (out) {
1a0008b4:	b13b      	cbz	r3, 1a0008c6 <Chip_GPIO_SetDir+0x12>
       pGPIO->DIR[portNum] |= bitValue;
1a0008b6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
1a0008ba:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
1a0008be:	431a      	orrs	r2, r3
1a0008c0:	f840 2021 	str.w	r2, [r0, r1, lsl #2]
1a0008c4:	4770      	bx	lr
   }
   else {
       pGPIO->DIR[portNum] &= ~bitValue;
1a0008c6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
1a0008ca:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
1a0008ce:	ea23 0202 	bic.w	r2, r3, r2
1a0008d2:	f840 2021 	str.w	r2, [r0, r1, lsl #2]
1a0008d6:	4770      	bx	lr

1a0008d8 <Chip_SetupCoreClock>:
/*****************************************************************************
 * Public functions
 ****************************************************************************/
/* Setup Chip Core clock */
void Chip_SetupCoreClock(CHIP_CGU_CLKIN_T clkin, uint32_t core_freq, bool setbase)
{
1a0008d8:	b570      	push	{r4, r5, r6, lr}
1a0008da:	b092      	sub	sp, #72	; 0x48
1a0008dc:	4605      	mov	r5, r0
1a0008de:	460e      	mov	r6, r1
1a0008e0:	4614      	mov	r4, r2
   int i;
   volatile uint32_t delay = 5500;
1a0008e2:	f241 537c 	movw	r3, #5500	; 0x157c
1a0008e6:	9311      	str	r3, [sp, #68]	; 0x44
   uint32_t direct = 0;
   PLL_PARAM_T ppll;

   if (clkin == CLKIN_CRYSTAL) {
1a0008e8:	2806      	cmp	r0, #6
1a0008ea:	d101      	bne.n	1a0008f0 <Chip_SetupCoreClock+0x18>
       /* Switch main system clocking to crystal */
       Chip_Clock_EnableCrystal();
1a0008ec:	f7ff fe30 	bl	1a000550 <Chip_Clock_EnableCrystal>
   }
   Chip_Clock_SetBaseClock(CLK_BASE_MX, clkin, true, false);
1a0008f0:	2004      	movs	r0, #4
1a0008f2:	4629      	mov	r1, r5
1a0008f4:	2201      	movs	r2, #1
1a0008f6:	2300      	movs	r3, #0
1a0008f8:	f7ff ff4e 	bl	1a000798 <Chip_Clock_SetBaseClock>
 * Saves power if the main PLL is not needed.
 */
__STATIC_INLINE void Chip_Clock_DisableMainPLL(void)
{
   /* power down main PLL */
   LPC_CGU->PLL1_CTRL |= 1;
1a0008fc:	4a49      	ldr	r2, [pc, #292]	; (1a000a24 <Chip_SetupCoreClock+0x14c>)
1a0008fe:	6c53      	ldr	r3, [r2, #68]	; 0x44
1a000900:	f043 0301 	orr.w	r3, r3, #1
1a000904:	6453      	str	r3, [r2, #68]	; 0x44
   Chip_Clock_DisableMainPLL(); /* Disable PLL */

   /* Calculate the PLL Parameters */
   ppll.srcin = clkin;
1a000906:	f88d 5028 	strb.w	r5, [sp, #40]	; 0x28
   Chip_Clock_CalcMainPLLValue(core_freq, &ppll);
1a00090a:	4630      	mov	r0, r6
1a00090c:	a909      	add	r1, sp, #36	; 0x24
1a00090e:	f7ff febd 	bl	1a00068c <Chip_Clock_CalcMainPLLValue>

   if (core_freq > 110000000UL) {
1a000912:	4b45      	ldr	r3, [pc, #276]	; (1a000a28 <Chip_SetupCoreClock+0x150>)
1a000914:	429e      	cmp	r6, r3
1a000916:	d935      	bls.n	1a000984 <Chip_SetupCoreClock+0xac>
       if (!(ppll.ctrl & (1 << 7)) || ppll.psel) {
1a000918:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a00091a:	f013 0f80 	tst.w	r3, #128	; 0x80
1a00091e:	d001      	beq.n	1a000924 <Chip_SetupCoreClock+0x4c>
1a000920:	9a0c      	ldr	r2, [sp, #48]	; 0x30
1a000922:	b352      	cbz	r2, 1a00097a <Chip_SetupCoreClock+0xa2>
           PLL_PARAM_T lpll;
           /* Calculate the PLL Parameters */
           lpll.srcin = clkin;
1a000924:	f88d 5008 	strb.w	r5, [sp, #8]
           Chip_Clock_CalcMainPLLValue(110000000UL, &lpll);
1a000928:	483f      	ldr	r0, [pc, #252]	; (1a000a28 <Chip_SetupCoreClock+0x150>)
1a00092a:	a901      	add	r1, sp, #4
1a00092c:	f7ff feae 	bl	1a00068c <Chip_Clock_CalcMainPLLValue>
 * Make sure the main PLL is enabled.
 */
__STATIC_INLINE void Chip_Clock_SetupMainPLL(const PLL_PARAM_T *ppll)
{
   /* power up main PLL */
   LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8);
1a000930:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a000934:	9b01      	ldr	r3, [sp, #4]
1a000936:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a00093a:	9a05      	ldr	r2, [sp, #20]
1a00093c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a000940:	9a03      	ldr	r2, [sp, #12]
1a000942:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a000946:	9a04      	ldr	r2, [sp, #16]
1a000948:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a00094c:	4a35      	ldr	r2, [pc, #212]	; (1a000a24 <Chip_SetupCoreClock+0x14c>)
1a00094e:	6453      	str	r3, [r2, #68]	; 0x44
 * @note   The main PLL should be locked prior to using it as a clock input for a base clock.
 */
__STATIC_INLINE int Chip_Clock_MainPLLLocked(void)
{
   /* Return true if locked */
   return (LPC_CGU->PLL1_STAT & 1) != 0;
1a000950:	4b34      	ldr	r3, [pc, #208]	; (1a000a24 <Chip_SetupCoreClock+0x14c>)
1a000952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
           Chip_Clock_SetupMainPLL(&lpll);
           /* Wait for the PLL to lock */
           while(!Chip_Clock_MainPLLLocked()) {}
1a000954:	f013 0f01 	tst.w	r3, #1
1a000958:	d0fa      	beq.n	1a000950 <Chip_SetupCoreClock+0x78>
           Chip_Clock_SetBaseClock(CLK_BASE_MX, CLKIN_MAINPLL, true, false);
1a00095a:	2004      	movs	r0, #4
1a00095c:	2109      	movs	r1, #9
1a00095e:	2201      	movs	r2, #1
1a000960:	2300      	movs	r3, #0
1a000962:	f7ff ff19 	bl	1a000798 <Chip_Clock_SetBaseClock>
           while(delay --){}
1a000966:	9b11      	ldr	r3, [sp, #68]	; 0x44
1a000968:	1e5a      	subs	r2, r3, #1
1a00096a:	9211      	str	r2, [sp, #68]	; 0x44
1a00096c:	2b00      	cmp	r3, #0
1a00096e:	d1fa      	bne.n	1a000966 <Chip_SetupCoreClock+0x8e>
           delay = 5500;
1a000970:	f241 537c 	movw	r3, #5500	; 0x157c
1a000974:	9311      	str	r3, [sp, #68]	; 0x44
/* Setup Chip Core clock */
void Chip_SetupCoreClock(CHIP_CGU_CLKIN_T clkin, uint32_t core_freq, bool setbase)
{
   int i;
   volatile uint32_t delay = 5500;
   uint32_t direct = 0;
1a000976:	2500      	movs	r5, #0
   /* Calculate the PLL Parameters */
   ppll.srcin = clkin;
   Chip_Clock_CalcMainPLLValue(core_freq, &ppll);

   if (core_freq > 110000000UL) {
       if (!(ppll.ctrl & (1 << 7)) || ppll.psel) {
1a000978:	e005      	b.n	1a000986 <Chip_SetupCoreClock+0xae>
           Chip_Clock_SetBaseClock(CLK_BASE_MX, CLKIN_MAINPLL, true, false);
           while(delay --){}
           delay = 5500;
       } else {
           direct = 1;
           ppll.ctrl &= ~(1 << 7);
1a00097a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a00097e:	9309      	str	r3, [sp, #36]	; 0x24
           while(!Chip_Clock_MainPLLLocked()) {}
           Chip_Clock_SetBaseClock(CLK_BASE_MX, CLKIN_MAINPLL, true, false);
           while(delay --){}
           delay = 5500;
       } else {
           direct = 1;
1a000980:	2501      	movs	r5, #1
1a000982:	e000      	b.n	1a000986 <Chip_SetupCoreClock+0xae>
/* Setup Chip Core clock */
void Chip_SetupCoreClock(CHIP_CGU_CLKIN_T clkin, uint32_t core_freq, bool setbase)
{
   int i;
   volatile uint32_t delay = 5500;
   uint32_t direct = 0;
1a000984:	2500      	movs	r5, #0
 * Make sure the main PLL is enabled.
 */
__STATIC_INLINE void Chip_Clock_SetupMainPLL(const PLL_PARAM_T *ppll)
{
   /* power up main PLL */
   LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8);
1a000986:	f89d 2028 	ldrb.w	r2, [sp, #40]	; 0x28
1a00098a:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a00098c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a000990:	9a0d      	ldr	r2, [sp, #52]	; 0x34
1a000992:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a000996:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
1a000998:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a00099c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
1a00099e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a0009a2:	4a20      	ldr	r2, [pc, #128]	; (1a000a24 <Chip_SetupCoreClock+0x14c>)
1a0009a4:	6453      	str	r3, [r2, #68]	; 0x44
 * @note   The main PLL should be locked prior to using it as a clock input for a base clock.
 */
__STATIC_INLINE int Chip_Clock_MainPLLLocked(void)
{
   /* Return true if locked */
   return (LPC_CGU->PLL1_STAT & 1) != 0;
1a0009a6:	4b1f      	ldr	r3, [pc, #124]	; (1a000a24 <Chip_SetupCoreClock+0x14c>)
1a0009a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40

   /* Setup and start the PLL */
   Chip_Clock_SetupMainPLL(&ppll);

   /* Wait for the PLL to lock */
   while(!Chip_Clock_MainPLLLocked()) {}
1a0009aa:	f013 0f01 	tst.w	r3, #1
1a0009ae:	d0fa      	beq.n	1a0009a6 <Chip_SetupCoreClock+0xce>

   /* Set core clock base as PLL1 */
   Chip_Clock_SetBaseClock(CLK_BASE_MX, CLKIN_MAINPLL, true, false);
1a0009b0:	2004      	movs	r0, #4
1a0009b2:	2109      	movs	r1, #9
1a0009b4:	2201      	movs	r2, #1
1a0009b6:	2300      	movs	r3, #0
1a0009b8:	f7ff feee 	bl	1a000798 <Chip_Clock_SetBaseClock>

   while(delay --){} /* Wait for approx 50 uSec */
1a0009bc:	9b11      	ldr	r3, [sp, #68]	; 0x44
1a0009be:	1e5a      	subs	r2, r3, #1
1a0009c0:	9211      	str	r2, [sp, #68]	; 0x44
1a0009c2:	2b00      	cmp	r3, #0
1a0009c4:	d1fa      	bne.n	1a0009bc <Chip_SetupCoreClock+0xe4>
   if (direct) {
1a0009c6:	b1d5      	cbz	r5, 1a0009fe <Chip_SetupCoreClock+0x126>
       delay = 5500;
1a0009c8:	f241 537c 	movw	r3, #5500	; 0x157c
1a0009cc:	9311      	str	r3, [sp, #68]	; 0x44
       ppll.ctrl |= 1 << 7;
1a0009ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a0009d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a0009d4:	9309      	str	r3, [sp, #36]	; 0x24
 * Make sure the main PLL is enabled.
 */
__STATIC_INLINE void Chip_Clock_SetupMainPLL(const PLL_PARAM_T *ppll)
{
   /* power up main PLL */
   LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8);
1a0009d6:	f89d 2028 	ldrb.w	r2, [sp, #40]	; 0x28
1a0009da:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a0009de:	9a0d      	ldr	r2, [sp, #52]	; 0x34
1a0009e0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a0009e4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
1a0009e6:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a0009ea:	9a0c      	ldr	r2, [sp, #48]	; 0x30
1a0009ec:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a0009f0:	4a0c      	ldr	r2, [pc, #48]	; (1a000a24 <Chip_SetupCoreClock+0x14c>)
1a0009f2:	6453      	str	r3, [r2, #68]	; 0x44
       Chip_Clock_SetupMainPLL(&ppll); /* Set DIRECT to operate at full frequency */
       while(delay --){} /* Wait for approx 50 uSec */
1a0009f4:	9b11      	ldr	r3, [sp, #68]	; 0x44
1a0009f6:	1e5a      	subs	r2, r3, #1
1a0009f8:	9211      	str	r2, [sp, #68]	; 0x44
1a0009fa:	2b00      	cmp	r3, #0
1a0009fc:	d1fa      	bne.n	1a0009f4 <Chip_SetupCoreClock+0x11c>
   }

   if (setbase) {
1a0009fe:	b964      	cbnz	r4, 1a000a1a <Chip_SetupCoreClock+0x142>
1a000a00:	e00e      	b.n	1a000a20 <Chip_SetupCoreClock+0x148>
       /* Setup system base clocks and initial states. This won't enable and
          disable individual clocks, but sets up the base clock sources for
          each individual peripheral clock. */
       for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
           Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
1a000a02:	4a0a      	ldr	r2, [pc, #40]	; (1a000a2c <Chip_SetupCoreClock+0x154>)
1a000a04:	eb02 0384 	add.w	r3, r2, r4, lsl #2
1a000a08:	f812 0024 	ldrb.w	r0, [r2, r4, lsl #2]
1a000a0c:	7859      	ldrb	r1, [r3, #1]
1a000a0e:	789a      	ldrb	r2, [r3, #2]
1a000a10:	78db      	ldrb	r3, [r3, #3]
1a000a12:	f7ff fec1 	bl	1a000798 <Chip_Clock_SetBaseClock>

   if (setbase) {
       /* Setup system base clocks and initial states. This won't enable and
          disable individual clocks, but sets up the base clock sources for
          each individual peripheral clock. */
       for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a000a16:	3401      	adds	r4, #1
1a000a18:	e000      	b.n	1a000a1c <Chip_SetupCoreClock+0x144>
1a000a1a:	2400      	movs	r4, #0
1a000a1c:	2c11      	cmp	r4, #17
1a000a1e:	d9f0      	bls.n	1a000a02 <Chip_SetupCoreClock+0x12a>
           Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
                                   InitClkStates[i].autoblock_enab, InitClkStates[i].powerdn);
       }
   }
}
1a000a20:	b012      	add	sp, #72	; 0x48
1a000a22:	bd70      	pop	{r4, r5, r6, pc}
1a000a24:	40050000 	.word	0x40050000
1a000a28:	068e7780 	.word	0x068e7780
1a000a2c:	1a000f1c 	.word	0x1a000f1c

1a000a30 <ResetISR>:
// not debug) by setting the define 'DONT_RESET_ON_RESTART'.
//
#ifndef DONT_RESET_ON_RESTART

    // Disable interrupts
    __asm volatile ("cpsid i");
1a000a30:	b672      	cpsid	i
    // Note that we do not use the CMSIS register access mechanism,
    // as there is no guarantee that the project has been configured
    // to use CMSIS.

    // Write to LPC_RGU->RESET_CTRL0
    *(RESET_CONTROL + 0) = 0x10DF1000;
1a000a32:	4a17      	ldr	r2, [pc, #92]	; (1a000a90 <ResetISR+0x60>)
1a000a34:	4b17      	ldr	r3, [pc, #92]	; (1a000a94 <ResetISR+0x64>)
1a000a36:	601a      	str	r2, [r3, #0]
    // GPIO_RST|AES_RST|ETHERNET_RST|SDIO_RST|DMA_RST|
    // USB1_RST|USB0_RST|LCD_RST|M0_SUB_RST

    // Write to LPC_RGU->RESET_CTRL1
    *(RESET_CONTROL + 1) = 0x01DFF7FF;
1a000a38:	4a17      	ldr	r2, [pc, #92]	; (1a000a98 <ResetISR+0x68>)
1a000a3a:	3304      	adds	r3, #4
1a000a3c:	601a      	str	r2, [r3, #0]
    // RITIMER_RST|TIMER3_RST|TIMER2_RST|TIMER1_RST|TIMER0_RST

    // Clear all pending interrupts in the NVIC
    volatile unsigned int *NVIC_ICPR = (unsigned int *) 0xE000E280;
    unsigned int irqpendloop;
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a000a3e:	2300      	movs	r3, #0
1a000a40:	e005      	b.n	1a000a4e <ResetISR+0x1e>
        *(NVIC_ICPR + irqpendloop) = 0xFFFFFFFF;
1a000a42:	f04f 31ff 	mov.w	r1, #4294967295
1a000a46:	4a15      	ldr	r2, [pc, #84]	; (1a000a9c <ResetISR+0x6c>)
1a000a48:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    // RITIMER_RST|TIMER3_RST|TIMER2_RST|TIMER1_RST|TIMER0_RST

    // Clear all pending interrupts in the NVIC
    volatile unsigned int *NVIC_ICPR = (unsigned int *) 0xE000E280;
    unsigned int irqpendloop;
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a000a4c:	3301      	adds	r3, #1
1a000a4e:	2b07      	cmp	r3, #7
1a000a50:	d9f7      	bls.n	1a000a42 <ResetISR+0x12>
// Reset entry point for your code.
// Sets up a simple runtime environment and initializes the C/C++
// library.
//
//*****************************************************************************
void ResetISR(void) {
1a000a52:	b510      	push	{r4, lr}
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
        *(NVIC_ICPR + irqpendloop) = 0xFFFFFFFF;
    }

    // Reenable interrupts
    __asm volatile ("cpsie i");
1a000a54:	b662      	cpsie	i

#endif  // ifndef DONT_RESET_ON_RESTART
// *************************************************************

#if defined (__USE_LPCOPEN)
    SystemInit();
1a000a56:	f000 f829 	bl	1a000aac <SystemInit>
    //
    unsigned int LoadAddr, ExeAddr, SectionLen;
    unsigned int *SectionTableAddr;

    // Load base address of Global Section Table
    SectionTableAddr = &__data_section_table;
1a000a5a:	4b11      	ldr	r3, [pc, #68]	; (1a000aa0 <ResetISR+0x70>)

    // Copy the data sections from flash to SRAM.
    while (SectionTableAddr < &__data_section_table_end) {
1a000a5c:	e007      	b.n	1a000a6e <ResetISR+0x3e>
        LoadAddr = *SectionTableAddr++;
        ExeAddr = *SectionTableAddr++;
        SectionLen = *SectionTableAddr++;
1a000a5e:	f103 040c 	add.w	r4, r3, #12
        data_init(LoadAddr, ExeAddr, SectionLen);
1a000a62:	6818      	ldr	r0, [r3, #0]
1a000a64:	6859      	ldr	r1, [r3, #4]
1a000a66:	689a      	ldr	r2, [r3, #8]
1a000a68:	f7ff fb9a 	bl	1a0001a0 <data_init>

    // Copy the data sections from flash to SRAM.
    while (SectionTableAddr < &__data_section_table_end) {
        LoadAddr = *SectionTableAddr++;
        ExeAddr = *SectionTableAddr++;
        SectionLen = *SectionTableAddr++;
1a000a6c:	4623      	mov	r3, r4

    // Load base address of Global Section Table
    SectionTableAddr = &__data_section_table;

    // Copy the data sections from flash to SRAM.
    while (SectionTableAddr < &__data_section_table_end) {
1a000a6e:	4a0d      	ldr	r2, [pc, #52]	; (1a000aa4 <ResetISR+0x74>)
1a000a70:	4293      	cmp	r3, r2
1a000a72:	d3f4      	bcc.n	1a000a5e <ResetISR+0x2e>
1a000a74:	e006      	b.n	1a000a84 <ResetISR+0x54>
        data_init(LoadAddr, ExeAddr, SectionLen);
    }
    // At this point, SectionTableAddr = &__bss_section_table;
    // Zero fill the bss segment
    while (SectionTableAddr < &__bss_section_table_end) {
        ExeAddr = *SectionTableAddr++;
1a000a76:	461c      	mov	r4, r3
        SectionLen = *SectionTableAddr++;
        bss_init(ExeAddr, SectionLen);
1a000a78:	f854 0b08 	ldr.w	r0, [r4], #8
1a000a7c:	6859      	ldr	r1, [r3, #4]
1a000a7e:	f7ff fb9d 	bl	1a0001bc <bss_init>
    }
    // At this point, SectionTableAddr = &__bss_section_table;
    // Zero fill the bss segment
    while (SectionTableAddr < &__bss_section_table_end) {
        ExeAddr = *SectionTableAddr++;
        SectionLen = *SectionTableAddr++;
1a000a82:	4623      	mov	r3, r4
        SectionLen = *SectionTableAddr++;
        data_init(LoadAddr, ExeAddr, SectionLen);
    }
    // At this point, SectionTableAddr = &__bss_section_table;
    // Zero fill the bss segment
    while (SectionTableAddr < &__bss_section_table_end) {
1a000a84:	4a08      	ldr	r2, [pc, #32]	; (1a000aa8 <ResetISR+0x78>)
1a000a86:	4293      	cmp	r3, r2
1a000a88:	d3f5      	bcc.n	1a000a76 <ResetISR+0x46>

#if defined (__REDLIB__)
    // Call the Redlib library, which in turn calls main()
    __main();
#else
    main();
1a000a8a:	f7ff fc39 	bl	1a000300 <main>
    //
    // main() shouldn't return, but if it does, we'll just enter an infinite loop
    //
    while (1) {
        ;
    }
1a000a8e:	e7fe      	b.n	1a000a8e <ResetISR+0x5e>
1a000a90:	10df1000 	.word	0x10df1000
1a000a94:	40053100 	.word	0x40053100
1a000a98:	01dff7ff 	.word	0x01dff7ff
1a000a9c:	e000e280 	.word	0xe000e280
1a000aa0:	1a000114 	.word	0x1a000114
1a000aa4:	1a000150 	.word	0x1a000150
1a000aa8:	1a000178 	.word	0x1a000178

1a000aac <SystemInit>:
 * Public functions
 ****************************************************************************/

/* Set up and initialize hardware prior to call to main */
void SystemInit(void)
{
1a000aac:	b508      	push	{r3, lr}

   *pSCB_VTOR = (unsigned int) &__Vectors;
#endif

#if defined(__FPU_PRESENT) && __FPU_PRESENT == 1
   fpuInit();
1a000aae:	f7ff fed3 	bl	1a000858 <fpuInit>
#if defined(NO_BOARD_LIB)
   /* Chip specific SystemInit */
   Chip_SystemInit();
#else
   /* Board specific SystemInit */
   Board_SystemInit();
1a000ab2:	f000 f851 	bl	1a000b58 <Board_SystemInit>
1a000ab6:	bd08      	pop	{r3, pc}

1a000ab8 <Board_SetupMuxing>:
 * Public functions
 ****************************************************************************/

/* Sets up system pin muxing */
void Board_SetupMuxing(void)
{
1a000ab8:	b410      	push	{r4}
 * @return Nothing
 */
STATIC INLINE void Chip_SCU_SetPinMuxing(const PINMUX_GRP_T *pinArray, uint32_t arrayLength)
{
   uint32_t ix;
   for (ix = 0; ix < arrayLength; ix++ ) {
1a000aba:	2300      	movs	r3, #0
1a000abc:	e00c      	b.n	1a000ad8 <Board_SetupMuxing+0x20>
       Chip_SCU_PinMuxSet(pinArray[ix].pingrp, pinArray[ix].pinnum, pinArray[ix].modefunc);
1a000abe:	4a09      	ldr	r2, [pc, #36]	; (1a000ae4 <Board_SetupMuxing+0x2c>)
1a000ac0:	eb02 0183 	add.w	r1, r2, r3, lsl #2
1a000ac4:	f812 4023 	ldrb.w	r4, [r2, r3, lsl #2]
1a000ac8:	784a      	ldrb	r2, [r1, #1]
1a000aca:	8848      	ldrh	r0, [r1, #2]
 * @note   Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMuxSet(uint8_t port, uint8_t pin, uint16_t modefunc)
{
   LPC_SCU->SFSP[port][pin] = modefunc;
1a000acc:	eb02 1244 	add.w	r2, r2, r4, lsl #5
1a000ad0:	4905      	ldr	r1, [pc, #20]	; (1a000ae8 <Board_SetupMuxing+0x30>)
1a000ad2:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
 * @return Nothing
 */
STATIC INLINE void Chip_SCU_SetPinMuxing(const PINMUX_GRP_T *pinArray, uint32_t arrayLength)
{
   uint32_t ix;
   for (ix = 0; ix < arrayLength; ix++ ) {
1a000ad6:	3301      	adds	r3, #1
1a000ad8:	2b17      	cmp	r3, #23
1a000ada:	d9f0      	bls.n	1a000abe <Board_SetupMuxing+0x6>
   /* Setup system level pin muxing */
   Chip_SCU_SetPinMuxing(pinmuxing, sizeof(pinmuxing) / sizeof(PINMUX_GRP_T));
}
1a000adc:	f85d 4b04 	ldr.w	r4, [sp], #4
1a000ae0:	4770      	bx	lr
1a000ae2:	bf00      	nop
1a000ae4:	1a000f78 	.word	0x1a000f78
1a000ae8:	40086000 	.word	0x40086000

1a000aec <Board_SetupClocking>:

/* Set up and initialize clocking prior to call to main */
void Board_SetupClocking(void)
{
1a000aec:	b510      	push	{r4, lr}
 */
STATIC INLINE void Chip_CREG_SetFlashAcceleration(uint32_t Hz)
{
   uint32_t FAValue = Hz / 21510000;

   LPC_CREG->FLASHCFGA = (LPC_CREG->FLASHCFGA & (~(0xF << 12))) | (FAValue << 12);
1a000aee:	4a17      	ldr	r2, [pc, #92]	; (1a000b4c <Board_SetupClocking+0x60>)
1a000af0:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
1a000af4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a000af8:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a000afc:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
   LPC_CREG->FLASHCFGB = (LPC_CREG->FLASHCFGB & (~(0xF << 12))) | (FAValue << 12);
1a000b00:	f8d2 3124 	ldr.w	r3, [r2, #292]	; 0x124
1a000b04:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a000b08:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a000b0c:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124

   /* Enable Flash acceleration and setup wait states */
   Chip_CREG_SetFlashAcceleration(MAX_CLOCK_FREQ);

   /* Setup System core frequency to MAX_CLOCK_FREQ */
   Chip_SetupCoreClock(CLKIN_CRYSTAL, MAX_CLOCK_FREQ, true);
1a000b10:	2006      	movs	r0, #6
1a000b12:	490f      	ldr	r1, [pc, #60]	; (1a000b50 <Board_SetupClocking+0x64>)
1a000b14:	2201      	movs	r2, #1
1a000b16:	f7ff fedf 	bl	1a0008d8 <Chip_SetupCoreClock>

   /* Setup system base clocks and initial states. This won't enable and
      disable individual clocks, but sets up the base clock sources for
      each individual peripheral clock. */
   for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a000b1a:	2400      	movs	r4, #0
1a000b1c:	e00a      	b.n	1a000b34 <Board_SetupClocking+0x48>
       Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
1a000b1e:	4a0d      	ldr	r2, [pc, #52]	; (1a000b54 <Board_SetupClocking+0x68>)
1a000b20:	eb02 0384 	add.w	r3, r2, r4, lsl #2
1a000b24:	f812 0024 	ldrb.w	r0, [r2, r4, lsl #2]
1a000b28:	7859      	ldrb	r1, [r3, #1]
1a000b2a:	789a      	ldrb	r2, [r3, #2]
1a000b2c:	78db      	ldrb	r3, [r3, #3]
1a000b2e:	f7ff fe33 	bl	1a000798 <Chip_Clock_SetBaseClock>
   Chip_SetupCoreClock(CLKIN_CRYSTAL, MAX_CLOCK_FREQ, true);

   /* Setup system base clocks and initial states. This won't enable and
      disable individual clocks, but sets up the base clock sources for
      each individual peripheral clock. */
   for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a000b32:	3401      	adds	r4, #1
1a000b34:	2c02      	cmp	r4, #2
1a000b36:	d9f2      	bls.n	1a000b1e <Board_SetupClocking+0x32>
       Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
                               InitClkStates[i].autoblock_enab, InitClkStates[i].powerdn);
   }

   /* Reset and enable 32Khz oscillator */
   LPC_CREG->CREG0 &= ~((1 << 3) | (1 << 2));
1a000b38:	4b04      	ldr	r3, [pc, #16]	; (1a000b4c <Board_SetupClocking+0x60>)
1a000b3a:	685a      	ldr	r2, [r3, #4]
1a000b3c:	f022 020c 	bic.w	r2, r2, #12
1a000b40:	605a      	str	r2, [r3, #4]
   LPC_CREG->CREG0 |= (1 << 1) | (1 << 0);
1a000b42:	685a      	ldr	r2, [r3, #4]
1a000b44:	f042 0203 	orr.w	r2, r2, #3
1a000b48:	605a      	str	r2, [r3, #4]
1a000b4a:	bd10      	pop	{r4, pc}
1a000b4c:	40043000 	.word	0x40043000
1a000b50:	0c28cb00 	.word	0x0c28cb00
1a000b54:	1a000f6c 	.word	0x1a000f6c

1a000b58 <Board_SystemInit>:
}

/* Set up and initialize hardware prior to call to main */
void Board_SystemInit(void)
{
1a000b58:	b508      	push	{r3, lr}
   /* Setup system clocking and memory. This is done early to allow the
      application and tools to clear memory and use scatter loading to
      external memory. */
   Board_SetupMuxing();
1a000b5a:	f7ff ffad 	bl	1a000ab8 <Board_SetupMuxing>
   Board_SetupClocking();
1a000b5e:	f7ff ffc5 	bl	1a000aec <Board_SetupClocking>
1a000b62:	bd08      	pop	{r3, pc}

1a000b64 <boardInit>:
/*==================[internal functions definition]==========================*/

/*==================[external functions definition]==========================*/

// Set up and initialize board hardware
void boardInit( void ){
1a000b64:	b508      	push	{r3, lr}

   // Read clock settings and update SystemCoreClock variable
   SystemCoreClockUpdate();
1a000b66:	f7ff fbf3 	bl	1a000350 <SystemCoreClockUpdate>

   /// Inicializar el conteo de Ticks con resolucion de 1ms, sin tickHook
//   tickInit( 1 );

   // Inicializar GPIOs
   gpioConfig( 0, GPIO_ENABLE );
1a000b6a:	2000      	movs	r0, #0
1a000b6c:	2105      	movs	r1, #5
1a000b6e:	f000 f87f 	bl	1a000c70 <gpioConfig>

   // Configuración de pines de entrada para Teclas de la EDU-CIAA-NXP
   gpioConfig( TEC1, GPIO_INPUT );
1a000b72:	2024      	movs	r0, #36	; 0x24
1a000b74:	2100      	movs	r1, #0
1a000b76:	f000 f87b 	bl	1a000c70 <gpioConfig>
   gpioConfig( TEC2, GPIO_INPUT );
1a000b7a:	2025      	movs	r0, #37	; 0x25
1a000b7c:	2100      	movs	r1, #0
1a000b7e:	f000 f877 	bl	1a000c70 <gpioConfig>
   gpioConfig( TEC3, GPIO_INPUT );
1a000b82:	2026      	movs	r0, #38	; 0x26
1a000b84:	2100      	movs	r1, #0
1a000b86:	f000 f873 	bl	1a000c70 <gpioConfig>
   gpioConfig( TEC4, GPIO_INPUT );
1a000b8a:	2027      	movs	r0, #39	; 0x27
1a000b8c:	2100      	movs	r1, #0
1a000b8e:	f000 f86f 	bl	1a000c70 <gpioConfig>

   // Configuración de pines de salida para Leds de la EDU-CIAA-NXP
   gpioConfig( LEDR, GPIO_OUTPUT );
1a000b92:	2028      	movs	r0, #40	; 0x28
1a000b94:	2101      	movs	r1, #1
1a000b96:	f000 f86b 	bl	1a000c70 <gpioConfig>
   gpioConfig( LEDG, GPIO_OUTPUT );
1a000b9a:	2029      	movs	r0, #41	; 0x29
1a000b9c:	2101      	movs	r1, #1
1a000b9e:	f000 f867 	bl	1a000c70 <gpioConfig>
   gpioConfig( LEDB, GPIO_OUTPUT );
1a000ba2:	202a      	movs	r0, #42	; 0x2a
1a000ba4:	2101      	movs	r1, #1
1a000ba6:	f000 f863 	bl	1a000c70 <gpioConfig>
   gpioConfig( LED1, GPIO_OUTPUT );
1a000baa:	202b      	movs	r0, #43	; 0x2b
1a000bac:	2101      	movs	r1, #1
1a000bae:	f000 f85f 	bl	1a000c70 <gpioConfig>
   gpioConfig( LED2, GPIO_OUTPUT );
1a000bb2:	202c      	movs	r0, #44	; 0x2c
1a000bb4:	2101      	movs	r1, #1
1a000bb6:	f000 f85b 	bl	1a000c70 <gpioConfig>
   gpioConfig( LED3, GPIO_OUTPUT );
1a000bba:	202d      	movs	r0, #45	; 0x2d
1a000bbc:	2101      	movs	r1, #1
1a000bbe:	f000 f857 	bl	1a000c70 <gpioConfig>

   // Configuración de pines de entrada de la CIAA-NXP
   gpioConfig( DI0, GPIO_INPUT );
1a000bc2:	202e      	movs	r0, #46	; 0x2e
1a000bc4:	2100      	movs	r1, #0
1a000bc6:	f000 f853 	bl	1a000c70 <gpioConfig>
   gpioConfig( DI1, GPIO_INPUT );
1a000bca:	202f      	movs	r0, #47	; 0x2f
1a000bcc:	2100      	movs	r1, #0
1a000bce:	f000 f84f 	bl	1a000c70 <gpioConfig>
   gpioConfig( DI2, GPIO_INPUT );
1a000bd2:	2030      	movs	r0, #48	; 0x30
1a000bd4:	2100      	movs	r1, #0
1a000bd6:	f000 f84b 	bl	1a000c70 <gpioConfig>
   gpioConfig( DI3, GPIO_INPUT );
1a000bda:	2031      	movs	r0, #49	; 0x31
1a000bdc:	2100      	movs	r1, #0
1a000bde:	f000 f847 	bl	1a000c70 <gpioConfig>
   gpioConfig( DI4, GPIO_INPUT );
1a000be2:	2032      	movs	r0, #50	; 0x32
1a000be4:	2100      	movs	r1, #0
1a000be6:	f000 f843 	bl	1a000c70 <gpioConfig>
   gpioConfig( DI5, GPIO_INPUT );
1a000bea:	2033      	movs	r0, #51	; 0x33
1a000bec:	2100      	movs	r1, #0
1a000bee:	f000 f83f 	bl	1a000c70 <gpioConfig>
   gpioConfig( DI6, GPIO_INPUT );
1a000bf2:	2034      	movs	r0, #52	; 0x34
1a000bf4:	2100      	movs	r1, #0
1a000bf6:	f000 f83b 	bl	1a000c70 <gpioConfig>
   gpioConfig( DI7, GPIO_INPUT );
1a000bfa:	2035      	movs	r0, #53	; 0x35
1a000bfc:	2100      	movs	r1, #0
1a000bfe:	f000 f837 	bl	1a000c70 <gpioConfig>

   // Configuración de pines de salida de la CIAA-NXP
   gpioConfig( DO0, GPIO_OUTPUT );
1a000c02:	2036      	movs	r0, #54	; 0x36
1a000c04:	2101      	movs	r1, #1
1a000c06:	f000 f833 	bl	1a000c70 <gpioConfig>
   gpioConfig( DO1, GPIO_OUTPUT );
1a000c0a:	2037      	movs	r0, #55	; 0x37
1a000c0c:	2101      	movs	r1, #1
1a000c0e:	f000 f82f 	bl	1a000c70 <gpioConfig>
   gpioConfig( DO2, GPIO_OUTPUT );
1a000c12:	2038      	movs	r0, #56	; 0x38
1a000c14:	2101      	movs	r1, #1
1a000c16:	f000 f82b 	bl	1a000c70 <gpioConfig>
   gpioConfig( DO3, GPIO_OUTPUT );
1a000c1a:	2039      	movs	r0, #57	; 0x39
1a000c1c:	2101      	movs	r1, #1
1a000c1e:	f000 f827 	bl	1a000c70 <gpioConfig>
   gpioConfig( DO4, GPIO_OUTPUT );
1a000c22:	203a      	movs	r0, #58	; 0x3a
1a000c24:	2101      	movs	r1, #1
1a000c26:	f000 f823 	bl	1a000c70 <gpioConfig>
   gpioConfig( DO5, GPIO_OUTPUT );
1a000c2a:	203b      	movs	r0, #59	; 0x3b
1a000c2c:	2101      	movs	r1, #1
1a000c2e:	f000 f81f 	bl	1a000c70 <gpioConfig>
   gpioConfig( DO6, GPIO_OUTPUT );
1a000c32:	203c      	movs	r0, #60	; 0x3c
1a000c34:	2101      	movs	r1, #1
1a000c36:	f000 f81b 	bl	1a000c70 <gpioConfig>
   gpioConfig( DO7, GPIO_OUTPUT );
1a000c3a:	203d      	movs	r0, #61	; 0x3d
1a000c3c:	2101      	movs	r1, #1
1a000c3e:	f000 f817 	bl	1a000c70 <gpioConfig>
1a000c42:	bd08      	pop	{r3, pc}

1a000c44 <gpioObtainPinConfig>:
/*==================[internal functions definition]==========================*/

static void gpioObtainPinConfig( uint32_t pin,
                                int8_t *pinNamePort, int8_t *pinNamePin,
																int8_t *func, int8_t *gpioPort,
																int8_t *gpioPin ){
1a000c44:	b430      	push	{r4, r5}

   *pinNamePort = gpioPinsConfig[pin].pinName.port;
1a000c46:	4d09      	ldr	r5, [pc, #36]	; (1a000c6c <gpioObtainPinConfig+0x28>)
1a000c48:	eb00 0080 	add.w	r0, r0, r0, lsl #2
1a000c4c:	182c      	adds	r4, r5, r0
1a000c4e:	5c28      	ldrb	r0, [r5, r0]
1a000c50:	7008      	strb	r0, [r1, #0]
   *pinNamePin  = gpioPinsConfig[pin].pinName.pin;
1a000c52:	7861      	ldrb	r1, [r4, #1]
1a000c54:	7011      	strb	r1, [r2, #0]
   *func        = gpioPinsConfig[pin].func;
1a000c56:	78a2      	ldrb	r2, [r4, #2]
1a000c58:	701a      	strb	r2, [r3, #0]
   *gpioPort    = gpioPinsConfig[pin].gpio.port;
1a000c5a:	78e2      	ldrb	r2, [r4, #3]
1a000c5c:	9b02      	ldr	r3, [sp, #8]
1a000c5e:	701a      	strb	r2, [r3, #0]
   *gpioPin     = gpioPinsConfig[pin].gpio.pin;
1a000c60:	7922      	ldrb	r2, [r4, #4]
1a000c62:	9b03      	ldr	r3, [sp, #12]
1a000c64:	701a      	strb	r2, [r3, #0]
}
1a000c66:	bc30      	pop	{r4, r5}
1a000c68:	4770      	bx	lr
1a000c6a:	bf00      	nop
1a000c6c:	1a000fd8 	.word	0x1a000fd8

1a000c70 <gpioConfig>:

/*==================[external functions definition]==========================*/

bool_t gpioConfig( uint32_t pin, gpioConfig_t config ){
1a000c70:	b530      	push	{r4, r5, lr}
1a000c72:	b085      	sub	sp, #20
1a000c74:	460c      	mov	r4, r1

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a000c76:	2300      	movs	r3, #0
1a000c78:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a000c7c:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a000c80:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a000c84:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a000c88:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinConfig( pin, &pinNamePort, &pinNamePin, &func,
1a000c8c:	ab03      	add	r3, sp, #12
1a000c8e:	9300      	str	r3, [sp, #0]
1a000c90:	f10d 030b 	add.w	r3, sp, #11
1a000c94:	9301      	str	r3, [sp, #4]
1a000c96:	f10d 010f 	add.w	r1, sp, #15
1a000c9a:	f10d 020e 	add.w	r2, sp, #14
1a000c9e:	f10d 030d 	add.w	r3, sp, #13
1a000ca2:	f7ff ffcf 	bl	1a000c44 <gpioObtainPinConfig>
                           &gpioPort, &gpioPin );

   switch(config){
1a000ca6:	2c05      	cmp	r4, #5
1a000ca8:	f200 8095 	bhi.w	1a000dd6 <gpioConfig+0x166>
1a000cac:	e8df f004 	tbb	[pc, r4]
1a000cb0:	3c227008 	.word	0x3c227008
1a000cb4:	0356      	.short	0x0356

      case GPIO_ENABLE:
		   /* Initializes GPIO */
		   Chip_GPIO_Init(LPC_GPIO_PORT);
1a000cb6:	4849      	ldr	r0, [pc, #292]	; (1a000ddc <gpioConfig+0x16c>)
1a000cb8:	f7ff fdfa 	bl	1a0008b0 <Chip_GPIO_Init>

/*==================[external functions definition]==========================*/

bool_t gpioConfig( uint32_t pin, gpioConfig_t config ){

   bool_t ret_val     = 1;
1a000cbc:	2001      	movs	r0, #1
   switch(config){

      case GPIO_ENABLE:
		   /* Initializes GPIO */
		   Chip_GPIO_Init(LPC_GPIO_PORT);
	   break;
1a000cbe:	e08b      	b.n	1a000dd8 <gpioConfig+0x168>

      case GPIO_INPUT:
         Chip_SCU_PinMux(
1a000cc0:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a000cc4:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a000cc8:	f89d 200d 	ldrb.w	r2, [sp, #13]
 * @note   Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMux(uint8_t port, uint8_t pin, uint16_t mode, uint8_t func)
{
   Chip_SCU_PinMuxSet(port, pin, (mode | (uint16_t) func));
1a000ccc:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
 * @note   Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMuxSet(uint8_t port, uint8_t pin, uint16_t modefunc)
{
   LPC_SCU->SFSP[port][pin] = modefunc;
1a000cd0:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a000cd4:	4942      	ldr	r1, [pc, #264]	; (1a000de0 <gpioConfig+0x170>)
1a000cd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            pinNamePort,
            pinNamePin,
            SCU_MODE_INACT | SCU_MODE_INBUFF_EN | SCU_MODE_ZIF_DIS,
            func
         );
         Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a000cda:	f99d 300b 	ldrsb.w	r3, [sp, #11]
1a000cde:	2401      	movs	r4, #1
1a000ce0:	483e      	ldr	r0, [pc, #248]	; (1a000ddc <gpioConfig+0x16c>)
1a000ce2:	f89d 100c 	ldrb.w	r1, [sp, #12]
1a000ce6:	fa04 f203 	lsl.w	r2, r4, r3
1a000cea:	2300      	movs	r3, #0
1a000cec:	f7ff fde2 	bl	1a0008b4 <Chip_GPIO_SetDir>

/*==================[external functions definition]==========================*/

bool_t gpioConfig( uint32_t pin, gpioConfig_t config ){

   bool_t ret_val     = 1;
1a000cf0:	4620      	mov	r0, r4
            pinNamePin,
            SCU_MODE_INACT | SCU_MODE_INBUFF_EN | SCU_MODE_ZIF_DIS,
            func
         );
         Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
      break;
1a000cf2:	e071      	b.n	1a000dd8 <gpioConfig+0x168>

      case GPIO_INPUT_PULLUP:
         Chip_SCU_PinMux(
1a000cf4:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a000cf8:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a000cfc:	f89d 200d 	ldrb.w	r2, [sp, #13]
 * @note   Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMux(uint8_t port, uint8_t pin, uint16_t mode, uint8_t func)
{
   Chip_SCU_PinMuxSet(port, pin, (mode | (uint16_t) func));
1a000d00:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 * @note   Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMuxSet(uint8_t port, uint8_t pin, uint16_t modefunc)
{
   LPC_SCU->SFSP[port][pin] = modefunc;
1a000d04:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a000d08:	4935      	ldr	r1, [pc, #212]	; (1a000de0 <gpioConfig+0x170>)
1a000d0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            pinNamePort,
            pinNamePin,
            SCU_MODE_PULLUP | SCU_MODE_INBUFF_EN | SCU_MODE_ZIF_DIS,
            func
         );
         Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a000d0e:	f99d 300b 	ldrsb.w	r3, [sp, #11]
1a000d12:	2401      	movs	r4, #1
1a000d14:	4831      	ldr	r0, [pc, #196]	; (1a000ddc <gpioConfig+0x16c>)
1a000d16:	f89d 100c 	ldrb.w	r1, [sp, #12]
1a000d1a:	fa04 f203 	lsl.w	r2, r4, r3
1a000d1e:	2300      	movs	r3, #0
1a000d20:	f7ff fdc8 	bl	1a0008b4 <Chip_GPIO_SetDir>

/*==================[external functions definition]==========================*/

bool_t gpioConfig( uint32_t pin, gpioConfig_t config ){

   bool_t ret_val     = 1;
1a000d24:	4620      	mov	r0, r4
            pinNamePin,
            SCU_MODE_PULLUP | SCU_MODE_INBUFF_EN | SCU_MODE_ZIF_DIS,
            func
         );
         Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
      break;
1a000d26:	e057      	b.n	1a000dd8 <gpioConfig+0x168>

      case GPIO_INPUT_PULLDOWN:
         Chip_SCU_PinMux(
1a000d28:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a000d2c:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a000d30:	f89d 200d 	ldrb.w	r2, [sp, #13]
 * @note   Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMux(uint8_t port, uint8_t pin, uint16_t mode, uint8_t func)
{
   Chip_SCU_PinMuxSet(port, pin, (mode | (uint16_t) func));
1a000d34:	f042 02d8 	orr.w	r2, r2, #216	; 0xd8
 * @note   Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMuxSet(uint8_t port, uint8_t pin, uint16_t modefunc)
{
   LPC_SCU->SFSP[port][pin] = modefunc;
1a000d38:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a000d3c:	4928      	ldr	r1, [pc, #160]	; (1a000de0 <gpioConfig+0x170>)
1a000d3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            pinNamePort,
            pinNamePin,
            SCU_MODE_PULLDOWN | SCU_MODE_INBUFF_EN | SCU_MODE_ZIF_DIS,
            func
         );
         Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a000d42:	f99d 300b 	ldrsb.w	r3, [sp, #11]
1a000d46:	2401      	movs	r4, #1
1a000d48:	4824      	ldr	r0, [pc, #144]	; (1a000ddc <gpioConfig+0x16c>)
1a000d4a:	f89d 100c 	ldrb.w	r1, [sp, #12]
1a000d4e:	fa04 f203 	lsl.w	r2, r4, r3
1a000d52:	2300      	movs	r3, #0
1a000d54:	f7ff fdae 	bl	1a0008b4 <Chip_GPIO_SetDir>

/*==================[external functions definition]==========================*/

bool_t gpioConfig( uint32_t pin, gpioConfig_t config ){

   bool_t ret_val     = 1;
1a000d58:	4620      	mov	r0, r4
            pinNamePin,
            SCU_MODE_PULLDOWN | SCU_MODE_INBUFF_EN | SCU_MODE_ZIF_DIS,
            func
         );
         Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
      break;
1a000d5a:	e03d      	b.n	1a000dd8 <gpioConfig+0x168>
      case GPIO_INPUT_PULLUP_PULLDOWN:
         Chip_SCU_PinMux(
1a000d5c:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a000d60:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a000d64:	f89d 200d 	ldrb.w	r2, [sp, #13]
 * @note   Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMux(uint8_t port, uint8_t pin, uint16_t mode, uint8_t func)
{
   Chip_SCU_PinMuxSet(port, pin, (mode | (uint16_t) func));
1a000d68:	f042 02c8 	orr.w	r2, r2, #200	; 0xc8
 * @note   Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMuxSet(uint8_t port, uint8_t pin, uint16_t modefunc)
{
   LPC_SCU->SFSP[port][pin] = modefunc;
1a000d6c:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a000d70:	491b      	ldr	r1, [pc, #108]	; (1a000de0 <gpioConfig+0x170>)
1a000d72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            pinNamePort,
            pinNamePin,
            SCU_MODE_REPEATER | SCU_MODE_INBUFF_EN | SCU_MODE_ZIF_DIS,
            func
         );
         Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a000d76:	f99d 300b 	ldrsb.w	r3, [sp, #11]
1a000d7a:	2401      	movs	r4, #1
1a000d7c:	4817      	ldr	r0, [pc, #92]	; (1a000ddc <gpioConfig+0x16c>)
1a000d7e:	f89d 100c 	ldrb.w	r1, [sp, #12]
1a000d82:	fa04 f203 	lsl.w	r2, r4, r3
1a000d86:	2300      	movs	r3, #0
1a000d88:	f7ff fd94 	bl	1a0008b4 <Chip_GPIO_SetDir>

/*==================[external functions definition]==========================*/

bool_t gpioConfig( uint32_t pin, gpioConfig_t config ){

   bool_t ret_val     = 1;
1a000d8c:	4620      	mov	r0, r4
            pinNamePin,
            SCU_MODE_REPEATER | SCU_MODE_INBUFF_EN | SCU_MODE_ZIF_DIS,
            func
         );
         Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
      break;
1a000d8e:	e023      	b.n	1a000dd8 <gpioConfig+0x168>

      case GPIO_OUTPUT:
         Chip_SCU_PinMux(
1a000d90:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a000d94:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a000d98:	f89d 200d 	ldrb.w	r2, [sp, #13]
 * @note   Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMux(uint8_t port, uint8_t pin, uint16_t mode, uint8_t func)
{
   Chip_SCU_PinMuxSet(port, pin, (mode | (uint16_t) func));
1a000d9c:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
 * @note   Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMuxSet(uint8_t port, uint8_t pin, uint16_t modefunc)
{
   LPC_SCU->SFSP[port][pin] = modefunc;
1a000da0:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a000da4:	490e      	ldr	r1, [pc, #56]	; (1a000de0 <gpioConfig+0x170>)
1a000da6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            pinNamePort,
            pinNamePin,
            SCU_MODE_INACT | SCU_MODE_ZIF_DIS | SCU_MODE_INBUFF_EN,
            func
         );
         Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_OUTPUT );
1a000daa:	f99d 300b 	ldrsb.w	r3, [sp, #11]
1a000dae:	2401      	movs	r4, #1
1a000db0:	4d0a      	ldr	r5, [pc, #40]	; (1a000ddc <gpioConfig+0x16c>)
1a000db2:	4628      	mov	r0, r5
1a000db4:	f89d 100c 	ldrb.w	r1, [sp, #12]
1a000db8:	fa04 f203 	lsl.w	r2, r4, r3
1a000dbc:	4623      	mov	r3, r4
1a000dbe:	f7ff fd79 	bl	1a0008b4 <Chip_GPIO_SetDir>
         Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, 0);
1a000dc2:	f89d 200c 	ldrb.w	r2, [sp, #12]
1a000dc6:	f89d 300b 	ldrb.w	r3, [sp, #11]
 * @return Nothing
 * @note   This function replaces Chip_GPIO_WritePortBit()
 */
STATIC INLINE void Chip_GPIO_SetPinState(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin, bool setting)
{
   pGPIO->B[port][pin] = setting;
1a000dca:	eb03 1342 	add.w	r3, r3, r2, lsl #5
1a000dce:	2200      	movs	r2, #0
1a000dd0:	54ea      	strb	r2, [r5, r3]

/*==================[external functions definition]==========================*/

bool_t gpioConfig( uint32_t pin, gpioConfig_t config ){

   bool_t ret_val     = 1;
1a000dd2:	4620      	mov	r0, r4
1a000dd4:	e000      	b.n	1a000dd8 <gpioConfig+0x168>
         Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_OUTPUT );
         Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, 0);
      break;

      default:
         ret_val = 0;
1a000dd6:	2000      	movs	r0, #0
      break;
   }

   return ret_val;

}
1a000dd8:	b005      	add	sp, #20
1a000dda:	bd30      	pop	{r4, r5, pc}
1a000ddc:	400f4000 	.word	0x400f4000
1a000de0:	40086000 	.word	0x40086000

1a000de4 <gpioWrite>:


bool_t gpioWrite( uint32_t pin, bool_t value ){
1a000de4:	b510      	push	{r4, lr}
1a000de6:	b084      	sub	sp, #16
1a000de8:	460c      	mov	r4, r1

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a000dea:	2300      	movs	r3, #0
1a000dec:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a000df0:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a000df4:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a000df8:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a000dfc:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinConfig( pin, &pinNamePort, &pinNamePin, &func,
1a000e00:	ab03      	add	r3, sp, #12
1a000e02:	9300      	str	r3, [sp, #0]
1a000e04:	f10d 030b 	add.w	r3, sp, #11
1a000e08:	9301      	str	r3, [sp, #4]
1a000e0a:	f10d 010f 	add.w	r1, sp, #15
1a000e0e:	f10d 020e 	add.w	r2, sp, #14
1a000e12:	f10d 030d 	add.w	r3, sp, #13
1a000e16:	f7ff ff15 	bl	1a000c44 <gpioObtainPinConfig>
                           &gpioPort, &gpioPin );

   Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, value);
1a000e1a:	f89d 200c 	ldrb.w	r2, [sp, #12]
1a000e1e:	f89d 300b 	ldrb.w	r3, [sp, #11]
1a000e22:	3400      	adds	r4, #0
1a000e24:	bf18      	it	ne
1a000e26:	2401      	movne	r4, #1
1a000e28:	eb03 1342 	add.w	r3, r3, r2, lsl #5
1a000e2c:	4a02      	ldr	r2, [pc, #8]	; (1a000e38 <gpioWrite+0x54>)
1a000e2e:	54d4      	strb	r4, [r2, r3]

   return ret_val;
}
1a000e30:	2001      	movs	r0, #1
1a000e32:	b004      	add	sp, #16
1a000e34:	bd10      	pop	{r4, pc}
1a000e36:	bf00      	nop
1a000e38:	400f4000 	.word	0x400f4000

1a000e3c <gpioRead>:

   return gpioWrite( pin, !gpioRead(pin) );
}


bool_t gpioRead( uint32_t pin ){
1a000e3c:	b500      	push	{lr}
1a000e3e:	b085      	sub	sp, #20

   bool_t ret_val     = OFF;

   int8_t pinNamePort = 0;
1a000e40:	2300      	movs	r3, #0
1a000e42:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a000e46:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a000e4a:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a000e4e:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a000e52:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinConfig( pin, &pinNamePort, &pinNamePin, &func,
1a000e56:	ab03      	add	r3, sp, #12
1a000e58:	9300      	str	r3, [sp, #0]
1a000e5a:	f10d 030b 	add.w	r3, sp, #11
1a000e5e:	9301      	str	r3, [sp, #4]
1a000e60:	f10d 010f 	add.w	r1, sp, #15
1a000e64:	f10d 020e 	add.w	r2, sp, #14
1a000e68:	f10d 030d 	add.w	r3, sp, #13
1a000e6c:	f7ff feea 	bl	1a000c44 <gpioObtainPinConfig>
                           &gpioPort, &gpioPin );

   ret_val = (bool_t) Chip_GPIO_ReadPortBit( LPC_GPIO_PORT, gpioPort, gpioPin );
1a000e70:	f99d 200c 	ldrsb.w	r2, [sp, #12]
1a000e74:	f89d 300b 	ldrb.w	r3, [sp, #11]
 * @return true of the GPIO is high, false if low
 * @note   It is recommended to use the Chip_GPIO_GetPinState() function instead.
 */
STATIC INLINE bool Chip_GPIO_ReadPortBit(LPC_GPIO_T *pGPIO, uint32_t port, uint8_t pin)
{
   return (bool) pGPIO->B[port][pin];
1a000e78:	eb03 1342 	add.w	r3, r3, r2, lsl #5
1a000e7c:	4a04      	ldr	r2, [pc, #16]	; (1a000e90 <gpioRead+0x54>)
1a000e7e:	5cd3      	ldrb	r3, [r2, r3]
1a000e80:	f013 0fff 	tst.w	r3, #255	; 0xff

   return ret_val;
}
1a000e84:	bf14      	ite	ne
1a000e86:	2001      	movne	r0, #1
1a000e88:	2000      	moveq	r0, #0
1a000e8a:	b005      	add	sp, #20
1a000e8c:	f85d fb04 	ldr.w	pc, [sp], #4
1a000e90:	400f4000 	.word	0x400f4000

1a000e94 <memset>:
1a000e94:	4402      	add	r2, r0
1a000e96:	4603      	mov	r3, r0
1a000e98:	4293      	cmp	r3, r2
1a000e9a:	d002      	beq.n	1a000ea2 <memset+0xe>
1a000e9c:	f803 1b01 	strb.w	r1, [r3], #1
1a000ea0:	e7fa      	b.n	1a000e98 <memset+0x4>
1a000ea2:	4770      	bx	lr
1a000ea4:	08040201 	.word	0x08040201
1a000ea8:	0f0f0f03 	.word	0x0f0f0f03
1a000eac:	000000ff 	.word	0x000000ff

1a000eb0 <periph_to_base>:
1a000eb0:	00050000 0020000a 00090024 00400040     ...... .$...@.@.
1a000ec0:	00600005 000400a6 00c300c0 00e00002     ..`.............
1a000ed0:	000100e0 01000100 01200003 00060120     .......... . ...
1a000ee0:	01400140 0142000c 00190142 01620162     @.@...B.B...b.b.
1a000ef0:	01820013 00120182 01a201a2 01c20011     ................
1a000f00:	001001c2 01e201e2 0202000f 000e0202     ................
1a000f10:	02220222 0223000d 001c0223              "."...#.#...

1a000f1c <InitClkStates>:
1a000f1c:	00010100 00010909 0001090a 01010701     ................
1a000f2c:	00010902 00010906 0101090c 0001090d     ................
1a000f3c:	0001090e 0001090f 00010910 00010911     ................
1a000f4c:	00010912 00010913 00011114 00011119     ................
1a000f5c:	0001111a 0001111b                       ........

1a000f64 <OscRateIn>:
1a000f64:	00b71b00                                ....

1a000f68 <ExtRateIn>:
1a000f68:	00000000                                ....

1a000f6c <InitClkStates>:
1a000f6c:	00010308 00010307 01010f01              ............

1a000f78 <pinmuxing>:
1a000f78:	00400a02 00400b02 00400c02 00440002     ..@...@...@...D.
1a000f88:	00440102 00440202 00520302 00520402     ..D...D...R...R.
1a000f98:	00520509 00570609 00570206 00500001     ..R...W...W...P.
1a000fa8:	00500101 00500201 00500601 00f30f01     ..P...P...P.....
1a000fb8:	00f71001 00f31101 00b31201 00f01301     ................
1a000fc8:	00b31401 00b60707 00f20000 00b60100     ................

1a000fd8 <gpioPinsConfig>:
1a000fd8:	02000104 00050701 05010d03 04080100     ................
1a000fe8:	02020002 02000304 00000403 04070002     ................
1a000ff8:	030c0300 09050402 05040103 04030208     ................
1a001008:	04020305 06040504 0802000c 03000b06     ................
1a001018:	00090607 07060503 060f0504 03030004     ................
1a001028:	02000404 00050404 06040502 04060200     ................
1a001038:	0c050408 05040a04 0003010e 14010a00     ................
1a001048:	010f0000 0d000012 00001101 0010010c     ................
1a001058:	07070300 000f0300 01000001 00000000     ................
1a001068:	000a0600 08060603 06100504 04030005     ................
1a001078:	03000106 04090400 04010d05 010b0000     ................
1a001088:	0200000f 00000001 00010104 02010800     ................
1a001098:	01090000 09010006 05040002 04010200     ................
1a0010a8:	02020105 02020504 0e00000a 01000b02     ................
1a0010b8:	000c020b 00040c01 04000200 01020001     ................
1a0010c8:	02000204 00030402 03070302 070b0300     ................
1a0010d8:	0c030004 03000507 0006070d 01020e03     ................
1a0010e8:	04010504 06020006 02000504 00040405     ................
1a0010f8:	08040402 040c0504 0d050409 05040a04     ................
1a001108:	0005010e 00000801                       ........
