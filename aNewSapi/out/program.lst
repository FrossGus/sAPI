
out/program.elf:     file format elf32-littlearm
out/program.elf
architecture: arm, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x1a000c81

Program Header:
0x70000001 off    0x00009bec vaddr 0x1a001bec paddr 0x1a001bec align 2**2
         filesz 0x00000008 memsz 0x00000008 flags r--
    LOAD off    0x00008048 vaddr 0x10000048 paddr 0x10000048 align 2**15
         filesz 0x00000000 memsz 0x00000020 flags rw-
    LOAD off    0x00008000 vaddr 0x1a000000 paddr 0x1a000000 align 2**15
         filesz 0x00001bf4 memsz 0x00001bf4 flags r-x
    LOAD off    0x00010000 vaddr 0x10000000 paddr 0x1a001bf4 align 2**15
         filesz 0x00000044 memsz 0x00000044 flags rw-
private flags = 5000402: [Version5 EABI] [hard-float ABI] [has entry point]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001bec  1a000000  1a000000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000044  10000000  1a001bf4  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .data_RAM2    00000000  10080000  10080000  00010044  2**2
                  CONTENTS
  3 .data_RAM3    00000000  20000000  20000000  00010044  2**2
                  CONTENTS
  4 .data_RAM4    00000000  20008000  20008000  00010044  2**2
                  CONTENTS
  5 .data_RAM5    00000000  2000c000  2000c000  00010044  2**2
                  CONTENTS
  6 .bss          00000020  10000048  10000048  00008048  2**3
                  ALLOC
  7 .bss_RAM2     00000000  10080000  10080000  00010044  2**2
                  CONTENTS
  8 .bss_RAM3     00000000  20000000  20000000  00010044  2**2
                  CONTENTS
  9 .bss_RAM4     00000000  20008000  20008000  00010044  2**2
                  CONTENTS
 10 .bss_RAM5     00000000  2000c000  2000c000  00010044  2**2
                  CONTENTS
 11 .ARM.exidx    00000008  1a001bec  1a001bec  00009bec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 12 .uninit_RESERVED 00000000  10000000  10000000  00010044  2**2
                  CONTENTS
 13 .noinit_RAM2  00000000  10080000  10080000  00010044  2**2
                  CONTENTS
 14 .noinit_RAM3  00000000  20000000  20000000  00010044  2**2
                  CONTENTS
 15 .noinit_RAM4  00000000  20008000  20008000  00010044  2**2
                  CONTENTS
 16 .noinit_RAM5  00000000  2000c000  2000c000  00010044  2**2
                  CONTENTS
 17 .noinit       00000000  10000068  10000068  00010044  2**2
                  CONTENTS
 18 .debug_info   0000d407  00000000  00000000  00010044  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_abbrev 00002399  00000000  00000000  0001d44b  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_aranges 00000698  00000000  00000000  0001f7e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_ranges 00000578  00000000  00000000  0001fe7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_macro  00008ab3  00000000  00000000  000203f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_line   00008c2f  00000000  00000000  00028ea7  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .debug_str    0001bc85  00000000  00000000  00031ad6  2**0
                  CONTENTS, READONLY, DEBUGGING
 25 .comment      00000070  00000000  00000000  0004d75b  2**0
                  CONTENTS, READONLY
 26 .ARM.attributes 00000039  00000000  00000000  0004d7cb  2**0
                  CONTENTS, READONLY
 27 .debug_frame  00000fa0  00000000  00000000  0004d804  2**2
                  CONTENTS, READONLY, DEBUGGING
 28 .debug_loc    000051c0  00000000  00000000  0004e7a4  2**0
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
1a000000 l    d  .text	00000000 .text
10000000 l    d  .data	00000000 .data
10080000 l    d  .data_RAM2	00000000 .data_RAM2
20000000 l    d  .data_RAM3	00000000 .data_RAM3
20008000 l    d  .data_RAM4	00000000 .data_RAM4
2000c000 l    d  .data_RAM5	00000000 .data_RAM5
10000048 l    d  .bss	00000000 .bss
10080000 l    d  .bss_RAM2	00000000 .bss_RAM2
20000000 l    d  .bss_RAM3	00000000 .bss_RAM3
20008000 l    d  .bss_RAM4	00000000 .bss_RAM4
2000c000 l    d  .bss_RAM5	00000000 .bss_RAM5
1a001bec l    d  .ARM.exidx	00000000 .ARM.exidx
10000000 l    d  .uninit_RESERVED	00000000 .uninit_RESERVED
10080000 l    d  .noinit_RAM2	00000000 .noinit_RAM2
20000000 l    d  .noinit_RAM3	00000000 .noinit_RAM3
20008000 l    d  .noinit_RAM4	00000000 .noinit_RAM4
2000c000 l    d  .noinit_RAM5	00000000 .noinit_RAM5
10000068 l    d  .noinit	00000000 .noinit
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    df *ABS*	00000000 cr_startup_lpc43xx.c
00000000 l    df *ABS*	00000000 sapi_uart.c
00000000 l    df *ABS*	00000000 crp.c
00000000 l    df *ABS*	00000000 programa.c
00000000 l    df *ABS*	00000000 uart_18xx_43xx.c
1a000360 l     F .text	0000002c Chip_UART_GetIndex
1a001964 l     O .text	00000008 UART_BClock
1a00196c l     O .text	00000008 UART_PClock
00000000 l    df *ABS*	00000000 chip_18xx_43xx.c
00000000 l    df *ABS*	00000000 clock_18xx_43xx.c
1a0004d4 l     F .text	000000a8 pll_calc_divs
1a00057c l     F .text	000000fa pll_get_frac
1a000678 l     F .text	00000048 Chip_Clock_FindBaseClock
1a0008e4 l     F .text	00000022 Chip_Clock_GetDivRate
10000048 l     O .bss	00000008 audio_usb_pll_freq
1a001980 l     O .text	0000006c periph_to_base
00000000 l    df *ABS*	00000000 sysinit_18xx_43xx.c
1a0019ec l     O .text	00000048 InitClkStates
00000000 l    df *ABS*	00000000 fpu_init.c
00000000 l    df *ABS*	00000000 gpio_18xx_43xx.c
00000000 l    df *ABS*	00000000 board.c
1a000bdc l     F .text	00000040 Board_LED_Init
1a001a3c l     O .text	0000000c gpioLEDBits
00000000 l    df *ABS*	00000000 sysinit.c
00000000 l    df *ABS*	00000000 board_sysinit.c
1a001a48 l     O .text	0000000c InitClkStates
1a001a54 l     O .text	00000060 pinmuxing
00000000 l    df *ABS*	00000000 sapi_datatypes.c
00000000 l    df *ABS*	00000000 sapi_delay.c
00000000 l    df *ABS*	00000000 sapi_tick.c
00000000 l    df *ABS*	00000000 sapi_timer.c
00000000 l    df *ABS*	00000000 sapi_board.c
00000000 l    df *ABS*	00000000 sapi_gpio.c
1a001150 l     F .text	0000002c gpioObtainPinConfig
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 bpabi.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 
1a080000 l       *ABS*	00000000 __top_MFlashA512
1a001bf4 l       .ARM.exidx	00000000 __exidx_end
1a001bf4 l       .ARM.exidx	00000000 _etext
20008000 l       *ABS*	00000000 __top_RamAHB32
1a001bec l       .text	00000000 __exidx_start
20010000 l       *ABS*	00000000 __top_RamAHB_ETB16
10008000 l       *ABS*	00000000 __top_RamLoc32
2000c000 l       *ABS*	00000000 __top_RamAHB16
1008a000 l       *ABS*	00000000 __top_RamLoc40
10000068 l       .bss	00000000 _pvHeapStart
1b080000 l       *ABS*	00000000 __top_MFlashB512
1a00070c g     F .text	0000001c Chip_Clock_GetDividerSource
1a001418 g     F .text	0000002e .hidden __gnu_uldivmod_helper
1a000f80 g     F .text	00000070 TIMER2_IRQHandler
1a000190  w    F .text	00000002 DebugMon_Handler
1a00019c  w    F .text	00000002 RIT_IRQHandler
1a00019c  w    F .text	00000002 ADCHS_IRQHandler
1a00144c g     F .text	0000029c .hidden __divdi3
1a000114 g       .text	00000000 __section_table_start
1a00019c  w    F .text	00000002 FLASH_EEPROM_IRQHandler
1a00019c  w    F .text	00000002 I2C0_IRQHandler
1a000bb8 g     F .text	00000024 Chip_GPIO_SetDir
1a00017c  w    F .text	00000002 HardFault_Handler
1a000000 g       *ABS*	00000000 __vectors_start__
1a000e7c g     F .text	00000024 SysTick_Handler
1a00019c  w    F .text	00000002 SDIO_IRQHandler
1a00019c  w    F .text	00000002 ATIMER_IRQHandler
1a000194  w    F .text	00000002 PendSV_Handler
1a000178  w    F .text	00000002 NMI_Handler
1a000150 g       .text	00000000 __data_section_table_end
1a00019c  w    F .text	00000002 I2C1_IRQHandler
1a00019c  w    F .text	00000002 UART1_IRQHandler
1a00019c  w    F .text	00000002 GPIO5_IRQHandler
1a00019c  w    F .text	00000002 CAN1_IRQHandler
53ff6bfa g       *ABS*	00000000 __valid_user_code_checksum
1a00019c  w    F .text	00000002 USB1_IRQHandler
1a00019c  w    F .text	00000002 I2S0_IRQHandler
1a000ff0 g     F .text	00000070 TIMER3_IRQHandler
1a000970 g     F .text	0000000c Chip_Clock_GetBaseClocktHz
1a0001d0 g     F .text	00000002 UART0_IRQHandler
1a0001bc g     F .text	00000012 bss_init
1a00019c  w    F .text	00000002 SGPIO_IRQHandler
1a0013b8 g     F .text	00000000 .hidden __aeabi_uldivmod
10000068 g       .noinit	00000000 _noinit
10000050 g     O .bss	00000004 SystemCoreClock
1a00038c g     F .text	00000050 Chip_UART_Init
1a00019c  w    F .text	00000002 ADC0_IRQHandler
1a000188  w    F .text	00000002 UsageFault_Handler
1a0009b8 g     F .text	0000004c Chip_Clock_GetRate
1a00019c  w    F .text	00000002 GPIO6_IRQHandler
10000058 g     O .bss	00000008 tickCounter
1a000d3c g     F .text	0000006c Board_SetupClocking
1a001a38 g     O .text	00000004 ExtRateIn
1a00019c  w    F .text	00000002 IntDefaultHandler
1a000300 g       .text	00000000 __CRP_WORD_END__
1a00019c  w    F .text	00000002 GPIO1_IRQHandler
1a000df8 g     F .text	00000078 tickConfig
1a00019c  w    F .text	00000002 SSP0_IRQHandler
1a00117c g     F .text	00000174 gpioConfig
1a0002fc g     O .text	00000004 CRP_WORD
1a0016e8 g     F .text	0000026a .hidden __udivdi3
10000014 g     O .data	00000010 timer2CaptureHookFunction
1a00019c  w    F .text	00000002 ADC1_IRQHandler
1a000c58 g     F .text	00000028 Board_Init
1a000114 g       .text	00000000 __data_section_table
10000034 g     O .data	00000010 timer0CaptureHookFunction
1a00019c  w    F .text	00000002 RTC_IRQHandler
10000068 g       .bss	00000000 _ebss
1a000ea0 g     F .text	00000070 TIMER0_IRQHandler
1a00019c  w    F .text	00000002 SPI_IRQHandler
1a00019c  w    F .text	00000002 LCD_IRQHandler
1a0006c0 g     F .text	0000004c Chip_Clock_EnableCrystal
1a001060 g     F .text	000000ee boardConfig
1a0001a0 g     F .text	0000001a data_init
1a000f10 g     F .text	00000070 TIMER1_IRQHandler
10000024 g     O .data	00000010 timer1CaptureHookFunction
1a000db4 g     F .text	00000002 UART2_IRQHandler
1a00087c g     F .text	00000068 Chip_Clock_GetMainPLLHz
1a000dbc g     F .text	00000004 sAPI_NullFuncPtr
1a0013a0 g     F .text	00000016 gpioToggle
1a00019c  w    F .text	00000002 GPIO2_IRQHandler
1a00094c g     F .text	00000024 Chip_Clock_GetBaseClock
10000048 g       .bss	00000000 _bss
1a00019c  w    F .text	00000002 I2S1_IRQHandler
1a000bb4 g     F .text	00000002 Chip_GPIO_Init
1a001a34 g     O .text	00000004 OscRateIn
10000068 g       .noinit	00000000 _end_noinit
10008000 g       *ABS*	00000000 _vStackTop
1a00019c  w    F .text	00000002 SSP1_IRQHandler
1a000178 g       .text	00000000 __bss_section_table_end
1a001448  w    F .text	00000002 .hidden __aeabi_ldiv0
1a00019c  w    F .text	00000002 USB0_IRQHandler
1a00019c  w    F .text	00000002 GPIO3_IRQHandler
1a00019c  w    F .text	00000002 SCT_IRQHandler
1a000728 g     F .text	0000001c Chip_Clock_GetDividerDivisor
1a0002fc g       .text	00000000 __CRP_WORD_START__
1a001954 g     F .text	00000010 memset
1a000180  w    F .text	00000002 MemManage_Handler
1a000300 g     F .text	0000005e main
1a00019c  w    F .text	00000002 WDT_IRQHandler
1a00018c  w    F .text	00000002 SVC_Handler
1a00019c  w    F .text	00000002 GPIO7_IRQHandler
1a00097c g     F .text	0000003c Chip_Clock_EnableOpts
1a001ab4 g     O .text	00000136 gpioPinsConfig
1a000744 g     F .text	000000b8 Chip_Clock_GetClockInputHz
1a000b5c g     F .text	00000058 fpuInit
1a0007fc g     F .text	00000080 Chip_Clock_CalcMainPLLValue
1a000cfc g     F .text	0000000c SystemInit
1a00019c  w    F .text	00000002 SPIFI_IRQHandler
1a000dc0 g     F .text	00000038 delay
1a00019c  w    F .text	00000002 QEI_IRQHandler
1a000150 g       .text	00000000 __bss_section_table
1a0012f0 g     F .text	00000058 gpioWrite
1a000d08 g     F .text	00000034 Board_SetupMuxing
1a0003dc g     F .text	000000e4 Chip_UART_SetBaudFDR
1a000e70 g     F .text	0000000c tickRead
10000060 g     O .bss	00000008 tickRateMS
1a00019c  w    F .text	00000002 ETH_IRQHandler
10000000 g     O .data	00000004 tickHookFunction
10000000 g       .uninit_RESERVED	00000000 _end_uninit_RESERVED
1a00019c  w    F .text	00000002 CAN0_IRQHandler
10000000 g       .data	00000000 _data
1a000178 g       .text	00000000 __section_table_end
1a00019c  w    F .text	00000002 GINT0_IRQHandler
1a00019c  w    F .text	00000002 DAC_IRQHandler
1a000c30 g     F .text	00000028 Board_Debug_Init
10000044 g       .data	00000000 _edata
1a00019c  w    F .text	00000002 M0SUB_IRQHandler
1a000a04 g     F .text	00000158 Chip_SetupCoreClock
1a00019c  w    F .text	00000002 GPIO0_IRQHandler
1a000000 g     O .text	00000114 g_pfnVectors
1a000c80 g     F .text	0000007c ResetISR
1a0004c0 g     F .text	00000014 SystemCoreClockUpdate
1a00019c  w    F .text	00000002 DMA_IRQHandler
1a00019c  w    F .text	00000002 EVRT_IRQHandler
1a001448  w    F .text	00000002 .hidden __aeabi_idiv0
1a000184  w    F .text	00000002 BusFault_Handler
10000004 g     O .data	00000010 timer3CaptureHookFunction
1a000db8 g     F .text	00000002 UART3_IRQHandler
1a00019c  w    F .text	00000002 MCPWM_IRQHandler
1a0013e8 g     F .text	0000002e .hidden __gnu_ldivmod_helper
1a00019c  w    F .text	00000002 M0APP_IRQHandler
1a001348 g     F .text	00000058 gpioRead
1a00019c  w    F .text	00000002 GINT1_IRQHandler
1a000c1c g     F .text	00000014 Board_UART_Init
1a000908 g     F .text	00000044 Chip_Clock_SetBaseClock
1a00019c  w    F .text	00000002 GPIO4_IRQHandler
1a000da8 g     F .text	0000000c Board_SystemInit



Disassembly of section .text:

1a000000 <g_pfnVectors>:
1a000000:	00 80 00 10 81 0c 00 1a 79 01 00 1a 7d 01 00 1a     ........y...}...
1a000010:	81 01 00 1a 85 01 00 1a 89 01 00 1a fa 6b ff 53     .............k.S
	...
1a00002c:	8d 01 00 1a 91 01 00 1a 00 00 00 00 95 01 00 1a     ................
1a00003c:	7d 0e 00 1a 9d 01 00 1a 9d 01 00 1a 9d 01 00 1a     }...............
1a00004c:	00 00 00 00 9d 01 00 1a 9d 01 00 1a 9d 01 00 1a     ................
1a00005c:	9d 01 00 1a 9d 01 00 1a 9d 01 00 1a 9d 01 00 1a     ................
1a00006c:	9d 01 00 1a a1 0e 00 1a 11 0f 00 1a 81 0f 00 1a     ................
1a00007c:	f1 0f 00 1a 9d 01 00 1a 9d 01 00 1a 9d 01 00 1a     ................
1a00008c:	9d 01 00 1a 9d 01 00 1a 9d 01 00 1a 9d 01 00 1a     ................
1a00009c:	9d 01 00 1a d1 01 00 1a 9d 01 00 1a b5 0d 00 1a     ................
1a0000ac:	b9 0d 00 1a 9d 01 00 1a 9d 01 00 1a 9d 01 00 1a     ................
1a0000bc:	9d 01 00 1a 9d 01 00 1a 9d 01 00 1a 9d 01 00 1a     ................
1a0000cc:	9d 01 00 1a 9d 01 00 1a 9d 01 00 1a 9d 01 00 1a     ................
1a0000dc:	9d 01 00 1a 9d 01 00 1a 9d 01 00 1a 9d 01 00 1a     ................
1a0000ec:	9d 01 00 1a 00 00 00 00 9d 01 00 1a 9d 01 00 1a     ................
1a0000fc:	9d 01 00 1a 00 00 00 00 9d 01 00 1a 9d 01 00 1a     ................
1a00010c:	9d 01 00 1a 9d 01 00 1a                             ........

1a000114 <__data_section_table>:
1a000114:	1a001bf4 	.word	0x1a001bf4
1a000118:	10000000 	.word	0x10000000
1a00011c:	00000044 	.word	0x00000044
1a000120:	1a001bf4 	.word	0x1a001bf4
1a000124:	10080000 	.word	0x10080000
1a000128:	00000000 	.word	0x00000000
1a00012c:	1a001bf4 	.word	0x1a001bf4
1a000130:	20000000 	.word	0x20000000
1a000134:	00000000 	.word	0x00000000
1a000138:	1a001bf4 	.word	0x1a001bf4
1a00013c:	20008000 	.word	0x20008000
1a000140:	00000000 	.word	0x00000000
1a000144:	1a001bf4 	.word	0x1a001bf4
1a000148:	2000c000 	.word	0x2000c000
1a00014c:	00000000 	.word	0x00000000

1a000150 <__bss_section_table>:
1a000150:	10000048 	.word	0x10000048
1a000154:	00000020 	.word	0x00000020
1a000158:	10080000 	.word	0x10080000
1a00015c:	00000000 	.word	0x00000000
1a000160:	20000000 	.word	0x20000000
1a000164:	00000000 	.word	0x00000000
1a000168:	20008000 	.word	0x20008000
1a00016c:	00000000 	.word	0x00000000
1a000170:	2000c000 	.word	0x2000c000
1a000174:	00000000 	.word	0x00000000

1a000178 <NMI_Handler>:
// handler routines in your application code.
//*****************************************************************************
__attribute__ ((section(".after_vectors")))
void NMI_Handler(void) {
    while (1) {
    }
1a000178:	e7fe      	b.n	1a000178 <NMI_Handler>
1a00017a:	bf00      	nop

1a00017c <HardFault_Handler>:
}
__attribute__ ((section(".after_vectors")))
void HardFault_Handler(void) {
    while (1) {
    }
1a00017c:	e7fe      	b.n	1a00017c <HardFault_Handler>
1a00017e:	bf00      	nop

1a000180 <MemManage_Handler>:
}
__attribute__ ((section(".after_vectors")))
void MemManage_Handler(void) {
    while (1) {
    }
1a000180:	e7fe      	b.n	1a000180 <MemManage_Handler>
1a000182:	bf00      	nop

1a000184 <BusFault_Handler>:
}
__attribute__ ((section(".after_vectors")))
void BusFault_Handler(void) {
    while (1) {
    }
1a000184:	e7fe      	b.n	1a000184 <BusFault_Handler>
1a000186:	bf00      	nop

1a000188 <UsageFault_Handler>:
}
__attribute__ ((section(".after_vectors")))
void UsageFault_Handler(void) {
    while (1) {
    }
1a000188:	e7fe      	b.n	1a000188 <UsageFault_Handler>
1a00018a:	bf00      	nop

1a00018c <SVC_Handler>:
}
__attribute__ ((section(".after_vectors")))
void SVC_Handler(void) {
    while (1) {
    }
1a00018c:	e7fe      	b.n	1a00018c <SVC_Handler>
1a00018e:	bf00      	nop

1a000190 <DebugMon_Handler>:
}
__attribute__ ((section(".after_vectors")))
void DebugMon_Handler(void) {
    while (1) {
    }
1a000190:	e7fe      	b.n	1a000190 <DebugMon_Handler>
1a000192:	bf00      	nop

1a000194 <PendSV_Handler>:
}
__attribute__ ((section(".after_vectors")))
void PendSV_Handler(void) {
    while (1) {
    }
1a000194:	e7fe      	b.n	1a000194 <PendSV_Handler>
1a000196:	bf00      	nop
}
__attribute__ ((section(".after_vectors")))
void SysTick_Handler(void) {
    while (1) {
    }
1a000198:	e7fe      	b.n	1a000198 <PendSV_Handler+0x4>
1a00019a:	bf00      	nop

1a00019c <ADC0_IRQHandler>:
//
//*****************************************************************************
__attribute__ ((section(".after_vectors")))
void IntDefaultHandler(void) {
    while (1) {
    }
1a00019c:	e7fe      	b.n	1a00019c <ADC0_IRQHandler>
1a00019e:	bf00      	nop

1a0001a0 <data_init>:
// ResetISR() function in order to cope with MCUs with multiple banks of
// memory.
//*****************************************************************************
        __attribute__((section(".after_vectors"
)))
void data_init(unsigned int romstart, unsigned int start, unsigned int len) {
1a0001a0:	b410      	push	{r4}
    unsigned int *pulDest = (unsigned int*) start;
    unsigned int *pulSrc = (unsigned int*) romstart;
    unsigned int loop;
    for (loop = 0; loop < len; loop = loop + 4)
1a0001a2:	2300      	movs	r3, #0
1a0001a4:	e004      	b.n	1a0001b0 <data_init+0x10>
        *pulDest++ = *pulSrc++;
1a0001a6:	6804      	ldr	r4, [r0, #0]
1a0001a8:	600c      	str	r4, [r1, #0]
)))
void data_init(unsigned int romstart, unsigned int start, unsigned int len) {
    unsigned int *pulDest = (unsigned int*) start;
    unsigned int *pulSrc = (unsigned int*) romstart;
    unsigned int loop;
    for (loop = 0; loop < len; loop = loop + 4)
1a0001aa:	3304      	adds	r3, #4
        *pulDest++ = *pulSrc++;
1a0001ac:	3004      	adds	r0, #4
1a0001ae:	3104      	adds	r1, #4
)))
void data_init(unsigned int romstart, unsigned int start, unsigned int len) {
    unsigned int *pulDest = (unsigned int*) start;
    unsigned int *pulSrc = (unsigned int*) romstart;
    unsigned int loop;
    for (loop = 0; loop < len; loop = loop + 4)
1a0001b0:	4293      	cmp	r3, r2
1a0001b2:	d3f8      	bcc.n	1a0001a6 <data_init+0x6>
        *pulDest++ = *pulSrc++;
}
1a0001b4:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0001b8:	4770      	bx	lr
1a0001ba:	bf00      	nop

1a0001bc <bss_init>:

__attribute__ ((section(".after_vectors")))
void bss_init(unsigned int start, unsigned int len) {
    unsigned int *pulDest = (unsigned int*) start;
    unsigned int loop;
    for (loop = 0; loop < len; loop = loop + 4)
1a0001bc:	2300      	movs	r3, #0
1a0001be:	e003      	b.n	1a0001c8 <bss_init+0xc>
        *pulDest++ = 0;
1a0001c0:	2200      	movs	r2, #0
1a0001c2:	6002      	str	r2, [r0, #0]

__attribute__ ((section(".after_vectors")))
void bss_init(unsigned int start, unsigned int len) {
    unsigned int *pulDest = (unsigned int*) start;
    unsigned int loop;
    for (loop = 0; loop < len; loop = loop + 4)
1a0001c4:	3304      	adds	r3, #4
        *pulDest++ = 0;
1a0001c6:	3004      	adds	r0, #4

__attribute__ ((section(".after_vectors")))
void bss_init(unsigned int start, unsigned int len) {
    unsigned int *pulDest = (unsigned int*) start;
    unsigned int loop;
    for (loop = 0; loop < len; loop = loop + 4)
1a0001c8:	428b      	cmp	r3, r1
1a0001ca:	d3f9      	bcc.n	1a0001c0 <bss_init+0x4>
        *pulDest++ = 0;
}
1a0001cc:	4770      	bx	lr
1a0001ce:	bf00      	nop

1a0001d0 <UART0_IRQHandler>:
/*==================[ISR external functions definition]======================*/

__attribute__ ((section(".after_vectors")))

/* 0x28 0x000000A0 - Handler for ISR UART0 (IRQ 24) */
void UART0_IRQHandler(void){
1a0001d0:	4770      	bx	lr
1a0001d2:	bf00      	nop
1a0001d4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001fc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000200:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000204:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000208:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00020c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000210:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000214:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000218:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00021c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000220:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000224:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000228:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00022c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000230:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000234:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000238:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00023c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000240:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000244:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000248:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00024c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000250:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000254:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000258:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00025c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000260:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000264:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000268:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00026c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000270:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000274:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000278:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00027c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000280:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000284:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000288:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00028c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000290:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000294:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000298:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00029c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ac:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002bc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002cc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

1a0002fc <CRP_WORD>:
1a0002fc:	ffff ffff                                   ....

1a000300 <main>:
/*==================[declaraciones de funciones externas]====================*/

/*==================[funcion principal]======================================*/

// FUNCION PRINCIPAL, PUNTO DE ENTRADA AL PROGRAMA LUEGO DE ENCENDIDO O RESET.
int main( void ){
1a000300:	b508      	push	{r3, lr}

   // ---------- CONFIGURACIONES ------------------------------
   // Inicializar y configurar la plataforma
   boardConfig();   
1a000302:	f000 fead 	bl	1a001060 <boardConfig>
   
   // ---------- REPETIR POR SIEMPRE --------------------------
   while( TRUE )
   {      
      // Si se presiona TEC1, enciende el LEDR
      gpioWrite( LEDR, !(gpioRead(TEC1)) );
1a000306:	2024      	movs	r0, #36	; 0x24
1a000308:	f001 f81e 	bl	1a001348 <gpioRead>
1a00030c:	fab0 f180 	clz	r1, r0
1a000310:	0949      	lsrs	r1, r1, #5
1a000312:	2028      	movs	r0, #40	; 0x28
1a000314:	f000 ffec 	bl	1a0012f0 <gpioWrite>
      
      // Si se presiona TEC2, enciende el LED1
      gpioWrite( LED1, !(gpioRead(TEC2)) );
1a000318:	2025      	movs	r0, #37	; 0x25
1a00031a:	f001 f815 	bl	1a001348 <gpioRead>
1a00031e:	fab0 f180 	clz	r1, r0
1a000322:	0949      	lsrs	r1, r1, #5
1a000324:	202b      	movs	r0, #43	; 0x2b
1a000326:	f000 ffe3 	bl	1a0012f0 <gpioWrite>
      
      // Si se presiona TEC3, enciende el LED2
      gpioWrite( LED2, !(gpioRead(TEC3)) );
1a00032a:	2026      	movs	r0, #38	; 0x26
1a00032c:	f001 f80c 	bl	1a001348 <gpioRead>
1a000330:	fab0 f180 	clz	r1, r0
1a000334:	0949      	lsrs	r1, r1, #5
1a000336:	202c      	movs	r0, #44	; 0x2c
1a000338:	f000 ffda 	bl	1a0012f0 <gpioWrite>
      
      // Si se presiona TEC4, enciende el LED3
      gpioWrite( LED3, !(gpioRead(TEC4)) );
1a00033c:	2027      	movs	r0, #39	; 0x27
1a00033e:	f001 f803 	bl	1a001348 <gpioRead>
1a000342:	fab0 f180 	clz	r1, r0
1a000346:	0949      	lsrs	r1, r1, #5
1a000348:	202d      	movs	r0, #45	; 0x2d
1a00034a:	f000 ffd1 	bl	1a0012f0 <gpioWrite>

      // Intercambia el valor del LEDB
      gpioToggle( LEDB );
1a00034e:	202a      	movs	r0, #42	; 0x2a
1a000350:	f001 f826 	bl	1a0013a0 <gpioToggle>
      
      // Retardo bloqueante durante 100ms
      delay( 100 );
1a000354:	2064      	movs	r0, #100	; 0x64
1a000356:	2100      	movs	r1, #0
1a000358:	f000 fd32 	bl	1a000dc0 <delay>
   } 
1a00035c:	e7d3      	b.n	1a000306 <main+0x6>
1a00035e:	bf00      	nop

1a000360 <Chip_UART_GetIndex>:

/* Returns clock index for the peripheral block */
static int Chip_UART_GetIndex(LPC_USART_T *pUART)
{
   uint32_t base = (uint32_t) pUART;
   switch(base) {
1a000360:	4b09      	ldr	r3, [pc, #36]	; (1a000388 <Chip_UART_GetIndex+0x28>)
1a000362:	4298      	cmp	r0, r3
1a000364:	d009      	beq.n	1a00037a <Chip_UART_GetIndex+0x1a>
1a000366:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
1a00036a:	4298      	cmp	r0, r3
1a00036c:	d007      	beq.n	1a00037e <Chip_UART_GetIndex+0x1e>
1a00036e:	f5a3 2380 	sub.w	r3, r3, #262144	; 0x40000
1a000372:	4298      	cmp	r0, r3
1a000374:	d005      	beq.n	1a000382 <Chip_UART_GetIndex+0x22>
       case LPC_USART0_BASE:
           return 0;
1a000376:	2000      	movs	r0, #0
1a000378:	4770      	bx	lr
       case LPC_UART1_BASE:
           return 1;
       case LPC_USART2_BASE:
           return 2;
1a00037a:	2002      	movs	r0, #2
1a00037c:	4770      	bx	lr
       case LPC_USART3_BASE:
           return 3;
1a00037e:	2003      	movs	r0, #3
1a000380:	4770      	bx	lr
   uint32_t base = (uint32_t) pUART;
   switch(base) {
       case LPC_USART0_BASE:
           return 0;
       case LPC_UART1_BASE:
           return 1;
1a000382:	2001      	movs	r0, #1
       case LPC_USART3_BASE:
           return 3;
       default:
           return 0; /* Should never come here */
   }
}
1a000384:	4770      	bx	lr
1a000386:	bf00      	nop
1a000388:	400c1000 	.word	0x400c1000

1a00038c <Chip_UART_Init>:
 * Public functions
 ****************************************************************************/

/* Initializes the pUART peripheral */
void Chip_UART_Init(LPC_USART_T *pUART)
{
1a00038c:	b510      	push	{r4, lr}
1a00038e:	b082      	sub	sp, #8
1a000390:	4604      	mov	r4, r0
    volatile uint32_t tmp;

   /* Enable UART clocking. UART base clock(s) must already be enabled */
   Chip_Clock_EnableOpts(UART_PClock[Chip_UART_GetIndex(pUART)], true, true, 1);
1a000392:	f7ff ffe5 	bl	1a000360 <Chip_UART_GetIndex>
1a000396:	4b0f      	ldr	r3, [pc, #60]	; (1a0003d4 <Chip_UART_Init+0x48>)
1a000398:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a00039c:	2101      	movs	r1, #1
1a00039e:	460a      	mov	r2, r1
1a0003a0:	460b      	mov	r3, r1
1a0003a2:	f000 faeb 	bl	1a00097c <Chip_Clock_EnableOpts>
 *         with a RX trip level of 8 characters, use something like
 *         (UART_FCR_FIFO_EN | UART_FCR_TRG_LEV2)
 */
STATIC INLINE void Chip_UART_SetupFIFOS(LPC_USART_T *pUART, uint32_t fcr)
{
   pUART->FCR = fcr;
1a0003a6:	2307      	movs	r3, #7
1a0003a8:	60a3      	str	r3, [r4, #8]
 * @param  pUART   : Pointer to selected pUART peripheral
 * @return Nothing
 */
STATIC INLINE void Chip_UART_TXDisable(LPC_USART_T *pUART)
{
    pUART->TER2 = 0;
1a0003aa:	2300      	movs	r3, #0
1a0003ac:	65e3      	str	r3, [r4, #92]	; 0x5c

    /* Disable Tx */
    Chip_UART_TXDisable(pUART);

    /* Disable interrupts */
   pUART->IER = 0;
1a0003ae:	6063      	str	r3, [r4, #4]
   /* Set LCR to default state */
   pUART->LCR = 0;
1a0003b0:	60e3      	str	r3, [r4, #12]
   /* Set ACR to default state */
   pUART->ACR = 0;
1a0003b2:	6223      	str	r3, [r4, #32]
    /* Set RS485 control to default state */
   pUART->RS485CTRL = 0;
1a0003b4:	64e3      	str	r3, [r4, #76]	; 0x4c
   /* Set RS485 delay timer to default state */
   pUART->RS485DLY = 0;
1a0003b6:	6563      	str	r3, [r4, #84]	; 0x54
   /* Set RS485 addr match to default state */
   pUART->RS485ADRMATCH = 0;
1a0003b8:	6523      	str	r3, [r4, #80]	; 0x50

    /* Clear MCR */
    if (pUART == LPC_UART1) {
1a0003ba:	4b07      	ldr	r3, [pc, #28]	; (1a0003d8 <Chip_UART_Init+0x4c>)
1a0003bc:	429c      	cmp	r4, r3
1a0003be:	d103      	bne.n	1a0003c8 <Chip_UART_Init+0x3c>
       /* Set Modem Control to default state */
       pUART->MCR = 0;
1a0003c0:	2300      	movs	r3, #0
1a0003c2:	6123      	str	r3, [r4, #16]
       /*Dummy Reading to Clear Status */
       tmp = pUART->MSR;
1a0003c4:	69a3      	ldr	r3, [r4, #24]
1a0003c6:	9301      	str	r3, [sp, #4]
 *         stop bit, and even (enabled) parity would be
 *         (UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_EN | UART_LCR_PARITY_EVEN)
 */
STATIC INLINE void Chip_UART_ConfigData(LPC_USART_T *pUART, uint32_t config)
{
   pUART->LCR = config;
1a0003c8:	2303      	movs	r3, #3
1a0003ca:	60e3      	str	r3, [r4, #12]

   /* Default 8N1, with DLAB disabled */
   Chip_UART_ConfigData(pUART, (UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_DIS));

   /* Disable fractional divider */
   pUART->FDR = 0x10;
1a0003cc:	2310      	movs	r3, #16
1a0003ce:	62a3      	str	r3, [r4, #40]	; 0x28
}
1a0003d0:	b002      	add	sp, #8
1a0003d2:	bd10      	pop	{r4, pc}
1a0003d4:	1a00196c 	.word	0x1a00196c
1a0003d8:	40082000 	.word	0x40082000

1a0003dc <Chip_UART_SetBaudFDR>:
    Chip_UART_ABIntHandler(pUART);
}

/* Determines and sets best dividers to get a target baud rate */
uint32_t Chip_UART_SetBaudFDR(LPC_USART_T *pUART, uint32_t baud)
{
1a0003dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a0003e0:	b083      	sub	sp, #12
1a0003e2:	4683      	mov	fp, r0
1a0003e4:	4688      	mov	r8, r1
   uint32_t sdiv = 0, sm = 1, sd = 0;
   uint32_t pclk, m, d;
   uint32_t odiff = -1UL; /* old best diff */

   /* Get base clock for the corresponding UART */
   pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a0003e6:	f7ff ffbb 	bl	1a000360 <Chip_UART_GetIndex>
1a0003ea:	4b34      	ldr	r3, [pc, #208]	; (1a0004bc <Chip_UART_SetBaudFDR+0xe0>)
1a0003ec:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a0003f0:	f000 fae2 	bl	1a0009b8 <Chip_Clock_GetRate>
1a0003f4:	4606      	mov	r6, r0
/* Determines and sets best dividers to get a target baud rate */
uint32_t Chip_UART_SetBaudFDR(LPC_USART_T *pUART, uint32_t baud)
{
   uint32_t sdiv = 0, sm = 1, sd = 0;
   uint32_t pclk, m, d;
   uint32_t odiff = -1UL; /* old best diff */
1a0003f6:	f04f 37ff 	mov.w	r7, #4294967295

   /* Get base clock for the corresponding UART */
   pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);

   /* Loop through all possible fractional divider values */
   for (m = 1; odiff && m < 16; m++) {
1a0003fa:	2401      	movs	r4, #1
}

/* Determines and sets best dividers to get a target baud rate */
uint32_t Chip_UART_SetBaudFDR(LPC_USART_T *pUART, uint32_t baud)
{
   uint32_t sdiv = 0, sm = 1, sd = 0;
1a0003fc:	2300      	movs	r3, #0
1a0003fe:	9301      	str	r3, [sp, #4]
1a000400:	46a2      	mov	sl, r4
1a000402:	4699      	mov	r9, r3

   /* Get base clock for the corresponding UART */
   pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);

   /* Loop through all possible fractional divider values */
   for (m = 1; odiff && m < 16; m++) {
1a000404:	e029      	b.n	1a00045a <Chip_UART_SetBaudFDR+0x7e>
       for (d = 0; d < m; d++) {
           uint32_t diff, div;
           uint64_t dval = (((uint64_t) pclk << 28) * m) / (baud * (m + d));
1a000406:	2300      	movs	r3, #0
1a000408:	0932      	lsrs	r2, r6, #4
1a00040a:	0730      	lsls	r0, r6, #28
1a00040c:	fba0 0104 	umull	r0, r1, r0, r4
1a000410:	fb04 1102 	mla	r1, r4, r2, r1
1a000414:	1962      	adds	r2, r4, r5
1a000416:	fb08 f202 	mul.w	r2, r8, r2
1a00041a:	f000 ffcd 	bl	1a0013b8 <__aeabi_uldivmod>

           /* Lower 32-bit of dval has diff */
           diff = (uint32_t) dval;
1a00041e:	4603      	mov	r3, r0
           /* Upper 32-bit of dval has div */
           div = (uint32_t) (dval >> 32);
1a000420:	460a      	mov	r2, r1

           /* Closer to next div */
           if ((int)diff < 0) {
1a000422:	2800      	cmp	r0, #0
1a000424:	da01      	bge.n	1a00042a <Chip_UART_SetBaudFDR+0x4e>
               diff = -diff;
1a000426:	4243      	negs	r3, r0
               div ++;
1a000428:	1c4a      	adds	r2, r1, #1
           }

           /* Check if new value is worse than old or out of range */
           if (odiff < diff || !div || (div >> 16) || (div < 3 && d)) {
1a00042a:	429f      	cmp	r7, r3
1a00042c:	d30a      	bcc.n	1a000444 <Chip_UART_SetBaudFDR+0x68>
1a00042e:	b14a      	cbz	r2, 1a000444 <Chip_UART_SetBaudFDR+0x68>
1a000430:	0c11      	lsrs	r1, r2, #16
1a000432:	d107      	bne.n	1a000444 <Chip_UART_SetBaudFDR+0x68>
1a000434:	2a02      	cmp	r2, #2
1a000436:	d800      	bhi.n	1a00043a <Chip_UART_SetBaudFDR+0x5e>
1a000438:	b925      	cbnz	r5, 1a000444 <Chip_UART_SetBaudFDR+0x68>
           sd = d;
           sm = m;
           odiff = diff;

           /* On perfect match, break loop */
           if(!diff) {
1a00043a:	b14b      	cbz	r3, 1a000450 <Chip_UART_SetBaudFDR+0x74>

           /* Store the new better values */
           sdiv = div;
           sd = d;
           sm = m;
           odiff = diff;
1a00043c:	461f      	mov	r7, r3
               continue;
           }

           /* Store the new better values */
           sdiv = div;
           sd = d;
1a00043e:	9501      	str	r5, [sp, #4]
           sm = m;
1a000440:	46a2      	mov	sl, r4
           if (odiff < diff || !div || (div >> 16) || (div < 3 && d)) {
               continue;
           }

           /* Store the new better values */
           sdiv = div;
1a000442:	4691      	mov	r9, r2
   /* Get base clock for the corresponding UART */
   pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);

   /* Loop through all possible fractional divider values */
   for (m = 1; odiff && m < 16; m++) {
       for (d = 0; d < m; d++) {
1a000444:	3501      	adds	r5, #1
1a000446:	e000      	b.n	1a00044a <Chip_UART_SetBaudFDR+0x6e>
1a000448:	2500      	movs	r5, #0
1a00044a:	42a5      	cmp	r5, r4
1a00044c:	d3db      	bcc.n	1a000406 <Chip_UART_SetBaudFDR+0x2a>
1a00044e:	e003      	b.n	1a000458 <Chip_UART_SetBaudFDR+0x7c>

           /* Store the new better values */
           sdiv = div;
           sd = d;
           sm = m;
           odiff = diff;
1a000450:	461f      	mov	r7, r3
               continue;
           }

           /* Store the new better values */
           sdiv = div;
           sd = d;
1a000452:	9501      	str	r5, [sp, #4]
           sm = m;
1a000454:	46a2      	mov	sl, r4
           if (odiff < diff || !div || (div >> 16) || (div < 3 && d)) {
               continue;
           }

           /* Store the new better values */
           sdiv = div;
1a000456:	4691      	mov	r9, r2

   /* Get base clock for the corresponding UART */
   pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);

   /* Loop through all possible fractional divider values */
   for (m = 1; odiff && m < 16; m++) {
1a000458:	3401      	adds	r4, #1
1a00045a:	b10f      	cbz	r7, 1a000460 <Chip_UART_SetBaudFDR+0x84>
1a00045c:	2c0f      	cmp	r4, #15
1a00045e:	d9f3      	bls.n	1a000448 <Chip_UART_SetBaudFDR+0x6c>
           }
       }
   }

   /* Return 0 if a vaild divisor is not possible */
   if (!sdiv) {
1a000460:	f1b9 0f00 	cmp.w	r9, #0
1a000464:	d026      	beq.n	1a0004b4 <Chip_UART_SetBaudFDR+0xd8>
 * @param  pUART   : Pointer to selected UART peripheral
 * @return Nothing
 */
STATIC INLINE void Chip_UART_EnableDivisorAccess(LPC_USART_T *pUART)
{
   pUART->LCR |= UART_LCR_DLAB_EN;
1a000466:	f8db 300c 	ldr.w	r3, [fp, #12]
1a00046a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a00046e:	f8cb 300c 	str.w	r3, [fp, #12]
 *         order to access the USART Divisor Latches. This function
 *         doesn't alter the DLAB state.
 */
STATIC INLINE void Chip_UART_SetDivisorLatches(LPC_USART_T *pUART, uint8_t dll, uint8_t dlm)
{
   pUART->DLL = (uint32_t) dll;
1a000472:	fa5f f389 	uxtb.w	r3, r9
1a000476:	f8cb 3000 	str.w	r3, [fp]
   pUART->DLM = (uint32_t) dlm;
1a00047a:	f3c9 2307 	ubfx	r3, r9, #8, #8
1a00047e:	f8cb 3004 	str.w	r3, [fp, #4]
 * @param  pUART   : Pointer to selected UART peripheral
 * @return Nothing
 */
STATIC INLINE void Chip_UART_DisableDivisorAccess(LPC_USART_T *pUART)
{
   pUART->LCR &= ~UART_LCR_DLAB_EN;
1a000482:	f8db 300c 	ldr.w	r3, [fp, #12]
1a000486:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a00048a:	f8cb 300c 	str.w	r3, [fp, #12]
   Chip_UART_EnableDivisorAccess(pUART);
   Chip_UART_SetDivisorLatches(pUART, UART_LOAD_DLL(sdiv), UART_LOAD_DLM(sdiv));
   Chip_UART_DisableDivisorAccess(pUART);

   /* Set best fractional divider */
   pUART->FDR = (UART_FDR_MULVAL(sm) | UART_FDR_DIVADDVAL(sd));
1a00048e:	ea4f 130a 	mov.w	r3, sl, lsl #4
1a000492:	b2da      	uxtb	r2, r3
1a000494:	9901      	ldr	r1, [sp, #4]
1a000496:	f001 030f 	and.w	r3, r1, #15
1a00049a:	4313      	orrs	r3, r2
1a00049c:	f8cb 3028 	str.w	r3, [fp, #40]	; 0x28

   /* Return actual baud rate */
   return (pclk >> 4) * sm / (sdiv * (sm + sd));
1a0004a0:	0933      	lsrs	r3, r6, #4
1a0004a2:	fb0a f303 	mul.w	r3, sl, r3
1a0004a6:	eb0a 0001 	add.w	r0, sl, r1
1a0004aa:	fb09 f000 	mul.w	r0, r9, r0
1a0004ae:	fbb3 f0f0 	udiv	r0, r3, r0
1a0004b2:	e000      	b.n	1a0004b6 <Chip_UART_SetBaudFDR+0xda>
       }
   }

   /* Return 0 if a vaild divisor is not possible */
   if (!sdiv) {
       return 0;
1a0004b4:	2000      	movs	r0, #0
   /* Set best fractional divider */
   pUART->FDR = (UART_FDR_MULVAL(sm) | UART_FDR_DIVADDVAL(sd));

   /* Return actual baud rate */
   return (pclk >> 4) * sm / (sdiv * (sm + sd));
}
1a0004b6:	b003      	add	sp, #12
1a0004b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a0004bc:	1a001964 	.word	0x1a001964

1a0004c0 <SystemCoreClockUpdate>:


/* Update system core clock rate, should be called if the system has
   a clock rate change */
void SystemCoreClockUpdate(void)
{
1a0004c0:	b508      	push	{r3, lr}
   /* CPU core speed */
   SystemCoreClock = Chip_Clock_GetRate(CLK_MX_MXCORE);
1a0004c2:	2069      	movs	r0, #105	; 0x69
1a0004c4:	f000 fa78 	bl	1a0009b8 <Chip_Clock_GetRate>
1a0004c8:	4b01      	ldr	r3, [pc, #4]	; (1a0004d0 <SystemCoreClockUpdate+0x10>)
1a0004ca:	6018      	str	r0, [r3, #0]
1a0004cc:	bd08      	pop	{r3, pc}
1a0004ce:	bf00      	nop
1a0004d0:	10000050 	.word	0x10000050

1a0004d4 <pll_calc_divs>:
       return -val;
   return val;
}

static void pll_calc_divs(uint32_t freq, PLL_PARAM_T *ppll)
{
1a0004d4:	b5f0      	push	{r4, r5, r6, r7, lr}

   uint32_t prev = freq;
   int n, m, p;

   /* When direct mode is set FBSEL should be a don't care */
   if (ppll->ctrl & (1 << 7)) {
1a0004d6:	680b      	ldr	r3, [r1, #0]
1a0004d8:	f013 0f80 	tst.w	r3, #128	; 0x80
1a0004dc:	d002      	beq.n	1a0004e4 <pll_calc_divs+0x10>
       ppll->ctrl &= ~(1 << 6);
1a0004de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a0004e2:	600b      	str	r3, [r1, #0]
1a0004e4:	4686      	mov	lr, r0
1a0004e6:	2601      	movs	r6, #1
1a0004e8:	e041      	b.n	1a00056e <pll_calc_divs+0x9a>
   }
   for (n = 1; n <= 4; n++) {
       for (p = 0; p < 4; p ++) {
           for (m = 1; m <= 256; m++) {
               uint32_t fcco, fout;
               if (ppll->ctrl & (1 << 6)) {
1a0004ea:	680d      	ldr	r5, [r1, #0]
1a0004ec:	f015 0f40 	tst.w	r5, #64	; 0x40
1a0004f0:	d008      	beq.n	1a000504 <pll_calc_divs+0x30>
                   fcco = ((m << (p + 1)) * ppll->fin) / n;
1a0004f2:	1c7b      	adds	r3, r7, #1
1a0004f4:	fa04 f203 	lsl.w	r2, r4, r3
1a0004f8:	694b      	ldr	r3, [r1, #20]
1a0004fa:	fb03 f302 	mul.w	r3, r3, r2
1a0004fe:	fbb3 f3f6 	udiv	r3, r3, r6
1a000502:	e004      	b.n	1a00050e <pll_calc_divs+0x3a>
               } else {
                   fcco = (m * ppll->fin) / n;
1a000504:	694b      	ldr	r3, [r1, #20]
1a000506:	fb04 f303 	mul.w	r3, r4, r3
1a00050a:	fbb3 f3f6 	udiv	r3, r3, r6
               }
               if (fcco < PLL_MIN_CCO_FREQ) continue;
1a00050e:	4a19      	ldr	r2, [pc, #100]	; (1a000574 <pll_calc_divs+0xa0>)
1a000510:	4293      	cmp	r3, r2
1a000512:	d920      	bls.n	1a000556 <pll_calc_divs+0x82>
               if (fcco > PLL_MAX_CCO_FREQ) break;
1a000514:	4a18      	ldr	r2, [pc, #96]	; (1a000578 <pll_calc_divs+0xa4>)
1a000516:	4293      	cmp	r3, r2
1a000518:	d823      	bhi.n	1a000562 <pll_calc_divs+0x8e>
               if (ppll->ctrl & (1 << 7)) {
1a00051a:	f015 0f80 	tst.w	r5, #128	; 0x80
1a00051e:	d103      	bne.n	1a000528 <pll_calc_divs+0x54>
                   fout = fcco;
               } else {
                   fout = fcco >> (p + 1);
1a000520:	1c7a      	adds	r2, r7, #1
1a000522:	fa23 f202 	lsr.w	r2, r3, r2
1a000526:	e000      	b.n	1a00052a <pll_calc_divs+0x56>
                   fcco = (m * ppll->fin) / n;
               }
               if (fcco < PLL_MIN_CCO_FREQ) continue;
               if (fcco > PLL_MAX_CCO_FREQ) break;
               if (ppll->ctrl & (1 << 7)) {
                   fout = fcco;
1a000528:	461a      	mov	r2, r3
/*****************************************************************************
 * Private functions
 ****************************************************************************/
__STATIC_INLINE uint32_t ABS(int val)
{
   if (val < 0)
1a00052a:	1a85      	subs	r5, r0, r2
1a00052c:	d502      	bpl.n	1a000534 <pll_calc_divs+0x60>
       return -val;
1a00052e:	f1c5 0c00 	rsb	ip, r5, #0
1a000532:	e000      	b.n	1a000536 <pll_calc_divs+0x62>
   return val;
1a000534:	46ac      	mov	ip, r5
                   fout = fcco;
               } else {
                   fout = fcco >> (p + 1);
               }

               if (ABS(freq - fout) < prev) {
1a000536:	45e6      	cmp	lr, ip
1a000538:	d90d      	bls.n	1a000556 <pll_calc_divs+0x82>
                   ppll->nsel = n;
1a00053a:	608e      	str	r6, [r1, #8]
                   ppll->psel = p + 1;
1a00053c:	f107 0e01 	add.w	lr, r7, #1
1a000540:	f8c1 e00c 	str.w	lr, [r1, #12]
                   ppll->msel = m;
1a000544:	610c      	str	r4, [r1, #16]
                   ppll->fout = fout;
1a000546:	618a      	str	r2, [r1, #24]
                   ppll->fcco = fcco;
1a000548:	61cb      	str	r3, [r1, #28]
/*****************************************************************************
 * Private functions
 ****************************************************************************/
__STATIC_INLINE uint32_t ABS(int val)
{
   if (val < 0)
1a00054a:	2d00      	cmp	r5, #0
1a00054c:	da02      	bge.n	1a000554 <pll_calc_divs+0x80>
       return -val;
1a00054e:	f1c5 0e00 	rsb	lr, r5, #0
1a000552:	e000      	b.n	1a000556 <pll_calc_divs+0x82>
   return val;
1a000554:	46ae      	mov	lr, r5
   if (ppll->ctrl & (1 << 7)) {
       ppll->ctrl &= ~(1 << 6);
   }
   for (n = 1; n <= 4; n++) {
       for (p = 0; p < 4; p ++) {
           for (m = 1; m <= 256; m++) {
1a000556:	3401      	adds	r4, #1
1a000558:	e000      	b.n	1a00055c <pll_calc_divs+0x88>
1a00055a:	2401      	movs	r4, #1
1a00055c:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
1a000560:	ddc3      	ble.n	1a0004ea <pll_calc_divs+0x16>
   /* When direct mode is set FBSEL should be a don't care */
   if (ppll->ctrl & (1 << 7)) {
       ppll->ctrl &= ~(1 << 6);
   }
   for (n = 1; n <= 4; n++) {
       for (p = 0; p < 4; p ++) {
1a000562:	3701      	adds	r7, #1
1a000564:	e000      	b.n	1a000568 <pll_calc_divs+0x94>
1a000566:	2700      	movs	r7, #0
1a000568:	2f03      	cmp	r7, #3
1a00056a:	ddf6      	ble.n	1a00055a <pll_calc_divs+0x86>

   /* When direct mode is set FBSEL should be a don't care */
   if (ppll->ctrl & (1 << 7)) {
       ppll->ctrl &= ~(1 << 6);
   }
   for (n = 1; n <= 4; n++) {
1a00056c:	3601      	adds	r6, #1
1a00056e:	2e04      	cmp	r6, #4
1a000570:	ddf9      	ble.n	1a000566 <pll_calc_divs+0x92>
                   prev = ABS(freq - fout);
               }
           }
       }
   }
}
1a000572:	bdf0      	pop	{r4, r5, r6, r7, pc}
1a000574:	094c5eff 	.word	0x094c5eff
1a000578:	1312d000 	.word	0x1312d000

1a00057c <pll_get_frac>:

static void pll_get_frac(uint32_t freq, PLL_PARAM_T *ppll)
{
1a00057c:	b5f0      	push	{r4, r5, r6, r7, lr}
1a00057e:	b099      	sub	sp, #100	; 0x64
1a000580:	4605      	mov	r5, r0
1a000582:	460c      	mov	r4, r1
   int diff[3];
   PLL_PARAM_T pll[3] = {{0},{0},{0}};
1a000584:	4668      	mov	r0, sp
1a000586:	2100      	movs	r1, #0
1a000588:	2260      	movs	r2, #96	; 0x60
1a00058a:	f001 f9e3 	bl	1a001954 <memset>

   /* Try direct mode */
   pll[0].ctrl |= (1 << 7);
1a00058e:	2380      	movs	r3, #128	; 0x80
1a000590:	9300      	str	r3, [sp, #0]
   pll[0].fin = ppll->fin;
1a000592:	6963      	ldr	r3, [r4, #20]
1a000594:	9305      	str	r3, [sp, #20]
   pll[0].srcin = ppll->srcin;
1a000596:	7923      	ldrb	r3, [r4, #4]
1a000598:	f88d 3004 	strb.w	r3, [sp, #4]
   pll_calc_divs(freq, &pll[0]);
1a00059c:	4628      	mov	r0, r5
1a00059e:	4669      	mov	r1, sp
1a0005a0:	f7ff ff98 	bl	1a0004d4 <pll_calc_divs>
   if (pll[0].fout == freq) {
1a0005a4:	9b06      	ldr	r3, [sp, #24]
1a0005a6:	42ab      	cmp	r3, r5
1a0005a8:	d107      	bne.n	1a0005ba <pll_get_frac+0x3e>
       *ppll = pll[0];
1a0005aa:	466d      	mov	r5, sp
1a0005ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a0005ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a0005b0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a0005b4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
       return ;
1a0005b8:	e05b      	b.n	1a000672 <pll_get_frac+0xf6>
/*****************************************************************************
 * Private functions
 ****************************************************************************/
__STATIC_INLINE uint32_t ABS(int val)
{
   if (val < 0)
1a0005ba:	1aeb      	subs	r3, r5, r3
1a0005bc:	d500      	bpl.n	1a0005c0 <pll_get_frac+0x44>
       return -val;
1a0005be:	425b      	negs	r3, r3
   pll_calc_divs(freq, &pll[0]);
   if (pll[0].fout == freq) {
       *ppll = pll[0];
       return ;
   }
   diff[0] = ABS(freq - pll[0].fout);
1a0005c0:	461e      	mov	r6, r3

   /* Try non-Integer mode */
   pll[2].ctrl = (1 << 6);
1a0005c2:	2340      	movs	r3, #64	; 0x40
1a0005c4:	9310      	str	r3, [sp, #64]	; 0x40
   pll[2].fin = ppll->fin;
1a0005c6:	6963      	ldr	r3, [r4, #20]
1a0005c8:	9315      	str	r3, [sp, #84]	; 0x54
   pll[2].srcin = ppll->srcin;
1a0005ca:	7923      	ldrb	r3, [r4, #4]
1a0005cc:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
   pll_calc_divs(freq, &pll[2]);
1a0005d0:	4628      	mov	r0, r5
1a0005d2:	a910      	add	r1, sp, #64	; 0x40
1a0005d4:	f7ff ff7e 	bl	1a0004d4 <pll_calc_divs>
   if (pll[2].fout == freq) {
1a0005d8:	9b16      	ldr	r3, [sp, #88]	; 0x58
1a0005da:	42ab      	cmp	r3, r5
1a0005dc:	d107      	bne.n	1a0005ee <pll_get_frac+0x72>
       *ppll = pll[2];
1a0005de:	ad10      	add	r5, sp, #64	; 0x40
1a0005e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a0005e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a0005e4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a0005e8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
       return ;
1a0005ec:	e041      	b.n	1a000672 <pll_get_frac+0xf6>
/*****************************************************************************
 * Private functions
 ****************************************************************************/
__STATIC_INLINE uint32_t ABS(int val)
{
   if (val < 0)
1a0005ee:	1aeb      	subs	r3, r5, r3
1a0005f0:	d500      	bpl.n	1a0005f4 <pll_get_frac+0x78>
       return -val;
1a0005f2:	425b      	negs	r3, r3
   if (pll[2].fout == freq) {
       *ppll = pll[2];
       return ;
   }

   diff[2] = ABS(freq - pll[2].fout);
1a0005f4:	461f      	mov	r7, r3
   /* Try integer mode */
   pll[1].ctrl = (1 << 6);
1a0005f6:	2340      	movs	r3, #64	; 0x40
1a0005f8:	9308      	str	r3, [sp, #32]
   pll[1].fin = ppll->fin;
1a0005fa:	6963      	ldr	r3, [r4, #20]
1a0005fc:	930d      	str	r3, [sp, #52]	; 0x34
   pll[1].srcin = ppll->srcin;
1a0005fe:	7923      	ldrb	r3, [r4, #4]
1a000600:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   pll_calc_divs(freq, &pll[1]);
1a000604:	4628      	mov	r0, r5
1a000606:	a908      	add	r1, sp, #32
1a000608:	f7ff ff64 	bl	1a0004d4 <pll_calc_divs>
   if (pll[1].fout == freq) {
1a00060c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a00060e:	42ab      	cmp	r3, r5
1a000610:	d107      	bne.n	1a000622 <pll_get_frac+0xa6>
       *ppll = pll[1];
1a000612:	ad08      	add	r5, sp, #32
1a000614:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000616:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000618:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a00061c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
       return ;
1a000620:	e027      	b.n	1a000672 <pll_get_frac+0xf6>
/*****************************************************************************
 * Private functions
 ****************************************************************************/
__STATIC_INLINE uint32_t ABS(int val)
{
   if (val < 0)
1a000622:	1aed      	subs	r5, r5, r3
1a000624:	d500      	bpl.n	1a000628 <pll_get_frac+0xac>
       return -val;
1a000626:	426d      	negs	r5, r5
       return ;
   }
   diff[1] = ABS(freq - pll[1].fout);

   /* Find the min of 3 and return */
   if (diff[0] <= diff[1]) {
1a000628:	42ae      	cmp	r6, r5
1a00062a:	dc11      	bgt.n	1a000650 <pll_get_frac+0xd4>
       if (diff[0] <= diff[2]) {
1a00062c:	42be      	cmp	r6, r7
1a00062e:	dc07      	bgt.n	1a000640 <pll_get_frac+0xc4>
           *ppll = pll[0];
1a000630:	466d      	mov	r5, sp
1a000632:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000634:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000636:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a00063a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a00063e:	e018      	b.n	1a000672 <pll_get_frac+0xf6>
       } else {
           *ppll = pll[2];
1a000640:	ad10      	add	r5, sp, #64	; 0x40
1a000642:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000644:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000646:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a00064a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a00064e:	e010      	b.n	1a000672 <pll_get_frac+0xf6>
       }
   } else {
       if (diff[1] <= diff[2]) {
1a000650:	42af      	cmp	r7, r5
1a000652:	db07      	blt.n	1a000664 <pll_get_frac+0xe8>
           *ppll = pll[1];
1a000654:	ad08      	add	r5, sp, #32
1a000656:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000658:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a00065a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a00065e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a000662:	e006      	b.n	1a000672 <pll_get_frac+0xf6>
       } else {
           *ppll = pll[2];
1a000664:	ad10      	add	r5, sp, #64	; 0x40
1a000666:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000668:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a00066a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a00066e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
       }
   }
}
1a000672:	b019      	add	sp, #100	; 0x64
1a000674:	bdf0      	pop	{r4, r5, r6, r7, pc}
1a000676:	bf00      	nop

1a000678 <Chip_Clock_FindBaseClock>:
   return Chip_Clock_GetClockInputHz(input) / (div + 1);
}

/* Finds the base clock for the peripheral clock */
static CHIP_CGU_BASE_CLK_T Chip_Clock_FindBaseClock(CHIP_CCU_CLK_T clk)
{
1a000678:	b430      	push	{r4, r5}
   CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
   int i = 0;
1a00067a:	2300      	movs	r3, #0
}

/* Finds the base clock for the peripheral clock */
static CHIP_CGU_BASE_CLK_T Chip_Clock_FindBaseClock(CHIP_CCU_CLK_T clk)
{
   CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
1a00067c:	211c      	movs	r1, #28
   int i = 0;

   while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a00067e:	e010      	b.n	1a0006a2 <Chip_Clock_FindBaseClock+0x2a>
       if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
1a000680:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a000684:	0052      	lsls	r2, r2, #1
1a000686:	4d0d      	ldr	r5, [pc, #52]	; (1a0006bc <Chip_Clock_FindBaseClock+0x44>)
1a000688:	5aaa      	ldrh	r2, [r5, r2]
1a00068a:	4282      	cmp	r2, r0
1a00068c:	d806      	bhi.n	1a00069c <Chip_Clock_FindBaseClock+0x24>
1a00068e:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a000692:	0052      	lsls	r2, r2, #1
1a000694:	442a      	add	r2, r5
1a000696:	8852      	ldrh	r2, [r2, #2]
1a000698:	4282      	cmp	r2, r0
1a00069a:	d201      	bcs.n	1a0006a0 <Chip_Clock_FindBaseClock+0x28>
           baseclk = periph_to_base[i].clkbase;
       }
       else {
           i++;
1a00069c:	3301      	adds	r3, #1
1a00069e:	e000      	b.n	1a0006a2 <Chip_Clock_FindBaseClock+0x2a>
   CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
   int i = 0;

   while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
       if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
           baseclk = periph_to_base[i].clkbase;
1a0006a0:	4621      	mov	r1, r4
static CHIP_CGU_BASE_CLK_T Chip_Clock_FindBaseClock(CHIP_CCU_CLK_T clk)
{
   CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
   int i = 0;

   while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a0006a2:	291c      	cmp	r1, #28
1a0006a4:	d107      	bne.n	1a0006b6 <Chip_Clock_FindBaseClock+0x3e>
1a0006a6:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a0006aa:	0052      	lsls	r2, r2, #1
1a0006ac:	4c03      	ldr	r4, [pc, #12]	; (1a0006bc <Chip_Clock_FindBaseClock+0x44>)
1a0006ae:	4422      	add	r2, r4
1a0006b0:	7914      	ldrb	r4, [r2, #4]
1a0006b2:	428c      	cmp	r4, r1
1a0006b4:	d1e4      	bne.n	1a000680 <Chip_Clock_FindBaseClock+0x8>
           i++;
       }
   }

   return baseclk;
}
1a0006b6:	4608      	mov	r0, r1
1a0006b8:	bc30      	pop	{r4, r5}
1a0006ba:	4770      	bx	lr
1a0006bc:	1a001980 	.word	0x1a001980

1a0006c0 <Chip_Clock_EnableCrystal>:
 * Public functions
 ****************************************************************************/

/* Enables the crystal oscillator */
void Chip_Clock_EnableCrystal(void)
{
1a0006c0:	b082      	sub	sp, #8
   volatile uint32_t delay = 1000;
1a0006c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
1a0006c6:	9301      	str	r3, [sp, #4]

   uint32_t OldCrystalConfig = LPC_CGU->XTAL_OSC_CTRL;
1a0006c8:	4a0d      	ldr	r2, [pc, #52]	; (1a000700 <Chip_Clock_EnableCrystal+0x40>)
1a0006ca:	6993      	ldr	r3, [r2, #24]

   /* Clear bypass mode */
   OldCrystalConfig &= (~2);
1a0006cc:	f023 0102 	bic.w	r1, r3, #2
   if (OldCrystalConfig != LPC_CGU->XTAL_OSC_CTRL) {
1a0006d0:	6992      	ldr	r2, [r2, #24]
1a0006d2:	428a      	cmp	r2, r1
1a0006d4:	d001      	beq.n	1a0006da <Chip_Clock_EnableCrystal+0x1a>
       LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a0006d6:	4a0a      	ldr	r2, [pc, #40]	; (1a000700 <Chip_Clock_EnableCrystal+0x40>)
1a0006d8:	6191      	str	r1, [r2, #24]
   }

   /* Enable crystal oscillator */
   OldCrystalConfig &= (~1);
1a0006da:	f023 0303 	bic.w	r3, r3, #3
   if (OscRateIn >= 20000000) {
1a0006de:	4a09      	ldr	r2, [pc, #36]	; (1a000704 <Chip_Clock_EnableCrystal+0x44>)
1a0006e0:	6811      	ldr	r1, [r2, #0]
1a0006e2:	4a09      	ldr	r2, [pc, #36]	; (1a000708 <Chip_Clock_EnableCrystal+0x48>)
1a0006e4:	4291      	cmp	r1, r2
1a0006e6:	d901      	bls.n	1a0006ec <Chip_Clock_EnableCrystal+0x2c>
       OldCrystalConfig |= 4;  /* Set high frequency mode */
1a0006e8:	f043 0304 	orr.w	r3, r3, #4

   }
   LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a0006ec:	4a04      	ldr	r2, [pc, #16]	; (1a000700 <Chip_Clock_EnableCrystal+0x40>)
1a0006ee:	6193      	str	r3, [r2, #24]

   /* Delay for 250uSec */
   while(delay--) {}
1a0006f0:	9b01      	ldr	r3, [sp, #4]
1a0006f2:	1e5a      	subs	r2, r3, #1
1a0006f4:	9201      	str	r2, [sp, #4]
1a0006f6:	2b00      	cmp	r3, #0
1a0006f8:	d1fa      	bne.n	1a0006f0 <Chip_Clock_EnableCrystal+0x30>
}
1a0006fa:	b002      	add	sp, #8
1a0006fc:	4770      	bx	lr
1a0006fe:	bf00      	nop
1a000700:	40050000 	.word	0x40050000
1a000704:	1a001a34 	.word	0x1a001a34
1a000708:	01312cff 	.word	0x01312cff

1a00070c <Chip_Clock_GetDividerSource>:
}

/* Gets a CGU clock divider source */
CHIP_CGU_CLKIN_T Chip_Clock_GetDividerSource(CHIP_CGU_IDIV_T Divider)
{
   uint32_t reg = LPC_CGU->IDIV_CTRL[Divider];
1a00070c:	3012      	adds	r0, #18
1a00070e:	4b05      	ldr	r3, [pc, #20]	; (1a000724 <Chip_Clock_GetDividerSource+0x18>)
1a000710:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

   if (reg & 1) {  /* divider is powered down */
1a000714:	f010 0f01 	tst.w	r0, #1
1a000718:	d102      	bne.n	1a000720 <Chip_Clock_GetDividerSource+0x14>
       return CLKINPUT_PD;
   }

   return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a00071a:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a00071e:	4770      	bx	lr
CHIP_CGU_CLKIN_T Chip_Clock_GetDividerSource(CHIP_CGU_IDIV_T Divider)
{
   uint32_t reg = LPC_CGU->IDIV_CTRL[Divider];

   if (reg & 1) {  /* divider is powered down */
       return CLKINPUT_PD;
1a000720:	2011      	movs	r0, #17
   }

   return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
}
1a000722:	4770      	bx	lr
1a000724:	40050000 	.word	0x40050000

1a000728 <Chip_Clock_GetDividerDivisor>:

/* Gets a CGU clock divider divisor */
uint32_t Chip_Clock_GetDividerDivisor(CHIP_CGU_IDIV_T Divider)
{
   return (CHIP_CGU_CLKIN_T) ((LPC_CGU->IDIV_CTRL[Divider] >> 2) & CHIP_CGU_IDIV_MASK(Divider));
1a000728:	f100 0212 	add.w	r2, r0, #18
1a00072c:	4b03      	ldr	r3, [pc, #12]	; (1a00073c <Chip_Clock_GetDividerDivisor+0x14>)
1a00072e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
1a000732:	4b03      	ldr	r3, [pc, #12]	; (1a000740 <Chip_Clock_GetDividerDivisor+0x18>)
1a000734:	5c18      	ldrb	r0, [r3, r0]
}
1a000736:	ea00 0092 	and.w	r0, r0, r2, lsr #2
1a00073a:	4770      	bx	lr
1a00073c:	40050000 	.word	0x40050000
1a000740:	1a001978 	.word	0x1a001978

1a000744 <Chip_Clock_GetClockInputHz>:

/* Returns the frequency of the specified input clock source */
uint32_t Chip_Clock_GetClockInputHz(CHIP_CGU_CLKIN_T input)
{
1a000744:	b508      	push	{r3, lr}
   uint32_t rate = 0;

   switch (input) {
1a000746:	2810      	cmp	r0, #16
1a000748:	d80a      	bhi.n	1a000760 <Chip_Clock_GetClockInputHz+0x1c>
1a00074a:	e8df f000 	tbb	[pc, r0]
1a00074e:	0b42      	.short	0x0b42
1a000750:	091f160d 	.word	0x091f160d
1a000754:	2b282522 	.word	0x2b282522
1a000758:	322e0909 	.word	0x322e0909
1a00075c:	3a36      	.short	0x3a36
1a00075e:	3e          	.byte	0x3e
1a00075f:	00          	.byte	0x00
}

/* Returns the frequency of the specified input clock source */
uint32_t Chip_Clock_GetClockInputHz(CHIP_CGU_CLKIN_T input)
{
   uint32_t rate = 0;
1a000760:	2000      	movs	r0, #0
1a000762:	bd08      	pop	{r3, pc}
   case CLKIN_32K:
       rate = CRYSTAL_32K_FREQ_IN;
       break;

   case CLKIN_IRC:
       rate = CGU_IRC_FREQ;
1a000764:	481e      	ldr	r0, [pc, #120]	; (1a0007e0 <Chip_Clock_GetClockInputHz+0x9c>)
       break;
1a000766:	bd08      	pop	{r3, pc}

   case CLKIN_ENET_RX:
       if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a000768:	4b1e      	ldr	r3, [pc, #120]	; (1a0007e4 <Chip_Clock_GetClockInputHz+0xa0>)
1a00076a:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a00076e:	f003 0307 	and.w	r3, r3, #7
1a000772:	2b04      	cmp	r3, #4
1a000774:	d130      	bne.n	1a0007d8 <Chip_Clock_GetClockInputHz+0x94>
}

/* Returns the frequency of the specified input clock source */
uint32_t Chip_Clock_GetClockInputHz(CHIP_CGU_CLKIN_T input)
{
   uint32_t rate = 0;
1a000776:	2000      	movs	r0, #0
1a000778:	bd08      	pop	{r3, pc}
           rate = 25000000;
       }
       break;

   case CLKIN_ENET_TX:
       if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a00077a:	4b1a      	ldr	r3, [pc, #104]	; (1a0007e4 <Chip_Clock_GetClockInputHz+0xa0>)
1a00077c:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a000780:	f003 0307 	and.w	r3, r3, #7
1a000784:	2b04      	cmp	r3, #4
1a000786:	d029      	beq.n	1a0007dc <Chip_Clock_GetClockInputHz+0x98>
           rate = 25000000; /* MII uses 25 MHz */
1a000788:	4817      	ldr	r0, [pc, #92]	; (1a0007e8 <Chip_Clock_GetClockInputHz+0xa4>)
1a00078a:	bd08      	pop	{r3, pc}
           rate = 50000000; /* RMII uses 50 MHz */
       }
       break;

   case CLKIN_CLKIN:
       rate = ExtRateIn;
1a00078c:	4b17      	ldr	r3, [pc, #92]	; (1a0007ec <Chip_Clock_GetClockInputHz+0xa8>)
1a00078e:	6818      	ldr	r0, [r3, #0]
       break;
1a000790:	bd08      	pop	{r3, pc}

   case CLKIN_CRYSTAL:
       rate = OscRateIn;
1a000792:	4b17      	ldr	r3, [pc, #92]	; (1a0007f0 <Chip_Clock_GetClockInputHz+0xac>)
1a000794:	6818      	ldr	r0, [r3, #0]
       break;
1a000796:	bd08      	pop	{r3, pc}

   case CLKIN_USBPLL:
       rate = audio_usb_pll_freq[CGU_USB_PLL];
1a000798:	4b16      	ldr	r3, [pc, #88]	; (1a0007f4 <Chip_Clock_GetClockInputHz+0xb0>)
1a00079a:	6818      	ldr	r0, [r3, #0]
       break;
1a00079c:	bd08      	pop	{r3, pc}

   case CLKIN_AUDIOPLL:
       rate = audio_usb_pll_freq[CGU_AUDIO_PLL];
1a00079e:	4b15      	ldr	r3, [pc, #84]	; (1a0007f4 <Chip_Clock_GetClockInputHz+0xb0>)
1a0007a0:	6858      	ldr	r0, [r3, #4]
       break;
1a0007a2:	bd08      	pop	{r3, pc}

   case CLKIN_MAINPLL:
       rate = Chip_Clock_GetMainPLLHz();
1a0007a4:	f000 f86a 	bl	1a00087c <Chip_Clock_GetMainPLLHz>
       break;
1a0007a8:	bd08      	pop	{r3, pc}

   case CLKIN_IDIVA:
       rate = Chip_Clock_GetDivRate(input, CLK_IDIV_A);
1a0007aa:	2100      	movs	r1, #0
1a0007ac:	f000 f89a 	bl	1a0008e4 <Chip_Clock_GetDivRate>
       break;
1a0007b0:	bd08      	pop	{r3, pc}

   case CLKIN_IDIVB:
       rate = Chip_Clock_GetDivRate(input, CLK_IDIV_B);
1a0007b2:	2101      	movs	r1, #1
1a0007b4:	f000 f896 	bl	1a0008e4 <Chip_Clock_GetDivRate>
       break;
1a0007b8:	bd08      	pop	{r3, pc}

   case CLKIN_IDIVC:
       rate = Chip_Clock_GetDivRate(input, CLK_IDIV_C);
1a0007ba:	2102      	movs	r1, #2
1a0007bc:	f000 f892 	bl	1a0008e4 <Chip_Clock_GetDivRate>
       break;
1a0007c0:	bd08      	pop	{r3, pc}

   case CLKIN_IDIVD:
       rate = Chip_Clock_GetDivRate(input, CLK_IDIV_D);
1a0007c2:	2103      	movs	r1, #3
1a0007c4:	f000 f88e 	bl	1a0008e4 <Chip_Clock_GetDivRate>
       break;
1a0007c8:	bd08      	pop	{r3, pc}

   case CLKIN_IDIVE:
       rate = Chip_Clock_GetDivRate(input, CLK_IDIV_E);
1a0007ca:	2104      	movs	r1, #4
1a0007cc:	f000 f88a 	bl	1a0008e4 <Chip_Clock_GetDivRate>
       break;
1a0007d0:	bd08      	pop	{r3, pc}
{
   uint32_t rate = 0;

   switch (input) {
   case CLKIN_32K:
       rate = CRYSTAL_32K_FREQ_IN;
1a0007d2:	f44f 4000 	mov.w	r0, #32768	; 0x8000
1a0007d6:	bd08      	pop	{r3, pc}
       break;

   case CLKIN_ENET_RX:
       if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
           /* MII mode requires 25MHz clock */
           rate = 25000000;
1a0007d8:	4803      	ldr	r0, [pc, #12]	; (1a0007e8 <Chip_Clock_GetClockInputHz+0xa4>)
1a0007da:	bd08      	pop	{r3, pc}

   case CLKIN_ENET_TX:
       if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
           rate = 25000000; /* MII uses 25 MHz */
       } else {
           rate = 50000000; /* RMII uses 50 MHz */
1a0007dc:	4806      	ldr	r0, [pc, #24]	; (1a0007f8 <Chip_Clock_GetClockInputHz+0xb4>)
   default:
       break;
   }

   return rate;
}
1a0007de:	bd08      	pop	{r3, pc}
1a0007e0:	00b71b00 	.word	0x00b71b00
1a0007e4:	40043000 	.word	0x40043000
1a0007e8:	017d7840 	.word	0x017d7840
1a0007ec:	1a001a38 	.word	0x1a001a38
1a0007f0:	1a001a34 	.word	0x1a001a34
1a0007f4:	10000048 	.word	0x10000048
1a0007f8:	02faf080 	.word	0x02faf080

1a0007fc <Chip_Clock_CalcMainPLLValue>:
   while(delay--) {}
}

/* Calculate the Main PLL div values */
int Chip_Clock_CalcMainPLLValue(uint32_t freq, PLL_PARAM_T *ppll)
{
1a0007fc:	b538      	push	{r3, r4, r5, lr}
1a0007fe:	4605      	mov	r5, r0
1a000800:	460c      	mov	r4, r1
   ppll->fin = Chip_Clock_GetClockInputHz(ppll->srcin);
1a000802:	7908      	ldrb	r0, [r1, #4]
1a000804:	f7ff ff9e 	bl	1a000744 <Chip_Clock_GetClockInputHz>
1a000808:	6160      	str	r0, [r4, #20]

   /* Do sanity check on frequency */
   if (freq > MAX_CLOCK_FREQ || freq < (PLL_MIN_CCO_FREQ / 16) || !ppll->fin) {
1a00080a:	4b19      	ldr	r3, [pc, #100]	; (1a000870 <Chip_Clock_CalcMainPLLValue+0x74>)
1a00080c:	442b      	add	r3, r5
1a00080e:	4a19      	ldr	r2, [pc, #100]	; (1a000874 <Chip_Clock_CalcMainPLLValue+0x78>)
1a000810:	4293      	cmp	r3, r2
1a000812:	d821      	bhi.n	1a000858 <Chip_Clock_CalcMainPLLValue+0x5c>
1a000814:	b318      	cbz	r0, 1a00085e <Chip_Clock_CalcMainPLLValue+0x62>
       return -1;
   }

   ppll->ctrl = 1 << 7; /* Enable direct mode [If possible] */
1a000816:	2380      	movs	r3, #128	; 0x80
1a000818:	6023      	str	r3, [r4, #0]
   ppll->nsel = 0;
1a00081a:	2300      	movs	r3, #0
1a00081c:	60a3      	str	r3, [r4, #8]
   ppll->psel = 0;
1a00081e:	60e3      	str	r3, [r4, #12]
   ppll->msel = freq / ppll->fin;
1a000820:	fbb5 f3f0 	udiv	r3, r5, r0
1a000824:	6123      	str	r3, [r4, #16]

   if (freq < PLL_MIN_CCO_FREQ || ppll->msel * ppll->fin != freq) {
1a000826:	4a14      	ldr	r2, [pc, #80]	; (1a000878 <Chip_Clock_CalcMainPLLValue+0x7c>)
1a000828:	4295      	cmp	r5, r2
1a00082a:	d903      	bls.n	1a000834 <Chip_Clock_CalcMainPLLValue+0x38>
1a00082c:	fb03 f000 	mul.w	r0, r3, r0
1a000830:	42a8      	cmp	r0, r5
1a000832:	d007      	beq.n	1a000844 <Chip_Clock_CalcMainPLLValue+0x48>
       pll_get_frac(freq, ppll);
1a000834:	4628      	mov	r0, r5
1a000836:	4621      	mov	r1, r4
1a000838:	f7ff fea0 	bl	1a00057c <pll_get_frac>
       if (!ppll->nsel) {
1a00083c:	68a3      	ldr	r3, [r4, #8]
1a00083e:	b18b      	cbz	r3, 1a000864 <Chip_Clock_CalcMainPLLValue+0x68>
           return -1;
       }
       ppll->nsel --;
1a000840:	3b01      	subs	r3, #1
1a000842:	60a3      	str	r3, [r4, #8]
   }

   if (ppll->msel == 0) {
1a000844:	6923      	ldr	r3, [r4, #16]
1a000846:	b183      	cbz	r3, 1a00086a <Chip_Clock_CalcMainPLLValue+0x6e>
       return - 1;
   }

   if (ppll->psel) {
1a000848:	68e2      	ldr	r2, [r4, #12]
1a00084a:	b10a      	cbz	r2, 1a000850 <Chip_Clock_CalcMainPLLValue+0x54>
       ppll->psel --;
1a00084c:	3a01      	subs	r2, #1
1a00084e:	60e2      	str	r2, [r4, #12]
   }

   ppll->msel --;
1a000850:	3b01      	subs	r3, #1
1a000852:	6123      	str	r3, [r4, #16]

   return 0;
1a000854:	2000      	movs	r0, #0
1a000856:	bd38      	pop	{r3, r4, r5, pc}
{
   ppll->fin = Chip_Clock_GetClockInputHz(ppll->srcin);

   /* Do sanity check on frequency */
   if (freq > MAX_CLOCK_FREQ || freq < (PLL_MIN_CCO_FREQ / 16) || !ppll->fin) {
       return -1;
1a000858:	f04f 30ff 	mov.w	r0, #4294967295
1a00085c:	bd38      	pop	{r3, r4, r5, pc}
1a00085e:	f04f 30ff 	mov.w	r0, #4294967295
1a000862:	bd38      	pop	{r3, r4, r5, pc}
   ppll->msel = freq / ppll->fin;

   if (freq < PLL_MIN_CCO_FREQ || ppll->msel * ppll->fin != freq) {
       pll_get_frac(freq, ppll);
       if (!ppll->nsel) {
           return -1;
1a000864:	f04f 30ff 	mov.w	r0, #4294967295
1a000868:	bd38      	pop	{r3, r4, r5, pc}
       }
       ppll->nsel --;
   }

   if (ppll->msel == 0) {
       return - 1;
1a00086a:	f04f 30ff 	mov.w	r0, #4294967295
   }

   ppll->msel --;

   return 0;
}
1a00086e:	bd38      	pop	{r3, r4, r5, pc}
1a000870:	ff6b3a10 	.word	0xff6b3a10
1a000874:	0b940510 	.word	0x0b940510
1a000878:	094c5eff 	.word	0x094c5eff

1a00087c <Chip_Clock_GetMainPLLHz>:
   return freq;
}

/* Returns the frequency of the main PLL */
uint32_t Chip_Clock_GetMainPLLHz(void)
{
1a00087c:	b570      	push	{r4, r5, r6, lr}
1a00087e:	b082      	sub	sp, #8
   uint32_t PLLReg = LPC_CGU->PLL1_CTRL;
1a000880:	4d16      	ldr	r5, [pc, #88]	; (1a0008dc <Chip_Clock_GetMainPLLHz+0x60>)
1a000882:	6c6c      	ldr	r4, [r5, #68]	; 0x44
   uint32_t freq = Chip_Clock_GetClockInputHz((CHIP_CGU_CLKIN_T) ((PLLReg >> 24) & 0xF));
1a000884:	f3c4 6003 	ubfx	r0, r4, #24, #4
1a000888:	f7ff ff5c 	bl	1a000744 <Chip_Clock_GetClockInputHz>
1a00088c:	4606      	mov	r6, r0
   uint32_t msel, nsel, psel, direct, fbsel;
   uint32_t m, n, p;
   const uint8_t ptab[] = {1, 2, 4, 8};
1a00088e:	4b14      	ldr	r3, [pc, #80]	; (1a0008e0 <Chip_Clock_GetMainPLLHz+0x64>)
1a000890:	6818      	ldr	r0, [r3, #0]
1a000892:	9001      	str	r0, [sp, #4]

   /* No lock? */
   if (!(LPC_CGU->PLL1_STAT & 1)) {
1a000894:	6c28      	ldr	r0, [r5, #64]	; 0x40
1a000896:	f010 0001 	ands.w	r0, r0, #1
1a00089a:	d01d      	beq.n	1a0008d8 <Chip_Clock_GetMainPLLHz+0x5c>
       return 0;
   }

   msel = (PLLReg >> 16) & 0xFF;
1a00089c:	f3c4 4007 	ubfx	r0, r4, #16, #8
   nsel = (PLLReg >> 12) & 0x3;
1a0008a0:	f3c4 3201 	ubfx	r2, r4, #12, #2
   psel = (PLLReg >> 8) & 0x3;
1a0008a4:	f3c4 2101 	ubfx	r1, r4, #8, #2
   direct = (PLLReg >> 7) & 0x1;
   fbsel = (PLLReg >> 6) & 0x1;
1a0008a8:	f3c4 1580 	ubfx	r5, r4, #6, #1

   m = msel + 1;
1a0008ac:	1c43      	adds	r3, r0, #1
   n = nsel + 1;
1a0008ae:	3201      	adds	r2, #1
   p = ptab[psel];
1a0008b0:	a802      	add	r0, sp, #8
1a0008b2:	4401      	add	r1, r0
1a0008b4:	f811 0c04 	ldrb.w	r0, [r1, #-4]

   if (direct || fbsel) {
1a0008b8:	f014 0f80 	tst.w	r4, #128	; 0x80
1a0008bc:	d100      	bne.n	1a0008c0 <Chip_Clock_GetMainPLLHz+0x44>
1a0008be:	b125      	cbz	r5, 1a0008ca <Chip_Clock_GetMainPLLHz+0x4e>
       return m * (freq / n);
1a0008c0:	fbb6 f0f2 	udiv	r0, r6, r2
1a0008c4:	fb03 f000 	mul.w	r0, r3, r0
1a0008c8:	e006      	b.n	1a0008d8 <Chip_Clock_GetMainPLLHz+0x5c>
   }

   return (m / (2 * p)) * (freq / n);
1a0008ca:	0040      	lsls	r0, r0, #1
1a0008cc:	fbb3 f3f0 	udiv	r3, r3, r0
1a0008d0:	fbb6 f0f2 	udiv	r0, r6, r2
1a0008d4:	fb00 f003 	mul.w	r0, r0, r3
}
1a0008d8:	b002      	add	sp, #8
1a0008da:	bd70      	pop	{r4, r5, r6, pc}
1a0008dc:	40050000 	.word	0x40050000
1a0008e0:	1a001974 	.word	0x1a001974

1a0008e4 <Chip_Clock_GetDivRate>:
   return TestHz;
}

/* Returns clock rate out of a divider */
static uint32_t Chip_Clock_GetDivRate(CHIP_CGU_CLKIN_T clock, CHIP_CGU_IDIV_T divider)
{
1a0008e4:	b538      	push	{r3, r4, r5, lr}
1a0008e6:	460c      	mov	r4, r1
   CHIP_CGU_CLKIN_T input;
   uint32_t div;

   input = Chip_Clock_GetDividerSource(divider);
1a0008e8:	4608      	mov	r0, r1
1a0008ea:	f7ff ff0f 	bl	1a00070c <Chip_Clock_GetDividerSource>
1a0008ee:	4605      	mov	r5, r0
   div = Chip_Clock_GetDividerDivisor(divider);
1a0008f0:	4620      	mov	r0, r4
1a0008f2:	f7ff ff19 	bl	1a000728 <Chip_Clock_GetDividerDivisor>
1a0008f6:	4604      	mov	r4, r0
   return Chip_Clock_GetClockInputHz(input) / (div + 1);
1a0008f8:	4628      	mov	r0, r5
1a0008fa:	f7ff ff23 	bl	1a000744 <Chip_Clock_GetClockInputHz>
1a0008fe:	3401      	adds	r4, #1
}
1a000900:	fbb0 f0f4 	udiv	r0, r0, r4
1a000904:	bd38      	pop	{r3, r4, r5, pc}
1a000906:	bf00      	nop

1a000908 <Chip_Clock_SetBaseClock>:
   return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
}

/* Sets a CGU Base Clock clock source */
void Chip_Clock_SetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock, CHIP_CGU_CLKIN_T Input, bool autoblocken, bool powerdn)
{
1a000908:	b430      	push	{r4, r5}
   uint32_t reg = LPC_CGU->BASE_CLK[BaseClock];
1a00090a:	0085      	lsls	r5, r0, #2
1a00090c:	4c0d      	ldr	r4, [pc, #52]	; (1a000944 <Chip_Clock_SetBaseClock+0x3c>)
1a00090e:	5965      	ldr	r5, [r4, r5]

   if (BaseClock < CLK_BASE_NONE) {
1a000910:	281b      	cmp	r0, #27
1a000912:	d80f      	bhi.n	1a000934 <Chip_Clock_SetBaseClock+0x2c>
       if (Input != CLKINPUT_PD) {
1a000914:	2911      	cmp	r1, #17
1a000916:	d012      	beq.n	1a00093e <Chip_Clock_SetBaseClock+0x36>
           /* Mask off fields we plan to update */
           reg &= ~((0x1F << 24) | 1 | (1 << 11));
1a000918:	4c0b      	ldr	r4, [pc, #44]	; (1a000948 <Chip_Clock_SetBaseClock+0x40>)
1a00091a:	402c      	ands	r4, r5

           if (autoblocken) {
1a00091c:	b10a      	cbz	r2, 1a000922 <Chip_Clock_SetBaseClock+0x1a>
               reg |= (1 << 11);
1a00091e:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
           }
           if (powerdn) {
1a000922:	b10b      	cbz	r3, 1a000928 <Chip_Clock_SetBaseClock+0x20>
               reg |= (1 << 0);
1a000924:	f044 0401 	orr.w	r4, r4, #1
           }

           /* Set clock source */
           reg |= (Input << 24);
1a000928:	ea44 6401 	orr.w	r4, r4, r1, lsl #24

           LPC_CGU->BASE_CLK[BaseClock] = reg;
1a00092c:	0080      	lsls	r0, r0, #2
1a00092e:	4b05      	ldr	r3, [pc, #20]	; (1a000944 <Chip_Clock_SetBaseClock+0x3c>)
1a000930:	501c      	str	r4, [r3, r0]
1a000932:	e004      	b.n	1a00093e <Chip_Clock_SetBaseClock+0x36>
       }
   }
   else {
       LPC_CGU->BASE_CLK[BaseClock] = reg | 1; /* Power down this base clock */
1a000934:	f045 0501 	orr.w	r5, r5, #1
1a000938:	0080      	lsls	r0, r0, #2
1a00093a:	4b02      	ldr	r3, [pc, #8]	; (1a000944 <Chip_Clock_SetBaseClock+0x3c>)
1a00093c:	501d      	str	r5, [r3, r0]
   }
}
1a00093e:	bc30      	pop	{r4, r5}
1a000940:	4770      	bx	lr
1a000942:	bf00      	nop
1a000944:	4005005c 	.word	0x4005005c
1a000948:	e0fff7fe 	.word	0xe0fff7fe

1a00094c <Chip_Clock_GetBaseClock>:
/* Gets a CGU Base Clock clock source */
CHIP_CGU_CLKIN_T Chip_Clock_GetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock)
{
   uint32_t reg;

   if (BaseClock >= CLK_BASE_NONE) {
1a00094c:	281b      	cmp	r0, #27
1a00094e:	d808      	bhi.n	1a000962 <Chip_Clock_GetBaseClock+0x16>
       return CLKINPUT_PD;
   }

   reg = LPC_CGU->BASE_CLK[BaseClock];
1a000950:	0080      	lsls	r0, r0, #2
1a000952:	4b06      	ldr	r3, [pc, #24]	; (1a00096c <Chip_Clock_GetBaseClock+0x20>)
1a000954:	5818      	ldr	r0, [r3, r0]

   /* base clock is powered down? */
   if (reg & 1) {
1a000956:	f010 0f01 	tst.w	r0, #1
1a00095a:	d104      	bne.n	1a000966 <Chip_Clock_GetBaseClock+0x1a>
       return CLKINPUT_PD;
   }

   return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a00095c:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a000960:	4770      	bx	lr
CHIP_CGU_CLKIN_T Chip_Clock_GetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock)
{
   uint32_t reg;

   if (BaseClock >= CLK_BASE_NONE) {
       return CLKINPUT_PD;
1a000962:	2011      	movs	r0, #17
1a000964:	4770      	bx	lr

   reg = LPC_CGU->BASE_CLK[BaseClock];

   /* base clock is powered down? */
   if (reg & 1) {
       return CLKINPUT_PD;
1a000966:	2011      	movs	r0, #17
   }

   return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
}
1a000968:	4770      	bx	lr
1a00096a:	bf00      	nop
1a00096c:	4005005c 	.word	0x4005005c

1a000970 <Chip_Clock_GetBaseClocktHz>:
   return rate;
}

/* Returns the frequency of the specified base clock source */
uint32_t Chip_Clock_GetBaseClocktHz(CHIP_CGU_BASE_CLK_T clock)
{
1a000970:	b508      	push	{r3, lr}
   return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
1a000972:	f7ff ffeb 	bl	1a00094c <Chip_Clock_GetBaseClock>
1a000976:	f7ff fee5 	bl	1a000744 <Chip_Clock_GetClockInputHz>
}
1a00097a:	bd08      	pop	{r3, pc}

1a00097c <Chip_Clock_EnableOpts>:
/* Enables a peripheral clock and sets clock states */
void Chip_Clock_EnableOpts(CHIP_CCU_CLK_T clk, bool autoen, bool wakeupen, int div)
{
   uint32_t reg = 1;

   if (autoen) {
1a00097c:	b909      	cbnz	r1, 1a000982 <Chip_Clock_EnableOpts+0x6>
}

/* Enables a peripheral clock and sets clock states */
void Chip_Clock_EnableOpts(CHIP_CCU_CLK_T clk, bool autoen, bool wakeupen, int div)
{
   uint32_t reg = 1;
1a00097e:	2101      	movs	r1, #1
1a000980:	e000      	b.n	1a000984 <Chip_Clock_EnableOpts+0x8>

   if (autoen) {
       reg |= (1 << 1);
1a000982:	2103      	movs	r1, #3
   }
   if (wakeupen) {
1a000984:	b10a      	cbz	r2, 1a00098a <Chip_Clock_EnableOpts+0xe>
       reg |= (1 << 2);
1a000986:	f041 0104 	orr.w	r1, r1, #4
   }

   /* Not all clocks support a divider, but we won't check that here. Only
      dividers of 1 and 2 are allowed. Assume 1 if not 2 */
   if (div == 2) {
1a00098a:	2b02      	cmp	r3, #2
1a00098c:	d101      	bne.n	1a000992 <Chip_Clock_EnableOpts+0x16>
       reg |= (1 << 5);
1a00098e:	f041 0120 	orr.w	r1, r1, #32
   }

   /* Setup peripheral clock and start running */
   if (clk >= CLK_CCU2_START) {
1a000992:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a000996:	d305      	bcc.n	1a0009a4 <Chip_Clock_EnableOpts+0x28>
       LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG = reg;
1a000998:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a00099c:	4b04      	ldr	r3, [pc, #16]	; (1a0009b0 <Chip_Clock_EnableOpts+0x34>)
1a00099e:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
1a0009a2:	4770      	bx	lr
   }
   else {
       LPC_CCU1->CLKCCU[clk].CFG = reg;
1a0009a4:	3020      	adds	r0, #32
1a0009a6:	4b03      	ldr	r3, [pc, #12]	; (1a0009b4 <Chip_Clock_EnableOpts+0x38>)
1a0009a8:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
1a0009ac:	4770      	bx	lr
1a0009ae:	bf00      	nop
1a0009b0:	40052000 	.word	0x40052000
1a0009b4:	40051000 	.word	0x40051000

1a0009b8 <Chip_Clock_GetRate>:
   LPC_CCU2->PM = 0;
}

/* Returns a peripheral clock rate */
uint32_t Chip_Clock_GetRate(CHIP_CCU_CLK_T clk)
{
1a0009b8:	b510      	push	{r4, lr}
   CHIP_CGU_BASE_CLK_T baseclk;
   uint32_t reg, div, rate;

   /* Get CCU config register for clock */
   if (clk >= CLK_CCU2_START) {
1a0009ba:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a0009be:	d305      	bcc.n	1a0009cc <Chip_Clock_GetRate+0x14>
       reg = LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG;
1a0009c0:	f5a0 7391 	sub.w	r3, r0, #290	; 0x122
1a0009c4:	4a0d      	ldr	r2, [pc, #52]	; (1a0009fc <Chip_Clock_GetRate+0x44>)
1a0009c6:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
1a0009ca:	e004      	b.n	1a0009d6 <Chip_Clock_GetRate+0x1e>
   }
   else {
       reg = LPC_CCU1->CLKCCU[clk].CFG;
1a0009cc:	f100 0320 	add.w	r3, r0, #32
1a0009d0:	4a0b      	ldr	r2, [pc, #44]	; (1a000a00 <Chip_Clock_GetRate+0x48>)
1a0009d2:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
   }

   /* Is the clock enabled? */
   if (reg & 1) {
1a0009d6:	f014 0f01 	tst.w	r4, #1
1a0009da:	d00c      	beq.n	1a0009f6 <Chip_Clock_GetRate+0x3e>
       /* Get base clock for this peripheral clock */
       baseclk = Chip_Clock_FindBaseClock(clk);
1a0009dc:	f7ff fe4c 	bl	1a000678 <Chip_Clock_FindBaseClock>

       /* Get base clock rate */
       rate = Chip_Clock_GetBaseClocktHz(baseclk);
1a0009e0:	f7ff ffc6 	bl	1a000970 <Chip_Clock_GetBaseClocktHz>

       /* Get divider for this clock */
       if (((reg >> 5) & 0x7) == 0) {
1a0009e4:	f014 0fe0 	tst.w	r4, #224	; 0xe0
1a0009e8:	d101      	bne.n	1a0009ee <Chip_Clock_GetRate+0x36>
           div = 1;
1a0009ea:	2301      	movs	r3, #1
1a0009ec:	e000      	b.n	1a0009f0 <Chip_Clock_GetRate+0x38>
       }
       else {
           div = 2;/* No other dividers supported */
1a0009ee:	2302      	movs	r3, #2

       }
       rate = rate / div;
1a0009f0:	fbb0 f0f3 	udiv	r0, r0, r3
1a0009f4:	bd10      	pop	{r4, pc}
   }
   else {
       rate = 0;
1a0009f6:	2000      	movs	r0, #0
   }

   return rate;
}
1a0009f8:	bd10      	pop	{r4, pc}
1a0009fa:	bf00      	nop
1a0009fc:	40052000 	.word	0x40052000
1a000a00:	40051000 	.word	0x40051000

1a000a04 <Chip_SetupCoreClock>:
/*****************************************************************************
 * Public functions
 ****************************************************************************/
/* Setup Chip Core clock */
void Chip_SetupCoreClock(CHIP_CGU_CLKIN_T clkin, uint32_t core_freq, bool setbase)
{
1a000a04:	b570      	push	{r4, r5, r6, lr}
1a000a06:	b092      	sub	sp, #72	; 0x48
1a000a08:	4605      	mov	r5, r0
1a000a0a:	460e      	mov	r6, r1
1a000a0c:	4614      	mov	r4, r2
   int i;
   volatile uint32_t delay = 5500;
1a000a0e:	f241 537c 	movw	r3, #5500	; 0x157c
1a000a12:	9311      	str	r3, [sp, #68]	; 0x44
   uint32_t direct = 0;
   PLL_PARAM_T ppll;

   if (clkin == CLKIN_CRYSTAL) {
1a000a14:	2806      	cmp	r0, #6
1a000a16:	d101      	bne.n	1a000a1c <Chip_SetupCoreClock+0x18>
       /* Switch main system clocking to crystal */
       Chip_Clock_EnableCrystal();
1a000a18:	f7ff fe52 	bl	1a0006c0 <Chip_Clock_EnableCrystal>
   }
   Chip_Clock_SetBaseClock(CLK_BASE_MX, clkin, true, false);
1a000a1c:	2004      	movs	r0, #4
1a000a1e:	4629      	mov	r1, r5
1a000a20:	2201      	movs	r2, #1
1a000a22:	2300      	movs	r3, #0
1a000a24:	f7ff ff70 	bl	1a000908 <Chip_Clock_SetBaseClock>
 * Saves power if the main PLL is not needed.
 */
__STATIC_INLINE void Chip_Clock_DisableMainPLL(void)
{
   /* power down main PLL */
   LPC_CGU->PLL1_CTRL |= 1;
1a000a28:	4a49      	ldr	r2, [pc, #292]	; (1a000b50 <Chip_SetupCoreClock+0x14c>)
1a000a2a:	6c53      	ldr	r3, [r2, #68]	; 0x44
1a000a2c:	f043 0301 	orr.w	r3, r3, #1
1a000a30:	6453      	str	r3, [r2, #68]	; 0x44
   Chip_Clock_DisableMainPLL(); /* Disable PLL */

   /* Calculate the PLL Parameters */
   ppll.srcin = clkin;
1a000a32:	f88d 5028 	strb.w	r5, [sp, #40]	; 0x28
   Chip_Clock_CalcMainPLLValue(core_freq, &ppll);
1a000a36:	4630      	mov	r0, r6
1a000a38:	a909      	add	r1, sp, #36	; 0x24
1a000a3a:	f7ff fedf 	bl	1a0007fc <Chip_Clock_CalcMainPLLValue>

   if (core_freq > 110000000UL) {
1a000a3e:	4b45      	ldr	r3, [pc, #276]	; (1a000b54 <Chip_SetupCoreClock+0x150>)
1a000a40:	429e      	cmp	r6, r3
1a000a42:	d935      	bls.n	1a000ab0 <Chip_SetupCoreClock+0xac>
       if (!(ppll.ctrl & (1 << 7)) || ppll.psel) {
1a000a44:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a000a46:	f013 0f80 	tst.w	r3, #128	; 0x80
1a000a4a:	d001      	beq.n	1a000a50 <Chip_SetupCoreClock+0x4c>
1a000a4c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
1a000a4e:	b352      	cbz	r2, 1a000aa6 <Chip_SetupCoreClock+0xa2>
           PLL_PARAM_T lpll;
           /* Calculate the PLL Parameters */
           lpll.srcin = clkin;
1a000a50:	f88d 5008 	strb.w	r5, [sp, #8]
           Chip_Clock_CalcMainPLLValue(110000000UL, &lpll);
1a000a54:	483f      	ldr	r0, [pc, #252]	; (1a000b54 <Chip_SetupCoreClock+0x150>)
1a000a56:	a901      	add	r1, sp, #4
1a000a58:	f7ff fed0 	bl	1a0007fc <Chip_Clock_CalcMainPLLValue>
 * Make sure the main PLL is enabled.
 */
__STATIC_INLINE void Chip_Clock_SetupMainPLL(const PLL_PARAM_T *ppll)
{
   /* power up main PLL */
   LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8);
1a000a5c:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a000a60:	9b01      	ldr	r3, [sp, #4]
1a000a62:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a000a66:	9a05      	ldr	r2, [sp, #20]
1a000a68:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a000a6c:	9a03      	ldr	r2, [sp, #12]
1a000a6e:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a000a72:	9a04      	ldr	r2, [sp, #16]
1a000a74:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a000a78:	4a35      	ldr	r2, [pc, #212]	; (1a000b50 <Chip_SetupCoreClock+0x14c>)
1a000a7a:	6453      	str	r3, [r2, #68]	; 0x44
 * @note   The main PLL should be locked prior to using it as a clock input for a base clock.
 */
__STATIC_INLINE int Chip_Clock_MainPLLLocked(void)
{
   /* Return true if locked */
   return (LPC_CGU->PLL1_STAT & 1) != 0;
1a000a7c:	4b34      	ldr	r3, [pc, #208]	; (1a000b50 <Chip_SetupCoreClock+0x14c>)
1a000a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
           Chip_Clock_SetupMainPLL(&lpll);
           /* Wait for the PLL to lock */
           while(!Chip_Clock_MainPLLLocked()) {}
1a000a80:	f013 0f01 	tst.w	r3, #1
1a000a84:	d0fa      	beq.n	1a000a7c <Chip_SetupCoreClock+0x78>
           Chip_Clock_SetBaseClock(CLK_BASE_MX, CLKIN_MAINPLL, true, false);
1a000a86:	2004      	movs	r0, #4
1a000a88:	2109      	movs	r1, #9
1a000a8a:	2201      	movs	r2, #1
1a000a8c:	2300      	movs	r3, #0
1a000a8e:	f7ff ff3b 	bl	1a000908 <Chip_Clock_SetBaseClock>
           while(delay --){}
1a000a92:	9b11      	ldr	r3, [sp, #68]	; 0x44
1a000a94:	1e5a      	subs	r2, r3, #1
1a000a96:	9211      	str	r2, [sp, #68]	; 0x44
1a000a98:	2b00      	cmp	r3, #0
1a000a9a:	d1fa      	bne.n	1a000a92 <Chip_SetupCoreClock+0x8e>
           delay = 5500;
1a000a9c:	f241 537c 	movw	r3, #5500	; 0x157c
1a000aa0:	9311      	str	r3, [sp, #68]	; 0x44
/* Setup Chip Core clock */
void Chip_SetupCoreClock(CHIP_CGU_CLKIN_T clkin, uint32_t core_freq, bool setbase)
{
   int i;
   volatile uint32_t delay = 5500;
   uint32_t direct = 0;
1a000aa2:	2500      	movs	r5, #0
   /* Calculate the PLL Parameters */
   ppll.srcin = clkin;
   Chip_Clock_CalcMainPLLValue(core_freq, &ppll);

   if (core_freq > 110000000UL) {
       if (!(ppll.ctrl & (1 << 7)) || ppll.psel) {
1a000aa4:	e005      	b.n	1a000ab2 <Chip_SetupCoreClock+0xae>
           Chip_Clock_SetBaseClock(CLK_BASE_MX, CLKIN_MAINPLL, true, false);
           while(delay --){}
           delay = 5500;
       } else {
           direct = 1;
           ppll.ctrl &= ~(1 << 7);
1a000aa6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a000aaa:	9309      	str	r3, [sp, #36]	; 0x24
           while(!Chip_Clock_MainPLLLocked()) {}
           Chip_Clock_SetBaseClock(CLK_BASE_MX, CLKIN_MAINPLL, true, false);
           while(delay --){}
           delay = 5500;
       } else {
           direct = 1;
1a000aac:	2501      	movs	r5, #1
1a000aae:	e000      	b.n	1a000ab2 <Chip_SetupCoreClock+0xae>
/* Setup Chip Core clock */
void Chip_SetupCoreClock(CHIP_CGU_CLKIN_T clkin, uint32_t core_freq, bool setbase)
{
   int i;
   volatile uint32_t delay = 5500;
   uint32_t direct = 0;
1a000ab0:	2500      	movs	r5, #0
 * Make sure the main PLL is enabled.
 */
__STATIC_INLINE void Chip_Clock_SetupMainPLL(const PLL_PARAM_T *ppll)
{
   /* power up main PLL */
   LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8);
1a000ab2:	f89d 2028 	ldrb.w	r2, [sp, #40]	; 0x28
1a000ab6:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a000ab8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a000abc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
1a000abe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a000ac2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
1a000ac4:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a000ac8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
1a000aca:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a000ace:	4a20      	ldr	r2, [pc, #128]	; (1a000b50 <Chip_SetupCoreClock+0x14c>)
1a000ad0:	6453      	str	r3, [r2, #68]	; 0x44
 * @note   The main PLL should be locked prior to using it as a clock input for a base clock.
 */
__STATIC_INLINE int Chip_Clock_MainPLLLocked(void)
{
   /* Return true if locked */
   return (LPC_CGU->PLL1_STAT & 1) != 0;
1a000ad2:	4b1f      	ldr	r3, [pc, #124]	; (1a000b50 <Chip_SetupCoreClock+0x14c>)
1a000ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40

   /* Setup and start the PLL */
   Chip_Clock_SetupMainPLL(&ppll);

   /* Wait for the PLL to lock */
   while(!Chip_Clock_MainPLLLocked()) {}
1a000ad6:	f013 0f01 	tst.w	r3, #1
1a000ada:	d0fa      	beq.n	1a000ad2 <Chip_SetupCoreClock+0xce>

   /* Set core clock base as PLL1 */
   Chip_Clock_SetBaseClock(CLK_BASE_MX, CLKIN_MAINPLL, true, false);
1a000adc:	2004      	movs	r0, #4
1a000ade:	2109      	movs	r1, #9
1a000ae0:	2201      	movs	r2, #1
1a000ae2:	2300      	movs	r3, #0
1a000ae4:	f7ff ff10 	bl	1a000908 <Chip_Clock_SetBaseClock>

   while(delay --){} /* Wait for approx 50 uSec */
1a000ae8:	9b11      	ldr	r3, [sp, #68]	; 0x44
1a000aea:	1e5a      	subs	r2, r3, #1
1a000aec:	9211      	str	r2, [sp, #68]	; 0x44
1a000aee:	2b00      	cmp	r3, #0
1a000af0:	d1fa      	bne.n	1a000ae8 <Chip_SetupCoreClock+0xe4>
   if (direct) {
1a000af2:	b1d5      	cbz	r5, 1a000b2a <Chip_SetupCoreClock+0x126>
       delay = 5500;
1a000af4:	f241 537c 	movw	r3, #5500	; 0x157c
1a000af8:	9311      	str	r3, [sp, #68]	; 0x44
       ppll.ctrl |= 1 << 7;
1a000afa:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a000afc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a000b00:	9309      	str	r3, [sp, #36]	; 0x24
 * Make sure the main PLL is enabled.
 */
__STATIC_INLINE void Chip_Clock_SetupMainPLL(const PLL_PARAM_T *ppll)
{
   /* power up main PLL */
   LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8);
1a000b02:	f89d 2028 	ldrb.w	r2, [sp, #40]	; 0x28
1a000b06:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a000b0a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
1a000b0c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a000b10:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
1a000b12:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a000b16:	9a0c      	ldr	r2, [sp, #48]	; 0x30
1a000b18:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a000b1c:	4a0c      	ldr	r2, [pc, #48]	; (1a000b50 <Chip_SetupCoreClock+0x14c>)
1a000b1e:	6453      	str	r3, [r2, #68]	; 0x44
       Chip_Clock_SetupMainPLL(&ppll); /* Set DIRECT to operate at full frequency */
       while(delay --){} /* Wait for approx 50 uSec */
1a000b20:	9b11      	ldr	r3, [sp, #68]	; 0x44
1a000b22:	1e5a      	subs	r2, r3, #1
1a000b24:	9211      	str	r2, [sp, #68]	; 0x44
1a000b26:	2b00      	cmp	r3, #0
1a000b28:	d1fa      	bne.n	1a000b20 <Chip_SetupCoreClock+0x11c>
   }

   if (setbase) {
1a000b2a:	b964      	cbnz	r4, 1a000b46 <Chip_SetupCoreClock+0x142>
1a000b2c:	e00e      	b.n	1a000b4c <Chip_SetupCoreClock+0x148>
       /* Setup system base clocks and initial states. This won't enable and
          disable individual clocks, but sets up the base clock sources for
          each individual peripheral clock. */
       for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
           Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
1a000b2e:	4a0a      	ldr	r2, [pc, #40]	; (1a000b58 <Chip_SetupCoreClock+0x154>)
1a000b30:	eb02 0384 	add.w	r3, r2, r4, lsl #2
1a000b34:	f812 0024 	ldrb.w	r0, [r2, r4, lsl #2]
1a000b38:	7859      	ldrb	r1, [r3, #1]
1a000b3a:	789a      	ldrb	r2, [r3, #2]
1a000b3c:	78db      	ldrb	r3, [r3, #3]
1a000b3e:	f7ff fee3 	bl	1a000908 <Chip_Clock_SetBaseClock>

   if (setbase) {
       /* Setup system base clocks and initial states. This won't enable and
          disable individual clocks, but sets up the base clock sources for
          each individual peripheral clock. */
       for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a000b42:	3401      	adds	r4, #1
1a000b44:	e000      	b.n	1a000b48 <Chip_SetupCoreClock+0x144>
1a000b46:	2400      	movs	r4, #0
1a000b48:	2c11      	cmp	r4, #17
1a000b4a:	d9f0      	bls.n	1a000b2e <Chip_SetupCoreClock+0x12a>
           Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
                                   InitClkStates[i].autoblock_enab, InitClkStates[i].powerdn);
       }
   }
}
1a000b4c:	b012      	add	sp, #72	; 0x48
1a000b4e:	bd70      	pop	{r4, r5, r6, pc}
1a000b50:	40050000 	.word	0x40050000
1a000b54:	068e7780 	.word	0x068e7780
1a000b58:	1a0019ec 	.word	0x1a0019ec

1a000b5c <fpuInit>:
 * Public functions
 ****************************************************************************/

/* Early initialization of the FPU */
void fpuInit(void)
{
1a000b5c:	b084      	sub	sp, #16
   volatile uint32_t Cpacr;
   volatile uint32_t Mvfr0;
   volatile uint32_t Mvfr1;
   char vfpPresent = 0;

   Mvfr0 = *regMvfr0;
1a000b5e:	4b10      	ldr	r3, [pc, #64]	; (1a000ba0 <fpuInit+0x44>)
1a000b60:	681b      	ldr	r3, [r3, #0]
1a000b62:	9302      	str	r3, [sp, #8]
   Mvfr1 = *regMvfr1;
1a000b64:	4b0f      	ldr	r3, [pc, #60]	; (1a000ba4 <fpuInit+0x48>)
1a000b66:	681b      	ldr	r3, [r3, #0]
1a000b68:	9301      	str	r3, [sp, #4]

   vfpPresent = ((SCB_MVFR0_RESET == Mvfr0) && (SCB_MVFR1_RESET == Mvfr1));
1a000b6a:	9a02      	ldr	r2, [sp, #8]
1a000b6c:	4b0e      	ldr	r3, [pc, #56]	; (1a000ba8 <fpuInit+0x4c>)
1a000b6e:	429a      	cmp	r2, r3
1a000b70:	d105      	bne.n	1a000b7e <fpuInit+0x22>
1a000b72:	9a01      	ldr	r2, [sp, #4]
1a000b74:	4b0d      	ldr	r3, [pc, #52]	; (1a000bac <fpuInit+0x50>)
1a000b76:	429a      	cmp	r2, r3
1a000b78:	d003      	beq.n	1a000b82 <fpuInit+0x26>
1a000b7a:	2300      	movs	r3, #0
1a000b7c:	e002      	b.n	1a000b84 <fpuInit+0x28>
1a000b7e:	2300      	movs	r3, #0
1a000b80:	e000      	b.n	1a000b84 <fpuInit+0x28>
1a000b82:	2301      	movs	r3, #1

   if (vfpPresent) {
1a000b84:	f013 0fff 	tst.w	r3, #255	; 0xff
1a000b88:	d008      	beq.n	1a000b9c <fpuInit+0x40>
       Cpacr = *regCpacr;
1a000b8a:	4a09      	ldr	r2, [pc, #36]	; (1a000bb0 <fpuInit+0x54>)
1a000b8c:	6813      	ldr	r3, [r2, #0]
1a000b8e:	9303      	str	r3, [sp, #12]
       Cpacr |= (0xF << 20);
1a000b90:	9b03      	ldr	r3, [sp, #12]
1a000b92:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
1a000b96:	9303      	str	r3, [sp, #12]
       *regCpacr = Cpacr;  // enable CP10 and CP11 for full access
1a000b98:	9b03      	ldr	r3, [sp, #12]
1a000b9a:	6013      	str	r3, [r2, #0]
   }
#endif /* __FPU_PRESENT != 0 */
}
1a000b9c:	b004      	add	sp, #16
1a000b9e:	4770      	bx	lr
1a000ba0:	e000ef40 	.word	0xe000ef40
1a000ba4:	e000ef44 	.word	0xe000ef44
1a000ba8:	10110021 	.word	0x10110021
1a000bac:	11000011 	.word	0x11000011
1a000bb0:	e000ed88 	.word	0xe000ed88

1a000bb4 <Chip_GPIO_Init>:
 * Public functions
 ****************************************************************************/

/* Initialize GPIO block */
void Chip_GPIO_Init(LPC_GPIO_T *pGPIO)
{
1a000bb4:	4770      	bx	lr
1a000bb6:	bf00      	nop

1a000bb8 <Chip_GPIO_SetDir>:
}

/* Set Direction for a GPIO port */
void Chip_GPIO_SetDir(LPC_GPIO_T *pGPIO, uint8_t portNum, uint32_t bitValue, uint8_t out)
{
   if (out) {
1a000bb8:	b13b      	cbz	r3, 1a000bca <Chip_GPIO_SetDir+0x12>
       pGPIO->DIR[portNum] |= bitValue;
1a000bba:	f501 6100 	add.w	r1, r1, #2048	; 0x800
1a000bbe:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
1a000bc2:	431a      	orrs	r2, r3
1a000bc4:	f840 2021 	str.w	r2, [r0, r1, lsl #2]
1a000bc8:	4770      	bx	lr
   }
   else {
       pGPIO->DIR[portNum] &= ~bitValue;
1a000bca:	f501 6100 	add.w	r1, r1, #2048	; 0x800
1a000bce:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
1a000bd2:	ea23 0202 	bic.w	r2, r3, r2
1a000bd6:	f840 2021 	str.w	r2, [r0, r1, lsl #2]
1a000bda:	4770      	bx	lr

1a000bdc <Board_LED_Init>:
   }
#endif
}

static void Board_LED_Init()
{
1a000bdc:	b470      	push	{r4, r5, r6}
   uint32_t idx;

   for (idx = 0; idx < (sizeof(gpioLEDBits) / sizeof(io_port_t)); ++idx) {
1a000bde:	2200      	movs	r2, #0
1a000be0:	e014      	b.n	1a000c0c <Board_LED_Init+0x30>
       /* Set pin direction and init to off */
       Chip_GPIO_SetPinDIROutput(LPC_GPIO_PORT, gpioLEDBits[idx].port, gpioLEDBits[idx].pin);
1a000be2:	4b0c      	ldr	r3, [pc, #48]	; (1a000c14 <Board_LED_Init+0x38>)
1a000be4:	f813 4012 	ldrb.w	r4, [r3, r2, lsl #1]
1a000be8:	eb03 0342 	add.w	r3, r3, r2, lsl #1
1a000bec:	7859      	ldrb	r1, [r3, #1]
 * @param  pin     : GPIO pin to set direction on as output
 * @return Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIROutput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
   pGPIO->DIR[port] |= 1UL << pin;
1a000bee:	480a      	ldr	r0, [pc, #40]	; (1a000c18 <Board_LED_Init+0x3c>)
1a000bf0:	f504 6500 	add.w	r5, r4, #2048	; 0x800
1a000bf4:	f850 6025 	ldr.w	r6, [r0, r5, lsl #2]
1a000bf8:	2301      	movs	r3, #1
1a000bfa:	408b      	lsls	r3, r1
1a000bfc:	4333      	orrs	r3, r6
1a000bfe:	f840 3025 	str.w	r3, [r0, r5, lsl #2]
 * @return Nothing
 * @note   This function replaces Chip_GPIO_WritePortBit()
 */
STATIC INLINE void Chip_GPIO_SetPinState(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin, bool setting)
{
   pGPIO->B[port][pin] = setting;
1a000c02:	eb01 1144 	add.w	r1, r1, r4, lsl #5
1a000c06:	2300      	movs	r3, #0
1a000c08:	5443      	strb	r3, [r0, r1]

static void Board_LED_Init()
{
   uint32_t idx;

   for (idx = 0; idx < (sizeof(gpioLEDBits) / sizeof(io_port_t)); ++idx) {
1a000c0a:	3201      	adds	r2, #1
1a000c0c:	2a05      	cmp	r2, #5
1a000c0e:	d9e8      	bls.n	1a000be2 <Board_LED_Init+0x6>
       /* Set pin direction and init to off */
       Chip_GPIO_SetPinDIROutput(LPC_GPIO_PORT, gpioLEDBits[idx].port, gpioLEDBits[idx].pin);
       Chip_GPIO_SetPinState(LPC_GPIO_PORT, gpioLEDBits[idx].port, gpioLEDBits[idx].pin, (bool) false);
   }
}
1a000c10:	bc70      	pop	{r4, r5, r6}
1a000c12:	4770      	bx	lr
1a000c14:	1a001a3c 	.word	0x1a001a3c
1a000c18:	400f4000 	.word	0x400f4000

1a000c1c <Board_UART_Init>:
 * @note   Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMuxSet(uint8_t port, uint8_t pin, uint16_t modefunc)
{
   LPC_SCU->SFSP[port][pin] = modefunc;
1a000c1c:	4b03      	ldr	r3, [pc, #12]	; (1a000c2c <Board_UART_Init+0x10>)
1a000c1e:	2212      	movs	r2, #18
1a000c20:	f8c3 2310 	str.w	r2, [r3, #784]	; 0x310
1a000c24:	22d1      	movs	r2, #209	; 0xd1
1a000c26:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
1a000c2a:	4770      	bx	lr
1a000c2c:	40086000 	.word	0x40086000

1a000c30 <Board_Debug_Init>:
   Chip_SCU_PinMuxSet(0x2, 1, (SCU_MODE_INACT | SCU_MODE_INBUFF_EN | SCU_MODE_ZIF_DIS | SCU_MODE_FUNC1));/* P2.1 : UART0_RXD */
}

/* Initialize debug output via UART for board */
void Board_Debug_Init(void)
{
1a000c30:	b510      	push	{r4, lr}
#if defined(DEBUG_UART)
   Board_UART_Init(DEBUG_UART);
1a000c32:	4c08      	ldr	r4, [pc, #32]	; (1a000c54 <Board_Debug_Init+0x24>)
1a000c34:	4620      	mov	r0, r4
1a000c36:	f7ff fff1 	bl	1a000c1c <Board_UART_Init>

   Chip_UART_Init(DEBUG_UART);
1a000c3a:	4620      	mov	r0, r4
1a000c3c:	f7ff fba6 	bl	1a00038c <Chip_UART_Init>
   Chip_UART_SetBaudFDR(DEBUG_UART, 115200);
1a000c40:	4620      	mov	r0, r4
1a000c42:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
1a000c46:	f7ff fbc9 	bl	1a0003dc <Chip_UART_SetBaudFDR>
 *         stop bit, and even (enabled) parity would be
 *         (UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_EN | UART_LCR_PARITY_EVEN)
 */
STATIC INLINE void Chip_UART_ConfigData(LPC_USART_T *pUART, uint32_t config)
{
   pUART->LCR = config;
1a000c4a:	2303      	movs	r3, #3
1a000c4c:	60e3      	str	r3, [r4, #12]
 * @param  pUART   : Pointer to selected pUART peripheral
 * @return Nothing
 */
STATIC INLINE void Chip_UART_TXEnable(LPC_USART_T *pUART)
{
    pUART->TER2 = UART_TER2_TXEN;
1a000c4e:	2301      	movs	r3, #1
1a000c50:	65e3      	str	r3, [r4, #92]	; 0x5c
1a000c52:	bd10      	pop	{r4, pc}
1a000c54:	400c1000 	.word	0x400c1000

1a000c58 <Board_Init>:
}

/* Set up and initialize all required blocks and functions related to the
   board hardware */
void Board_Init(void)
{
1a000c58:	b508      	push	{r3, lr}
   /* Sets up DEBUG UART */
   DEBUGINIT();
1a000c5a:	f7ff ffe9 	bl	1a000c30 <Board_Debug_Init>

   /* Initializes GPIO */
   Chip_GPIO_Init(LPC_GPIO_PORT);
1a000c5e:	4806      	ldr	r0, [pc, #24]	; (1a000c78 <Board_Init+0x20>)
1a000c60:	f7ff ffa8 	bl	1a000bb4 <Chip_GPIO_Init>

   /* Initialize LEDs */
   Board_LED_Init();
1a000c64:	f7ff ffba 	bl	1a000bdc <Board_LED_Init>
 * RMII PHY, and must be called before calling any Ethernet
 * functions.
 */
STATIC INLINE void Chip_ENET_RMIIEnable(LPC_ENET_T *pENET)
{
   LPC_CREG->CREG6 |= 0x4;
1a000c68:	4a04      	ldr	r2, [pc, #16]	; (1a000c7c <Board_Init+0x24>)
1a000c6a:	f8d2 312c 	ldr.w	r3, [r2, #300]	; 0x12c
1a000c6e:	f043 0304 	orr.w	r3, r3, #4
1a000c72:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c
1a000c76:	bd08      	pop	{r3, pc}
1a000c78:	400f4000 	.word	0x400f4000
1a000c7c:	40043000 	.word	0x40043000

1a000c80 <ResetISR>:
// not debug) by setting the define 'DONT_RESET_ON_RESTART'.
//
#ifndef DONT_RESET_ON_RESTART

    // Disable interrupts
    __asm volatile ("cpsid i");
1a000c80:	b672      	cpsid	i
    // Note that we do not use the CMSIS register access mechanism,
    // as there is no guarantee that the project has been configured
    // to use CMSIS.

    // Write to LPC_RGU->RESET_CTRL0
    *(RESET_CONTROL + 0) = 0x10DF1000;
1a000c82:	4a17      	ldr	r2, [pc, #92]	; (1a000ce0 <ResetISR+0x60>)
1a000c84:	4b17      	ldr	r3, [pc, #92]	; (1a000ce4 <ResetISR+0x64>)
1a000c86:	601a      	str	r2, [r3, #0]
    // GPIO_RST|AES_RST|ETHERNET_RST|SDIO_RST|DMA_RST|
    // USB1_RST|USB0_RST|LCD_RST|M0_SUB_RST

    // Write to LPC_RGU->RESET_CTRL1
    *(RESET_CONTROL + 1) = 0x01DFF7FF;
1a000c88:	4a17      	ldr	r2, [pc, #92]	; (1a000ce8 <ResetISR+0x68>)
1a000c8a:	3304      	adds	r3, #4
1a000c8c:	601a      	str	r2, [r3, #0]
    // RITIMER_RST|TIMER3_RST|TIMER2_RST|TIMER1_RST|TIMER0_RST

    // Clear all pending interrupts in the NVIC
    volatile unsigned int *NVIC_ICPR = (unsigned int *) 0xE000E280;
    unsigned int irqpendloop;
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a000c8e:	2300      	movs	r3, #0
1a000c90:	e005      	b.n	1a000c9e <ResetISR+0x1e>
        *(NVIC_ICPR + irqpendloop) = 0xFFFFFFFF;
1a000c92:	f04f 31ff 	mov.w	r1, #4294967295
1a000c96:	4a15      	ldr	r2, [pc, #84]	; (1a000cec <ResetISR+0x6c>)
1a000c98:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    // RITIMER_RST|TIMER3_RST|TIMER2_RST|TIMER1_RST|TIMER0_RST

    // Clear all pending interrupts in the NVIC
    volatile unsigned int *NVIC_ICPR = (unsigned int *) 0xE000E280;
    unsigned int irqpendloop;
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a000c9c:	3301      	adds	r3, #1
1a000c9e:	2b07      	cmp	r3, #7
1a000ca0:	d9f7      	bls.n	1a000c92 <ResetISR+0x12>
// Reset entry point for your code.
// Sets up a simple runtime environment and initializes the C/C++
// library.
//
//*****************************************************************************
void ResetISR(void) {
1a000ca2:	b510      	push	{r4, lr}
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
        *(NVIC_ICPR + irqpendloop) = 0xFFFFFFFF;
    }

    // Reenable interrupts
    __asm volatile ("cpsie i");
1a000ca4:	b662      	cpsie	i

#endif  // ifndef DONT_RESET_ON_RESTART
// *************************************************************

#if defined (__USE_LPCOPEN)
    SystemInit();
1a000ca6:	f000 f829 	bl	1a000cfc <SystemInit>
    //
    unsigned int LoadAddr, ExeAddr, SectionLen;
    unsigned int *SectionTableAddr;

    // Load base address of Global Section Table
    SectionTableAddr = &__data_section_table;
1a000caa:	4b11      	ldr	r3, [pc, #68]	; (1a000cf0 <ResetISR+0x70>)

    // Copy the data sections from flash to SRAM.
    while (SectionTableAddr < &__data_section_table_end) {
1a000cac:	e007      	b.n	1a000cbe <ResetISR+0x3e>
        LoadAddr = *SectionTableAddr++;
        ExeAddr = *SectionTableAddr++;
        SectionLen = *SectionTableAddr++;
1a000cae:	f103 040c 	add.w	r4, r3, #12
        data_init(LoadAddr, ExeAddr, SectionLen);
1a000cb2:	6818      	ldr	r0, [r3, #0]
1a000cb4:	6859      	ldr	r1, [r3, #4]
1a000cb6:	689a      	ldr	r2, [r3, #8]
1a000cb8:	f7ff fa72 	bl	1a0001a0 <data_init>

    // Copy the data sections from flash to SRAM.
    while (SectionTableAddr < &__data_section_table_end) {
        LoadAddr = *SectionTableAddr++;
        ExeAddr = *SectionTableAddr++;
        SectionLen = *SectionTableAddr++;
1a000cbc:	4623      	mov	r3, r4

    // Load base address of Global Section Table
    SectionTableAddr = &__data_section_table;

    // Copy the data sections from flash to SRAM.
    while (SectionTableAddr < &__data_section_table_end) {
1a000cbe:	4a0d      	ldr	r2, [pc, #52]	; (1a000cf4 <ResetISR+0x74>)
1a000cc0:	4293      	cmp	r3, r2
1a000cc2:	d3f4      	bcc.n	1a000cae <ResetISR+0x2e>
1a000cc4:	e006      	b.n	1a000cd4 <ResetISR+0x54>
        data_init(LoadAddr, ExeAddr, SectionLen);
    }
    // At this point, SectionTableAddr = &__bss_section_table;
    // Zero fill the bss segment
    while (SectionTableAddr < &__bss_section_table_end) {
        ExeAddr = *SectionTableAddr++;
1a000cc6:	461c      	mov	r4, r3
        SectionLen = *SectionTableAddr++;
        bss_init(ExeAddr, SectionLen);
1a000cc8:	f854 0b08 	ldr.w	r0, [r4], #8
1a000ccc:	6859      	ldr	r1, [r3, #4]
1a000cce:	f7ff fa75 	bl	1a0001bc <bss_init>
    }
    // At this point, SectionTableAddr = &__bss_section_table;
    // Zero fill the bss segment
    while (SectionTableAddr < &__bss_section_table_end) {
        ExeAddr = *SectionTableAddr++;
        SectionLen = *SectionTableAddr++;
1a000cd2:	4623      	mov	r3, r4
        SectionLen = *SectionTableAddr++;
        data_init(LoadAddr, ExeAddr, SectionLen);
    }
    // At this point, SectionTableAddr = &__bss_section_table;
    // Zero fill the bss segment
    while (SectionTableAddr < &__bss_section_table_end) {
1a000cd4:	4a08      	ldr	r2, [pc, #32]	; (1a000cf8 <ResetISR+0x78>)
1a000cd6:	4293      	cmp	r3, r2
1a000cd8:	d3f5      	bcc.n	1a000cc6 <ResetISR+0x46>

#if defined (__REDLIB__)
    // Call the Redlib library, which in turn calls main()
    __main();
#else
    main();
1a000cda:	f7ff fb11 	bl	1a000300 <main>
    //
    // main() shouldn't return, but if it does, we'll just enter an infinite loop
    //
    while (1) {
        ;
    }
1a000cde:	e7fe      	b.n	1a000cde <ResetISR+0x5e>
1a000ce0:	10df1000 	.word	0x10df1000
1a000ce4:	40053100 	.word	0x40053100
1a000ce8:	01dff7ff 	.word	0x01dff7ff
1a000cec:	e000e280 	.word	0xe000e280
1a000cf0:	1a000114 	.word	0x1a000114
1a000cf4:	1a000150 	.word	0x1a000150
1a000cf8:	1a000178 	.word	0x1a000178

1a000cfc <SystemInit>:
 * Public functions
 ****************************************************************************/

/* Set up and initialize hardware prior to call to main */
void SystemInit(void)
{
1a000cfc:	b508      	push	{r3, lr}

   *pSCB_VTOR = (unsigned int) &__Vectors;
#endif

#if defined(__FPU_PRESENT) && __FPU_PRESENT == 1
   fpuInit();
1a000cfe:	f7ff ff2d 	bl	1a000b5c <fpuInit>
#if defined(NO_BOARD_LIB)
   /* Chip specific SystemInit */
   Chip_SystemInit();
#else
   /* Board specific SystemInit */
   Board_SystemInit();
1a000d02:	f000 f851 	bl	1a000da8 <Board_SystemInit>
1a000d06:	bd08      	pop	{r3, pc}

1a000d08 <Board_SetupMuxing>:
 * Public functions
 ****************************************************************************/

/* Sets up system pin muxing */
void Board_SetupMuxing(void)
{
1a000d08:	b410      	push	{r4}
 * @return Nothing
 */
STATIC INLINE void Chip_SCU_SetPinMuxing(const PINMUX_GRP_T *pinArray, uint32_t arrayLength)
{
   uint32_t ix;
   for (ix = 0; ix < arrayLength; ix++ ) {
1a000d0a:	2300      	movs	r3, #0
1a000d0c:	e00c      	b.n	1a000d28 <Board_SetupMuxing+0x20>
       Chip_SCU_PinMuxSet(pinArray[ix].pingrp, pinArray[ix].pinnum, pinArray[ix].modefunc);
1a000d0e:	4a09      	ldr	r2, [pc, #36]	; (1a000d34 <Board_SetupMuxing+0x2c>)
1a000d10:	eb02 0183 	add.w	r1, r2, r3, lsl #2
1a000d14:	f812 4023 	ldrb.w	r4, [r2, r3, lsl #2]
1a000d18:	784a      	ldrb	r2, [r1, #1]
1a000d1a:	8848      	ldrh	r0, [r1, #2]
 * @note   Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMuxSet(uint8_t port, uint8_t pin, uint16_t modefunc)
{
   LPC_SCU->SFSP[port][pin] = modefunc;
1a000d1c:	eb02 1244 	add.w	r2, r2, r4, lsl #5
1a000d20:	4905      	ldr	r1, [pc, #20]	; (1a000d38 <Board_SetupMuxing+0x30>)
1a000d22:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
 * @return Nothing
 */
STATIC INLINE void Chip_SCU_SetPinMuxing(const PINMUX_GRP_T *pinArray, uint32_t arrayLength)
{
   uint32_t ix;
   for (ix = 0; ix < arrayLength; ix++ ) {
1a000d26:	3301      	adds	r3, #1
1a000d28:	2b17      	cmp	r3, #23
1a000d2a:	d9f0      	bls.n	1a000d0e <Board_SetupMuxing+0x6>
   /* Setup system level pin muxing */
   Chip_SCU_SetPinMuxing(pinmuxing, sizeof(pinmuxing) / sizeof(PINMUX_GRP_T));
}
1a000d2c:	f85d 4b04 	ldr.w	r4, [sp], #4
1a000d30:	4770      	bx	lr
1a000d32:	bf00      	nop
1a000d34:	1a001a54 	.word	0x1a001a54
1a000d38:	40086000 	.word	0x40086000

1a000d3c <Board_SetupClocking>:

/* Set up and initialize clocking prior to call to main */
void Board_SetupClocking(void)
{
1a000d3c:	b510      	push	{r4, lr}
 */
STATIC INLINE void Chip_CREG_SetFlashAcceleration(uint32_t Hz)
{
   uint32_t FAValue = Hz / 21510000;

   LPC_CREG->FLASHCFGA = (LPC_CREG->FLASHCFGA & (~(0xF << 12))) | (FAValue << 12);
1a000d3e:	4a17      	ldr	r2, [pc, #92]	; (1a000d9c <Board_SetupClocking+0x60>)
1a000d40:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
1a000d44:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a000d48:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a000d4c:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
   LPC_CREG->FLASHCFGB = (LPC_CREG->FLASHCFGB & (~(0xF << 12))) | (FAValue << 12);
1a000d50:	f8d2 3124 	ldr.w	r3, [r2, #292]	; 0x124
1a000d54:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a000d58:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a000d5c:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124

   /* Enable Flash acceleration and setup wait states */
   Chip_CREG_SetFlashAcceleration(MAX_CLOCK_FREQ);

   /* Setup System core frequency to MAX_CLOCK_FREQ */
   Chip_SetupCoreClock(CLKIN_CRYSTAL, MAX_CLOCK_FREQ, true);
1a000d60:	2006      	movs	r0, #6
1a000d62:	490f      	ldr	r1, [pc, #60]	; (1a000da0 <Board_SetupClocking+0x64>)
1a000d64:	2201      	movs	r2, #1
1a000d66:	f7ff fe4d 	bl	1a000a04 <Chip_SetupCoreClock>

   /* Setup system base clocks and initial states. This won't enable and
      disable individual clocks, but sets up the base clock sources for
      each individual peripheral clock. */
   for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a000d6a:	2400      	movs	r4, #0
1a000d6c:	e00a      	b.n	1a000d84 <Board_SetupClocking+0x48>
       Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
1a000d6e:	4a0d      	ldr	r2, [pc, #52]	; (1a000da4 <Board_SetupClocking+0x68>)
1a000d70:	eb02 0384 	add.w	r3, r2, r4, lsl #2
1a000d74:	f812 0024 	ldrb.w	r0, [r2, r4, lsl #2]
1a000d78:	7859      	ldrb	r1, [r3, #1]
1a000d7a:	789a      	ldrb	r2, [r3, #2]
1a000d7c:	78db      	ldrb	r3, [r3, #3]
1a000d7e:	f7ff fdc3 	bl	1a000908 <Chip_Clock_SetBaseClock>
   Chip_SetupCoreClock(CLKIN_CRYSTAL, MAX_CLOCK_FREQ, true);

   /* Setup system base clocks and initial states. This won't enable and
      disable individual clocks, but sets up the base clock sources for
      each individual peripheral clock. */
   for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a000d82:	3401      	adds	r4, #1
1a000d84:	2c02      	cmp	r4, #2
1a000d86:	d9f2      	bls.n	1a000d6e <Board_SetupClocking+0x32>
       Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
                               InitClkStates[i].autoblock_enab, InitClkStates[i].powerdn);
   }

   /* Reset and enable 32Khz oscillator */
   LPC_CREG->CREG0 &= ~((1 << 3) | (1 << 2));
1a000d88:	4b04      	ldr	r3, [pc, #16]	; (1a000d9c <Board_SetupClocking+0x60>)
1a000d8a:	685a      	ldr	r2, [r3, #4]
1a000d8c:	f022 020c 	bic.w	r2, r2, #12
1a000d90:	605a      	str	r2, [r3, #4]
   LPC_CREG->CREG0 |= (1 << 1) | (1 << 0);
1a000d92:	685a      	ldr	r2, [r3, #4]
1a000d94:	f042 0203 	orr.w	r2, r2, #3
1a000d98:	605a      	str	r2, [r3, #4]
1a000d9a:	bd10      	pop	{r4, pc}
1a000d9c:	40043000 	.word	0x40043000
1a000da0:	0c28cb00 	.word	0x0c28cb00
1a000da4:	1a001a48 	.word	0x1a001a48

1a000da8 <Board_SystemInit>:
}

/* Set up and initialize hardware prior to call to main */
void Board_SystemInit(void)
{
1a000da8:	b508      	push	{r3, lr}
   /* Setup system clocking and memory. This is done early to allow the
      application and tools to clear memory and use scatter loading to
      external memory. */
   Board_SetupMuxing();
1a000daa:	f7ff ffad 	bl	1a000d08 <Board_SetupMuxing>
   Board_SetupClocking();
1a000dae:	f7ff ffc5 	bl	1a000d3c <Board_SetupClocking>
1a000db2:	bd08      	pop	{r3, pc}

1a000db4 <UART2_IRQHandler>:
}

/* 0x2a 0x000000A8 - Handler for ISR UART2 (IRQ 26) */
void UART2_IRQHandler(void){
1a000db4:	4770      	bx	lr
1a000db6:	bf00      	nop

1a000db8 <UART3_IRQHandler>:
}

/* 0x2b 0x000000AC - Handler for ISR UART3 (IRQ 27) */
void UART3_IRQHandler(void){
1a000db8:	4770      	bx	lr
1a000dba:	bf00      	nop

1a000dbc <sAPI_NullFuncPtr>:
 * param:  void * - Not used
 * return: bool_t - Return always true
 */
bool_t sAPI_NullFuncPtr(void *ptr){
   return 1;
}
1a000dbc:	2001      	movs	r0, #1
1a000dbe:	4770      	bx	lr

1a000dc0 <delay>:

/* ---- Blocking Delay ---- */

// delay( 1, DELAY_US );

void delay(tick_t duration){
1a000dc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a000dc4:	4680      	mov	r8, r0
1a000dc6:	4689      	mov	r9, r1
    tick_t startTime = tickRead();
1a000dc8:	f000 f852 	bl	1a000e70 <tickRead>
1a000dcc:	4606      	mov	r6, r0
1a000dce:	460f      	mov	r7, r1
    while ( (tick_t)(tickRead() - startTime) < duration/tickRateMS );
1a000dd0:	f000 f84e 	bl	1a000e70 <tickRead>
1a000dd4:	1b84      	subs	r4, r0, r6
1a000dd6:	eb61 0507 	sbc.w	r5, r1, r7
1a000dda:	4640      	mov	r0, r8
1a000ddc:	4649      	mov	r1, r9
1a000dde:	4b05      	ldr	r3, [pc, #20]	; (1a000df4 <delay+0x34>)
1a000de0:	e9d3 2300 	ldrd	r2, r3, [r3]
1a000de4:	f000 fae8 	bl	1a0013b8 <__aeabi_uldivmod>
1a000de8:	428d      	cmp	r5, r1
1a000dea:	bf08      	it	eq
1a000dec:	4284      	cmpeq	r4, r0
1a000dee:	d3ef      	bcc.n	1a000dd0 <delay+0x10>
 }
1a000df0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a000df4:	10000060 	.word	0x10000060

1a000df8 <tickConfig>:
/*==================[internal functions definition]==========================*/

/*==================[external functions definition]==========================*/

/* Tick rate configuration 1 to 50 ms */
bool_t tickConfig( tick_t tickRateMSvalue, sAPI_FuncPtr_t tickHook ) {
1a000df8:	b508      	push	{r3, lr}

   bool_t ret_val = 1;
   tick_t tickRateHz = 0;

   if( tickHook ){
1a000dfa:	b112      	cbz	r2, 1a000e02 <tickConfig+0xa>
1a000dfc:	4613      	mov	r3, r2
      tickHookFunction = tickHook;
1a000dfe:	4a17      	ldr	r2, [pc, #92]	; (1a000e5c <tickConfig+0x64>)
1a000e00:	6013      	str	r3, [r2, #0]
   }

   if( (tickRateMSvalue >= 1) && (tickRateMSvalue <= 50) ){
1a000e02:	f110 32ff 	adds.w	r2, r0, #4294967295
1a000e06:	f141 33ff 	adc.w	r3, r1, #4294967295
1a000e0a:	2b00      	cmp	r3, #0
1a000e0c:	bf08      	it	eq
1a000e0e:	2a32      	cmpeq	r2, #50	; 0x32
1a000e10:	d220      	bcs.n	1a000e54 <tickConfig+0x5c>
1a000e12:	4602      	mov	r2, r0
1a000e14:	460b      	mov	r3, r1

		tickRateMS = tickRateMSvalue;
1a000e16:	4912      	ldr	r1, [pc, #72]	; (1a000e60 <tickConfig+0x68>)
1a000e18:	e9c1 2300 	strd	r2, r3, [r1]
      tickRateHz = 1000 => 1000 ticks per second =>  1 ms tick
      tickRateHz =  200 =>  200 ticks per second =>  5 ms tick
      tickRateHz =  100 =>  100 ticks per second => 10 ms tick
      tickRateHz =   20 =>   20 ticks per second => 50 ms tick
      */
      tickRateHz = 1000 / tickRateMSvalue;
1a000e1c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
1a000e20:	2100      	movs	r1, #0
1a000e22:	f000 fac9 	bl	1a0013b8 <__aeabi_uldivmod>
1a000e26:	4602      	mov	r2, r0
1a000e28:	460b      	mov	r3, r1

      /* Init SysTick interrupt, tickRateHz ticks per second */
      SysTick_Config( SystemCoreClock / tickRateHz);
1a000e2a:	490e      	ldr	r1, [pc, #56]	; (1a000e64 <tickConfig+0x6c>)
1a000e2c:	6808      	ldr	r0, [r1, #0]
1a000e2e:	2100      	movs	r1, #0
1a000e30:	f000 fac2 	bl	1a0013b8 <__aeabi_uldivmod>
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */
1a000e34:	3801      	subs	r0, #1
1a000e36:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
1a000e3a:	d20d      	bcs.n	1a000e58 <tickConfig+0x60>

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
1a000e3c:	4b0a      	ldr	r3, [pc, #40]	; (1a000e68 <tickConfig+0x70>)
1a000e3e:	6058      	str	r0, [r3, #4]
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
1a000e40:	21e0      	movs	r1, #224	; 0xe0
1a000e42:	4a0a      	ldr	r2, [pc, #40]	; (1a000e6c <tickConfig+0x74>)
1a000e44:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
1a000e48:	2200      	movs	r2, #0
1a000e4a:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
1a000e4c:	2207      	movs	r2, #7
1a000e4e:	601a      	str	r2, [r3, #0]
/*==================[external functions definition]==========================*/

/* Tick rate configuration 1 to 50 ms */
bool_t tickConfig( tick_t tickRateMSvalue, sAPI_FuncPtr_t tickHook ) {

   bool_t ret_val = 1;
1a000e50:	2001      	movs	r0, #1
1a000e52:	bd08      	pop	{r3, pc}
      /* Init SysTick interrupt, tickRateHz ticks per second */
      SysTick_Config( SystemCoreClock / tickRateHz);
   }
   else{
      /* Error, tickRateMS variable not in range (1 <= tickRateMS <= 50) */
      ret_val = 0;
1a000e54:	2000      	movs	r0, #0
1a000e56:	bd08      	pop	{r3, pc}
/*==================[external functions definition]==========================*/

/* Tick rate configuration 1 to 50 ms */
bool_t tickConfig( tick_t tickRateMSvalue, sAPI_FuncPtr_t tickHook ) {

   bool_t ret_val = 1;
1a000e58:	2001      	movs	r0, #1
      /* Error, tickRateMS variable not in range (1 <= tickRateMS <= 50) */
      ret_val = 0;
   }

   return ret_val;
}
1a000e5a:	bd08      	pop	{r3, pc}
1a000e5c:	10000000 	.word	0x10000000
1a000e60:	10000060 	.word	0x10000060
1a000e64:	10000050 	.word	0x10000050
1a000e68:	e000e010 	.word	0xe000e010
1a000e6c:	e000ed00 	.word	0xe000ed00

1a000e70 <tickRead>:


/* Read Tick Counter */
tick_t tickRead( void ) {
   return tickCounter;
}
1a000e70:	4b01      	ldr	r3, [pc, #4]	; (1a000e78 <tickRead+0x8>)
1a000e72:	e9d3 0100 	ldrd	r0, r1, [r3]
1a000e76:	4770      	bx	lr
1a000e78:	10000058 	.word	0x10000058

1a000e7c <SysTick_Handler>:
/*==================[ISR external functions definition]======================*/

//__attribute__ ((section(".after_vectors")))

/* SysTick Timer ISR Handler */
void SysTick_Handler(void) {
1a000e7c:	b508      	push	{r3, lr}
   tickCounter++;
1a000e7e:	4906      	ldr	r1, [pc, #24]	; (1a000e98 <SysTick_Handler+0x1c>)
1a000e80:	e9d1 2300 	ldrd	r2, r3, [r1]
1a000e84:	3201      	adds	r2, #1
1a000e86:	f143 0300 	adc.w	r3, r3, #0
1a000e8a:	e9c1 2300 	strd	r2, r3, [r1]

	/* Execute Tick Hook function */
	(* tickHookFunction )( 0 );
1a000e8e:	4b03      	ldr	r3, [pc, #12]	; (1a000e9c <SysTick_Handler+0x20>)
1a000e90:	681b      	ldr	r3, [r3, #0]
1a000e92:	2000      	movs	r0, #0
1a000e94:	4798      	blx	r3
1a000e96:	bd08      	pop	{r3, pc}
1a000e98:	10000058 	.word	0x10000058
1a000e9c:	10000000 	.word	0x10000000

1a000ea0 <TIMER0_IRQHandler>:
/*==================[ISR external functions definition]======================*/

/*
 * @Brief: 
 */
void TIMER0_IRQHandler(void){
1a000ea0:	b510      	push	{r4, lr}
   uint8_t i = 0;
   // Match
   for( i=0; i<=3; i++ ){
1a000ea2:	2400      	movs	r4, #0
1a000ea4:	e013      	b.n	1a000ece <TIMER0_IRQHandler+0x2e>
 * @note   Determine if the match interrupt for the passed timer and match
 * counter is pending.
 */
STATIC INLINE bool Chip_TIMER_MatchPending(LPC_TIMER_T *pTMR, int8_t matchnum)
{
   return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a000ea6:	4b18      	ldr	r3, [pc, #96]	; (1a000f08 <TIMER0_IRQHandler+0x68>)
1a000ea8:	681a      	ldr	r2, [r3, #0]
1a000eaa:	f004 010f 	and.w	r1, r4, #15
1a000eae:	2301      	movs	r3, #1
1a000eb0:	408b      	lsls	r3, r1
      if( Chip_TIMER_MatchPending( LPC_TIMER0, i ) ){
1a000eb2:	421a      	tst	r2, r3
1a000eb4:	d009      	beq.n	1a000eca <TIMER0_IRQHandler+0x2a>
         // Execute Timer0 Match i Hook function
         (*timer0CaptureHookFunction[i])(0);
1a000eb6:	4b15      	ldr	r3, [pc, #84]	; (1a000f0c <TIMER0_IRQHandler+0x6c>)
1a000eb8:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
1a000ebc:	2000      	movs	r0, #0
1a000ebe:	4798      	blx	r3
 * @return Nothing
 * @note   Clears a pending timer match interrupt.
 */
STATIC INLINE void Chip_TIMER_ClearMatch(LPC_TIMER_T *pTMR, int8_t matchnum)
{
   pTMR->IR = TIMER_IR_CLR(matchnum);
1a000ec0:	b262      	sxtb	r2, r4
1a000ec2:	2301      	movs	r3, #1
1a000ec4:	4093      	lsls	r3, r2
1a000ec6:	4a10      	ldr	r2, [pc, #64]	; (1a000f08 <TIMER0_IRQHandler+0x68>)
1a000ec8:	6013      	str	r3, [r2, #0]
 * @Brief: 
 */
void TIMER0_IRQHandler(void){
   uint8_t i = 0;
   // Match
   for( i=0; i<=3; i++ ){
1a000eca:	3401      	adds	r4, #1
1a000ecc:	b2e4      	uxtb	r4, r4
1a000ece:	2c03      	cmp	r4, #3
1a000ed0:	d9e9      	bls.n	1a000ea6 <TIMER0_IRQHandler+0x6>
1a000ed2:	2400      	movs	r4, #0
1a000ed4:	e014      	b.n	1a000f00 <TIMER0_IRQHandler+0x60>
 * @note   Determine if the capture interrupt for the passed capture pin is
 * pending.
 */
STATIC INLINE bool Chip_TIMER_CapturePending(LPC_TIMER_T *pTMR, int8_t capnum)
{
   return (bool) ((pTMR->IR & TIMER_CAP_INT(capnum)) != 0);
1a000ed6:	4b0c      	ldr	r3, [pc, #48]	; (1a000f08 <TIMER0_IRQHandler+0x68>)
1a000ed8:	6819      	ldr	r1, [r3, #0]
1a000eda:	f004 020f 	and.w	r2, r4, #15
1a000ede:	3204      	adds	r2, #4
1a000ee0:	2301      	movs	r3, #1
1a000ee2:	4093      	lsls	r3, r2
         Chip_TIMER_ClearMatch( LPC_TIMER0, i );
      }
   }
   // Capture
   for( i=0; i<=3; i++ ){
      if( Chip_TIMER_CapturePending( LPC_TIMER0, i ) ){
1a000ee4:	4219      	tst	r1, r3
1a000ee6:	d009      	beq.n	1a000efc <TIMER0_IRQHandler+0x5c>
         // Execute Timer0 Compare i Hook function
         (*timer0CaptureHookFunction[i])(0);
1a000ee8:	4b08      	ldr	r3, [pc, #32]	; (1a000f0c <TIMER0_IRQHandler+0x6c>)
1a000eea:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
1a000eee:	2000      	movs	r0, #0
1a000ef0:	4798      	blx	r3
 * @return Nothing
 * @note   Clears a pending timer capture interrupt.
 */
STATIC INLINE void Chip_TIMER_ClearCapture(LPC_TIMER_T *pTMR, int8_t capnum)
{
   pTMR->IR = (0x10 << capnum);
1a000ef2:	b262      	sxtb	r2, r4
1a000ef4:	2310      	movs	r3, #16
1a000ef6:	4093      	lsls	r3, r2
1a000ef8:	4a03      	ldr	r2, [pc, #12]	; (1a000f08 <TIMER0_IRQHandler+0x68>)
1a000efa:	6013      	str	r3, [r2, #0]
         //(*timer_dd[TIMER0].timerCompareMatchFunctionPointer[i])();
         Chip_TIMER_ClearMatch( LPC_TIMER0, i );
      }
   }
   // Capture
   for( i=0; i<=3; i++ ){
1a000efc:	3401      	adds	r4, #1
1a000efe:	b2e4      	uxtb	r4, r4
1a000f00:	2c03      	cmp	r4, #3
1a000f02:	d9e8      	bls.n	1a000ed6 <TIMER0_IRQHandler+0x36>
         // Execute Timer0 Compare i Hook function
         (*timer0CaptureHookFunction[i])(0);
         Chip_TIMER_ClearCapture( LPC_TIMER0, i );
      }
   }
}
1a000f04:	bd10      	pop	{r4, pc}
1a000f06:	bf00      	nop
1a000f08:	40084000 	.word	0x40084000
1a000f0c:	10000034 	.word	0x10000034

1a000f10 <TIMER1_IRQHandler>:

void TIMER1_IRQHandler( void ){
1a000f10:	b510      	push	{r4, lr}
   uint8_t i = 0;
   // Match
   for( i=0; i<=3; i++ ){
1a000f12:	2400      	movs	r4, #0
1a000f14:	e013      	b.n	1a000f3e <TIMER1_IRQHandler+0x2e>
 * @note   Determine if the match interrupt for the passed timer and match
 * counter is pending.
 */
STATIC INLINE bool Chip_TIMER_MatchPending(LPC_TIMER_T *pTMR, int8_t matchnum)
{
   return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a000f16:	4b18      	ldr	r3, [pc, #96]	; (1a000f78 <TIMER1_IRQHandler+0x68>)
1a000f18:	681a      	ldr	r2, [r3, #0]
1a000f1a:	f004 010f 	and.w	r1, r4, #15
1a000f1e:	2301      	movs	r3, #1
1a000f20:	408b      	lsls	r3, r1
      if( Chip_TIMER_MatchPending( LPC_TIMER1, i ) ){
1a000f22:	421a      	tst	r2, r3
1a000f24:	d009      	beq.n	1a000f3a <TIMER1_IRQHandler+0x2a>
         // Execute Timer1 Match i Hook function
         (*timer1CaptureHookFunction[i])(0);
1a000f26:	4b15      	ldr	r3, [pc, #84]	; (1a000f7c <TIMER1_IRQHandler+0x6c>)
1a000f28:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
1a000f2c:	2000      	movs	r0, #0
1a000f2e:	4798      	blx	r3
 * @return Nothing
 * @note   Clears a pending timer match interrupt.
 */
STATIC INLINE void Chip_TIMER_ClearMatch(LPC_TIMER_T *pTMR, int8_t matchnum)
{
   pTMR->IR = TIMER_IR_CLR(matchnum);
1a000f30:	b262      	sxtb	r2, r4
1a000f32:	2301      	movs	r3, #1
1a000f34:	4093      	lsls	r3, r2
1a000f36:	4a10      	ldr	r2, [pc, #64]	; (1a000f78 <TIMER1_IRQHandler+0x68>)
1a000f38:	6013      	str	r3, [r2, #0]
}

void TIMER1_IRQHandler( void ){
   uint8_t i = 0;
   // Match
   for( i=0; i<=3; i++ ){
1a000f3a:	3401      	adds	r4, #1
1a000f3c:	b2e4      	uxtb	r4, r4
1a000f3e:	2c03      	cmp	r4, #3
1a000f40:	d9e9      	bls.n	1a000f16 <TIMER1_IRQHandler+0x6>
1a000f42:	2400      	movs	r4, #0
1a000f44:	e014      	b.n	1a000f70 <TIMER1_IRQHandler+0x60>
 * @note   Determine if the capture interrupt for the passed capture pin is
 * pending.
 */
STATIC INLINE bool Chip_TIMER_CapturePending(LPC_TIMER_T *pTMR, int8_t capnum)
{
   return (bool) ((pTMR->IR & TIMER_CAP_INT(capnum)) != 0);
1a000f46:	4b0c      	ldr	r3, [pc, #48]	; (1a000f78 <TIMER1_IRQHandler+0x68>)
1a000f48:	6819      	ldr	r1, [r3, #0]
1a000f4a:	f004 020f 	and.w	r2, r4, #15
1a000f4e:	3204      	adds	r2, #4
1a000f50:	2301      	movs	r3, #1
1a000f52:	4093      	lsls	r3, r2
         Chip_TIMER_ClearMatch( LPC_TIMER1, i );
      }
   }
   // Capture
   for( i=0; i<=3; i++ ){
      if( Chip_TIMER_CapturePending( LPC_TIMER1, i ) ){
1a000f54:	4219      	tst	r1, r3
1a000f56:	d009      	beq.n	1a000f6c <TIMER1_IRQHandler+0x5c>
         // Execute Timer1 Compare i Hook function
         (*timer1CaptureHookFunction[i])(0);
1a000f58:	4b08      	ldr	r3, [pc, #32]	; (1a000f7c <TIMER1_IRQHandler+0x6c>)
1a000f5a:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
1a000f5e:	2000      	movs	r0, #0
1a000f60:	4798      	blx	r3
 * @return Nothing
 * @note   Clears a pending timer capture interrupt.
 */
STATIC INLINE void Chip_TIMER_ClearCapture(LPC_TIMER_T *pTMR, int8_t capnum)
{
   pTMR->IR = (0x10 << capnum);
1a000f62:	b262      	sxtb	r2, r4
1a000f64:	2310      	movs	r3, #16
1a000f66:	4093      	lsls	r3, r2
1a000f68:	4a03      	ldr	r2, [pc, #12]	; (1a000f78 <TIMER1_IRQHandler+0x68>)
1a000f6a:	6013      	str	r3, [r2, #0]
         (*timer1CaptureHookFunction[i])(0);
         Chip_TIMER_ClearMatch( LPC_TIMER1, i );
      }
   }
   // Capture
   for( i=0; i<=3; i++ ){
1a000f6c:	3401      	adds	r4, #1
1a000f6e:	b2e4      	uxtb	r4, r4
1a000f70:	2c03      	cmp	r4, #3
1a000f72:	d9e8      	bls.n	1a000f46 <TIMER1_IRQHandler+0x36>
         // Execute Timer1 Compare i Hook function
         (*timer1CaptureHookFunction[i])(0);
         Chip_TIMER_ClearCapture( LPC_TIMER1, i );
      }
   }
}
1a000f74:	bd10      	pop	{r4, pc}
1a000f76:	bf00      	nop
1a000f78:	40085000 	.word	0x40085000
1a000f7c:	10000024 	.word	0x10000024

1a000f80 <TIMER2_IRQHandler>:

void TIMER2_IRQHandler( void ){
1a000f80:	b510      	push	{r4, lr}
   uint8_t i = 0;
   // Match
   for( i=0; i<=3; i++ ){
1a000f82:	2400      	movs	r4, #0
1a000f84:	e013      	b.n	1a000fae <TIMER2_IRQHandler+0x2e>
 * @note   Determine if the match interrupt for the passed timer and match
 * counter is pending.
 */
STATIC INLINE bool Chip_TIMER_MatchPending(LPC_TIMER_T *pTMR, int8_t matchnum)
{
   return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a000f86:	4b18      	ldr	r3, [pc, #96]	; (1a000fe8 <TIMER2_IRQHandler+0x68>)
1a000f88:	681a      	ldr	r2, [r3, #0]
1a000f8a:	f004 010f 	and.w	r1, r4, #15
1a000f8e:	2301      	movs	r3, #1
1a000f90:	408b      	lsls	r3, r1
      if( Chip_TIMER_MatchPending( LPC_TIMER2, i ) ){
1a000f92:	421a      	tst	r2, r3
1a000f94:	d009      	beq.n	1a000faa <TIMER2_IRQHandler+0x2a>
         // Execute Timer2 Match i Hook function
         (*timer2CaptureHookFunction[i])(0);
1a000f96:	4b15      	ldr	r3, [pc, #84]	; (1a000fec <TIMER2_IRQHandler+0x6c>)
1a000f98:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
1a000f9c:	2000      	movs	r0, #0
1a000f9e:	4798      	blx	r3
 * @return Nothing
 * @note   Clears a pending timer match interrupt.
 */
STATIC INLINE void Chip_TIMER_ClearMatch(LPC_TIMER_T *pTMR, int8_t matchnum)
{
   pTMR->IR = TIMER_IR_CLR(matchnum);
1a000fa0:	b262      	sxtb	r2, r4
1a000fa2:	2301      	movs	r3, #1
1a000fa4:	4093      	lsls	r3, r2
1a000fa6:	4a10      	ldr	r2, [pc, #64]	; (1a000fe8 <TIMER2_IRQHandler+0x68>)
1a000fa8:	6013      	str	r3, [r2, #0]
}

void TIMER2_IRQHandler( void ){
   uint8_t i = 0;
   // Match
   for( i=0; i<=3; i++ ){
1a000faa:	3401      	adds	r4, #1
1a000fac:	b2e4      	uxtb	r4, r4
1a000fae:	2c03      	cmp	r4, #3
1a000fb0:	d9e9      	bls.n	1a000f86 <TIMER2_IRQHandler+0x6>
1a000fb2:	2400      	movs	r4, #0
1a000fb4:	e014      	b.n	1a000fe0 <TIMER2_IRQHandler+0x60>
 * @note   Determine if the capture interrupt for the passed capture pin is
 * pending.
 */
STATIC INLINE bool Chip_TIMER_CapturePending(LPC_TIMER_T *pTMR, int8_t capnum)
{
   return (bool) ((pTMR->IR & TIMER_CAP_INT(capnum)) != 0);
1a000fb6:	4b0c      	ldr	r3, [pc, #48]	; (1a000fe8 <TIMER2_IRQHandler+0x68>)
1a000fb8:	6819      	ldr	r1, [r3, #0]
1a000fba:	f004 020f 	and.w	r2, r4, #15
1a000fbe:	3204      	adds	r2, #4
1a000fc0:	2301      	movs	r3, #1
1a000fc2:	4093      	lsls	r3, r2
         Chip_TIMER_ClearMatch( LPC_TIMER2, i );
      }
   }
   // Capture
   for( i=0; i<=3; i++ ){
      if( Chip_TIMER_CapturePending( LPC_TIMER2, i ) ){
1a000fc4:	4219      	tst	r1, r3
1a000fc6:	d009      	beq.n	1a000fdc <TIMER2_IRQHandler+0x5c>
         // Execute Timer2 Compare i Hook function
         (*timer2CaptureHookFunction[i])(0);
1a000fc8:	4b08      	ldr	r3, [pc, #32]	; (1a000fec <TIMER2_IRQHandler+0x6c>)
1a000fca:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
1a000fce:	2000      	movs	r0, #0
1a000fd0:	4798      	blx	r3
 * @return Nothing
 * @note   Clears a pending timer capture interrupt.
 */
STATIC INLINE void Chip_TIMER_ClearCapture(LPC_TIMER_T *pTMR, int8_t capnum)
{
   pTMR->IR = (0x10 << capnum);
1a000fd2:	b262      	sxtb	r2, r4
1a000fd4:	2310      	movs	r3, #16
1a000fd6:	4093      	lsls	r3, r2
1a000fd8:	4a03      	ldr	r2, [pc, #12]	; (1a000fe8 <TIMER2_IRQHandler+0x68>)
1a000fda:	6013      	str	r3, [r2, #0]
         (*timer2CaptureHookFunction[i])(0);
         Chip_TIMER_ClearMatch( LPC_TIMER2, i );
      }
   }
   // Capture
   for( i=0; i<=3; i++ ){
1a000fdc:	3401      	adds	r4, #1
1a000fde:	b2e4      	uxtb	r4, r4
1a000fe0:	2c03      	cmp	r4, #3
1a000fe2:	d9e8      	bls.n	1a000fb6 <TIMER2_IRQHandler+0x36>
         // Execute Timer2 Compare i Hook function
         (*timer2CaptureHookFunction[i])(0);
         Chip_TIMER_ClearCapture( LPC_TIMER2, i );
      }
   }
}
1a000fe4:	bd10      	pop	{r4, pc}
1a000fe6:	bf00      	nop
1a000fe8:	400c3000 	.word	0x400c3000
1a000fec:	10000014 	.word	0x10000014

1a000ff0 <TIMER3_IRQHandler>:

void TIMER3_IRQHandler( void ){
1a000ff0:	b510      	push	{r4, lr}
   uint8_t i = 0;
   // Match
   for( i=0; i<=3; i++ ){
1a000ff2:	2400      	movs	r4, #0
1a000ff4:	e013      	b.n	1a00101e <TIMER3_IRQHandler+0x2e>
 * @note   Determine if the match interrupt for the passed timer and match
 * counter is pending.
 */
STATIC INLINE bool Chip_TIMER_MatchPending(LPC_TIMER_T *pTMR, int8_t matchnum)
{
   return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a000ff6:	4b18      	ldr	r3, [pc, #96]	; (1a001058 <TIMER3_IRQHandler+0x68>)
1a000ff8:	681a      	ldr	r2, [r3, #0]
1a000ffa:	f004 010f 	and.w	r1, r4, #15
1a000ffe:	2301      	movs	r3, #1
1a001000:	408b      	lsls	r3, r1
      if( Chip_TIMER_MatchPending( LPC_TIMER3, i ) ){
1a001002:	421a      	tst	r2, r3
1a001004:	d009      	beq.n	1a00101a <TIMER3_IRQHandler+0x2a>
         // Execute Timer3 Match i Hook function
         (*timer3CaptureHookFunction[i])(0);
1a001006:	4b15      	ldr	r3, [pc, #84]	; (1a00105c <TIMER3_IRQHandler+0x6c>)
1a001008:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
1a00100c:	2000      	movs	r0, #0
1a00100e:	4798      	blx	r3
 * @return Nothing
 * @note   Clears a pending timer match interrupt.
 */
STATIC INLINE void Chip_TIMER_ClearMatch(LPC_TIMER_T *pTMR, int8_t matchnum)
{
   pTMR->IR = TIMER_IR_CLR(matchnum);
1a001010:	b262      	sxtb	r2, r4
1a001012:	2301      	movs	r3, #1
1a001014:	4093      	lsls	r3, r2
1a001016:	4a10      	ldr	r2, [pc, #64]	; (1a001058 <TIMER3_IRQHandler+0x68>)
1a001018:	6013      	str	r3, [r2, #0]
}

void TIMER3_IRQHandler( void ){
   uint8_t i = 0;
   // Match
   for( i=0; i<=3; i++ ){
1a00101a:	3401      	adds	r4, #1
1a00101c:	b2e4      	uxtb	r4, r4
1a00101e:	2c03      	cmp	r4, #3
1a001020:	d9e9      	bls.n	1a000ff6 <TIMER3_IRQHandler+0x6>
1a001022:	2400      	movs	r4, #0
1a001024:	e014      	b.n	1a001050 <TIMER3_IRQHandler+0x60>
 * @note   Determine if the capture interrupt for the passed capture pin is
 * pending.
 */
STATIC INLINE bool Chip_TIMER_CapturePending(LPC_TIMER_T *pTMR, int8_t capnum)
{
   return (bool) ((pTMR->IR & TIMER_CAP_INT(capnum)) != 0);
1a001026:	4b0c      	ldr	r3, [pc, #48]	; (1a001058 <TIMER3_IRQHandler+0x68>)
1a001028:	6819      	ldr	r1, [r3, #0]
1a00102a:	f004 020f 	and.w	r2, r4, #15
1a00102e:	3204      	adds	r2, #4
1a001030:	2301      	movs	r3, #1
1a001032:	4093      	lsls	r3, r2
         Chip_TIMER_ClearMatch( LPC_TIMER3, i );
      }
   }
   // Capture
   for( i=0; i<=3; i++ ){
      if( Chip_TIMER_CapturePending( LPC_TIMER3, i ) ){
1a001034:	4219      	tst	r1, r3
1a001036:	d009      	beq.n	1a00104c <TIMER3_IRQHandler+0x5c>
         // Execute Timer3 Compare i Hook function
         (*timer3CaptureHookFunction[i])(0);
1a001038:	4b08      	ldr	r3, [pc, #32]	; (1a00105c <TIMER3_IRQHandler+0x6c>)
1a00103a:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
1a00103e:	2000      	movs	r0, #0
1a001040:	4798      	blx	r3
 * @return Nothing
 * @note   Clears a pending timer capture interrupt.
 */
STATIC INLINE void Chip_TIMER_ClearCapture(LPC_TIMER_T *pTMR, int8_t capnum)
{
   pTMR->IR = (0x10 << capnum);
1a001042:	b262      	sxtb	r2, r4
1a001044:	2310      	movs	r3, #16
1a001046:	4093      	lsls	r3, r2
1a001048:	4a03      	ldr	r2, [pc, #12]	; (1a001058 <TIMER3_IRQHandler+0x68>)
1a00104a:	6013      	str	r3, [r2, #0]
         (*timer3CaptureHookFunction[i])(0);
         Chip_TIMER_ClearMatch( LPC_TIMER3, i );
      }
   }
   // Capture
   for( i=0; i<=3; i++ ){
1a00104c:	3401      	adds	r4, #1
1a00104e:	b2e4      	uxtb	r4, r4
1a001050:	2c03      	cmp	r4, #3
1a001052:	d9e8      	bls.n	1a001026 <TIMER3_IRQHandler+0x36>
         // Run the functions saved in the timer dynamic data structure
         //(*timer_dd[TIMER3].timerCompareMatchFunctionPointer[i])();
         Chip_TIMER_ClearMatch( LPC_TIMER3, i );
      }
   }*/
}
1a001054:	bd10      	pop	{r4, pc}
1a001056:	bf00      	nop
1a001058:	400c4000 	.word	0x400c4000
1a00105c:	10000004 	.word	0x10000004

1a001060 <boardConfig>:
/*==================[internal functions definition]==========================*/

/*==================[external functions definition]==========================*/

/* Set up and initialize board hardware */
void boardConfig(void) {
1a001060:	b508      	push	{r3, lr}

   /* Read clock settings and update SystemCoreClock variable */
   SystemCoreClockUpdate();
1a001062:	f7ff fa2d 	bl	1a0004c0 <SystemCoreClockUpdate>

   Board_Init(); // From Board module (modules/lpc4337_m4/board)
1a001066:	f7ff fdf7 	bl	1a000c58 <Board_Init>

   /* Inicializar el conteo de Ticks con resolución de 1ms, sin tickHook */
   tickConfig( 1, 0 );
1a00106a:	2001      	movs	r0, #1
1a00106c:	2100      	movs	r1, #0
1a00106e:	2200      	movs	r2, #0
1a001070:	f7ff fec2 	bl	1a000df8 <tickConfig>

   /* Inicializar GPIOs */
   gpioConfig( 0, GPIO_ENABLE );
1a001074:	2000      	movs	r0, #0
1a001076:	2105      	movs	r1, #5
1a001078:	f000 f880 	bl	1a00117c <gpioConfig>

   /* Configuración de pines de entrada para Teclas de la EDU-CIAA-NXP */
   gpioConfig( TEC1, GPIO_INPUT );
1a00107c:	2024      	movs	r0, #36	; 0x24
1a00107e:	2100      	movs	r1, #0
1a001080:	f000 f87c 	bl	1a00117c <gpioConfig>
   gpioConfig( TEC2, GPIO_INPUT );
1a001084:	2025      	movs	r0, #37	; 0x25
1a001086:	2100      	movs	r1, #0
1a001088:	f000 f878 	bl	1a00117c <gpioConfig>
   gpioConfig( TEC3, GPIO_INPUT );
1a00108c:	2026      	movs	r0, #38	; 0x26
1a00108e:	2100      	movs	r1, #0
1a001090:	f000 f874 	bl	1a00117c <gpioConfig>
   gpioConfig( TEC4, GPIO_INPUT );
1a001094:	2027      	movs	r0, #39	; 0x27
1a001096:	2100      	movs	r1, #0
1a001098:	f000 f870 	bl	1a00117c <gpioConfig>

   /* Configuración de pines de salida para Leds de la EDU-CIAA-NXP */
   gpioConfig( LEDR, GPIO_OUTPUT );
1a00109c:	2028      	movs	r0, #40	; 0x28
1a00109e:	2101      	movs	r1, #1
1a0010a0:	f000 f86c 	bl	1a00117c <gpioConfig>
   gpioConfig( LEDG, GPIO_OUTPUT );
1a0010a4:	2029      	movs	r0, #41	; 0x29
1a0010a6:	2101      	movs	r1, #1
1a0010a8:	f000 f868 	bl	1a00117c <gpioConfig>
   gpioConfig( LEDB, GPIO_OUTPUT );
1a0010ac:	202a      	movs	r0, #42	; 0x2a
1a0010ae:	2101      	movs	r1, #1
1a0010b0:	f000 f864 	bl	1a00117c <gpioConfig>
   gpioConfig( LED1, GPIO_OUTPUT );
1a0010b4:	202b      	movs	r0, #43	; 0x2b
1a0010b6:	2101      	movs	r1, #1
1a0010b8:	f000 f860 	bl	1a00117c <gpioConfig>
   gpioConfig( LED2, GPIO_OUTPUT );
1a0010bc:	202c      	movs	r0, #44	; 0x2c
1a0010be:	2101      	movs	r1, #1
1a0010c0:	f000 f85c 	bl	1a00117c <gpioConfig>
   gpioConfig( LED3, GPIO_OUTPUT );
1a0010c4:	202d      	movs	r0, #45	; 0x2d
1a0010c6:	2101      	movs	r1, #1
1a0010c8:	f000 f858 	bl	1a00117c <gpioConfig>


   /* Configuración de pines de entrada de la CIAA-NXP */
   gpioConfig( DI0, GPIO_INPUT );
1a0010cc:	202e      	movs	r0, #46	; 0x2e
1a0010ce:	2100      	movs	r1, #0
1a0010d0:	f000 f854 	bl	1a00117c <gpioConfig>
   gpioConfig( DI1, GPIO_INPUT );
1a0010d4:	202f      	movs	r0, #47	; 0x2f
1a0010d6:	2100      	movs	r1, #0
1a0010d8:	f000 f850 	bl	1a00117c <gpioConfig>
   gpioConfig( DI2, GPIO_INPUT );
1a0010dc:	2030      	movs	r0, #48	; 0x30
1a0010de:	2100      	movs	r1, #0
1a0010e0:	f000 f84c 	bl	1a00117c <gpioConfig>
   gpioConfig( DI3, GPIO_INPUT );
1a0010e4:	2031      	movs	r0, #49	; 0x31
1a0010e6:	2100      	movs	r1, #0
1a0010e8:	f000 f848 	bl	1a00117c <gpioConfig>
   gpioConfig( DI4, GPIO_INPUT );
1a0010ec:	2032      	movs	r0, #50	; 0x32
1a0010ee:	2100      	movs	r1, #0
1a0010f0:	f000 f844 	bl	1a00117c <gpioConfig>
   gpioConfig( DI5, GPIO_INPUT );
1a0010f4:	2033      	movs	r0, #51	; 0x33
1a0010f6:	2100      	movs	r1, #0
1a0010f8:	f000 f840 	bl	1a00117c <gpioConfig>
   gpioConfig( DI6, GPIO_INPUT );
1a0010fc:	2034      	movs	r0, #52	; 0x34
1a0010fe:	2100      	movs	r1, #0
1a001100:	f000 f83c 	bl	1a00117c <gpioConfig>
   gpioConfig( DI7, GPIO_INPUT );
1a001104:	2035      	movs	r0, #53	; 0x35
1a001106:	2100      	movs	r1, #0
1a001108:	f000 f838 	bl	1a00117c <gpioConfig>

   /* Configuración de pines de salida de la CIAA-NXP */
   gpioConfig( DO0, GPIO_OUTPUT );
1a00110c:	2036      	movs	r0, #54	; 0x36
1a00110e:	2101      	movs	r1, #1
1a001110:	f000 f834 	bl	1a00117c <gpioConfig>
   gpioConfig( DO1, GPIO_OUTPUT );
1a001114:	2037      	movs	r0, #55	; 0x37
1a001116:	2101      	movs	r1, #1
1a001118:	f000 f830 	bl	1a00117c <gpioConfig>
   gpioConfig( DO2, GPIO_OUTPUT );
1a00111c:	2038      	movs	r0, #56	; 0x38
1a00111e:	2101      	movs	r1, #1
1a001120:	f000 f82c 	bl	1a00117c <gpioConfig>
   gpioConfig( DO3, GPIO_OUTPUT );
1a001124:	2039      	movs	r0, #57	; 0x39
1a001126:	2101      	movs	r1, #1
1a001128:	f000 f828 	bl	1a00117c <gpioConfig>
   gpioConfig( DO4, GPIO_OUTPUT );
1a00112c:	203a      	movs	r0, #58	; 0x3a
1a00112e:	2101      	movs	r1, #1
1a001130:	f000 f824 	bl	1a00117c <gpioConfig>
   gpioConfig( DO5, GPIO_OUTPUT );
1a001134:	203b      	movs	r0, #59	; 0x3b
1a001136:	2101      	movs	r1, #1
1a001138:	f000 f820 	bl	1a00117c <gpioConfig>
   gpioConfig( DO6, GPIO_OUTPUT );
1a00113c:	203c      	movs	r0, #60	; 0x3c
1a00113e:	2101      	movs	r1, #1
1a001140:	f000 f81c 	bl	1a00117c <gpioConfig>
   gpioConfig( DO7, GPIO_OUTPUT );
1a001144:	203d      	movs	r0, #61	; 0x3d
1a001146:	2101      	movs	r1, #1
1a001148:	f000 f818 	bl	1a00117c <gpioConfig>
1a00114c:	bd08      	pop	{r3, pc}
1a00114e:	bf00      	nop

1a001150 <gpioObtainPinConfig>:
/*==================[internal functions definition]==========================*/

static void gpioObtainPinConfig( gpioMap_t pin,
                                int8_t *pinNamePort, int8_t *pinNamePin,
																int8_t *func, int8_t *gpioPort,
																int8_t *gpioPin ){
1a001150:	b430      	push	{r4, r5}

   *pinNamePort = gpioPinsConfig[pin].pinName.port;
1a001152:	4d09      	ldr	r5, [pc, #36]	; (1a001178 <gpioObtainPinConfig+0x28>)
1a001154:	eb00 0080 	add.w	r0, r0, r0, lsl #2
1a001158:	182c      	adds	r4, r5, r0
1a00115a:	5c28      	ldrb	r0, [r5, r0]
1a00115c:	7008      	strb	r0, [r1, #0]
   *pinNamePin  = gpioPinsConfig[pin].pinName.pin;
1a00115e:	7861      	ldrb	r1, [r4, #1]
1a001160:	7011      	strb	r1, [r2, #0]
   *func        = gpioPinsConfig[pin].func;
1a001162:	78a2      	ldrb	r2, [r4, #2]
1a001164:	701a      	strb	r2, [r3, #0]
   *gpioPort    = gpioPinsConfig[pin].gpio.port;
1a001166:	78e2      	ldrb	r2, [r4, #3]
1a001168:	9b02      	ldr	r3, [sp, #8]
1a00116a:	701a      	strb	r2, [r3, #0]
   *gpioPin     = gpioPinsConfig[pin].gpio.pin;
1a00116c:	7922      	ldrb	r2, [r4, #4]
1a00116e:	9b03      	ldr	r3, [sp, #12]
1a001170:	701a      	strb	r2, [r3, #0]
}
1a001172:	bc30      	pop	{r4, r5}
1a001174:	4770      	bx	lr
1a001176:	bf00      	nop
1a001178:	1a001ab4 	.word	0x1a001ab4

1a00117c <gpioConfig>:

/*==================[external functions definition]==========================*/

bool_t gpioConfig( gpioMap_t pin, gpioConfig_t config ){
1a00117c:	b530      	push	{r4, r5, lr}
1a00117e:	b085      	sub	sp, #20
1a001180:	460c      	mov	r4, r1

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a001182:	2300      	movs	r3, #0
1a001184:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a001188:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a00118c:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a001190:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a001194:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinConfig( pin, &pinNamePort, &pinNamePin, &func,
1a001198:	ab03      	add	r3, sp, #12
1a00119a:	9300      	str	r3, [sp, #0]
1a00119c:	f10d 030b 	add.w	r3, sp, #11
1a0011a0:	9301      	str	r3, [sp, #4]
1a0011a2:	f10d 010f 	add.w	r1, sp, #15
1a0011a6:	f10d 020e 	add.w	r2, sp, #14
1a0011aa:	f10d 030d 	add.w	r3, sp, #13
1a0011ae:	f7ff ffcf 	bl	1a001150 <gpioObtainPinConfig>
                           &gpioPort, &gpioPin );

   switch(config){
1a0011b2:	2c05      	cmp	r4, #5
1a0011b4:	f200 8095 	bhi.w	1a0012e2 <gpioConfig+0x166>
1a0011b8:	e8df f004 	tbb	[pc, r4]
1a0011bc:	3c227008 	.word	0x3c227008
1a0011c0:	0356      	.short	0x0356

      case GPIO_ENABLE:
		   /* Initializes GPIO */
		   Chip_GPIO_Init(LPC_GPIO_PORT);
1a0011c2:	4849      	ldr	r0, [pc, #292]	; (1a0012e8 <gpioConfig+0x16c>)
1a0011c4:	f7ff fcf6 	bl	1a000bb4 <Chip_GPIO_Init>

/*==================[external functions definition]==========================*/

bool_t gpioConfig( gpioMap_t pin, gpioConfig_t config ){

   bool_t ret_val     = 1;
1a0011c8:	2001      	movs	r0, #1
   switch(config){

      case GPIO_ENABLE:
		   /* Initializes GPIO */
		   Chip_GPIO_Init(LPC_GPIO_PORT);
	   break;
1a0011ca:	e08b      	b.n	1a0012e4 <gpioConfig+0x168>

      case GPIO_INPUT:
         Chip_SCU_PinMux(
1a0011cc:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a0011d0:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a0011d4:	f89d 200d 	ldrb.w	r2, [sp, #13]
 * @note   Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMux(uint8_t port, uint8_t pin, uint16_t mode, uint8_t func)
{
   Chip_SCU_PinMuxSet(port, pin, (mode | (uint16_t) func));
1a0011d8:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
 * @note   Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMuxSet(uint8_t port, uint8_t pin, uint16_t modefunc)
{
   LPC_SCU->SFSP[port][pin] = modefunc;
1a0011dc:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a0011e0:	4942      	ldr	r1, [pc, #264]	; (1a0012ec <gpioConfig+0x170>)
1a0011e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            pinNamePort,
            pinNamePin,
            SCU_MODE_INACT | SCU_MODE_INBUFF_EN | SCU_MODE_ZIF_DIS,
            func
         );
         Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a0011e6:	f99d 300b 	ldrsb.w	r3, [sp, #11]
1a0011ea:	2401      	movs	r4, #1
1a0011ec:	483e      	ldr	r0, [pc, #248]	; (1a0012e8 <gpioConfig+0x16c>)
1a0011ee:	f89d 100c 	ldrb.w	r1, [sp, #12]
1a0011f2:	fa04 f203 	lsl.w	r2, r4, r3
1a0011f6:	2300      	movs	r3, #0
1a0011f8:	f7ff fcde 	bl	1a000bb8 <Chip_GPIO_SetDir>

/*==================[external functions definition]==========================*/

bool_t gpioConfig( gpioMap_t pin, gpioConfig_t config ){

   bool_t ret_val     = 1;
1a0011fc:	4620      	mov	r0, r4
            pinNamePin,
            SCU_MODE_INACT | SCU_MODE_INBUFF_EN | SCU_MODE_ZIF_DIS,
            func
         );
         Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
      break;
1a0011fe:	e071      	b.n	1a0012e4 <gpioConfig+0x168>

      case GPIO_INPUT_PULLUP:
         Chip_SCU_PinMux(
1a001200:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a001204:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a001208:	f89d 200d 	ldrb.w	r2, [sp, #13]
 * @note   Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMux(uint8_t port, uint8_t pin, uint16_t mode, uint8_t func)
{
   Chip_SCU_PinMuxSet(port, pin, (mode | (uint16_t) func));
1a00120c:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 * @note   Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMuxSet(uint8_t port, uint8_t pin, uint16_t modefunc)
{
   LPC_SCU->SFSP[port][pin] = modefunc;
1a001210:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a001214:	4935      	ldr	r1, [pc, #212]	; (1a0012ec <gpioConfig+0x170>)
1a001216:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            pinNamePort,
            pinNamePin,
            SCU_MODE_PULLUP | SCU_MODE_INBUFF_EN | SCU_MODE_ZIF_DIS,
            func
         );
         Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a00121a:	f99d 300b 	ldrsb.w	r3, [sp, #11]
1a00121e:	2401      	movs	r4, #1
1a001220:	4831      	ldr	r0, [pc, #196]	; (1a0012e8 <gpioConfig+0x16c>)
1a001222:	f89d 100c 	ldrb.w	r1, [sp, #12]
1a001226:	fa04 f203 	lsl.w	r2, r4, r3
1a00122a:	2300      	movs	r3, #0
1a00122c:	f7ff fcc4 	bl	1a000bb8 <Chip_GPIO_SetDir>

/*==================[external functions definition]==========================*/

bool_t gpioConfig( gpioMap_t pin, gpioConfig_t config ){

   bool_t ret_val     = 1;
1a001230:	4620      	mov	r0, r4
            pinNamePin,
            SCU_MODE_PULLUP | SCU_MODE_INBUFF_EN | SCU_MODE_ZIF_DIS,
            func
         );
         Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
      break;
1a001232:	e057      	b.n	1a0012e4 <gpioConfig+0x168>

      case GPIO_INPUT_PULLDOWN:
         Chip_SCU_PinMux(
1a001234:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a001238:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a00123c:	f89d 200d 	ldrb.w	r2, [sp, #13]
 * @note   Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMux(uint8_t port, uint8_t pin, uint16_t mode, uint8_t func)
{
   Chip_SCU_PinMuxSet(port, pin, (mode | (uint16_t) func));
1a001240:	f042 02d8 	orr.w	r2, r2, #216	; 0xd8
 * @note   Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMuxSet(uint8_t port, uint8_t pin, uint16_t modefunc)
{
   LPC_SCU->SFSP[port][pin] = modefunc;
1a001244:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a001248:	4928      	ldr	r1, [pc, #160]	; (1a0012ec <gpioConfig+0x170>)
1a00124a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            pinNamePort,
            pinNamePin,
            SCU_MODE_PULLDOWN | SCU_MODE_INBUFF_EN | SCU_MODE_ZIF_DIS,
            func
         );
         Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a00124e:	f99d 300b 	ldrsb.w	r3, [sp, #11]
1a001252:	2401      	movs	r4, #1
1a001254:	4824      	ldr	r0, [pc, #144]	; (1a0012e8 <gpioConfig+0x16c>)
1a001256:	f89d 100c 	ldrb.w	r1, [sp, #12]
1a00125a:	fa04 f203 	lsl.w	r2, r4, r3
1a00125e:	2300      	movs	r3, #0
1a001260:	f7ff fcaa 	bl	1a000bb8 <Chip_GPIO_SetDir>

/*==================[external functions definition]==========================*/

bool_t gpioConfig( gpioMap_t pin, gpioConfig_t config ){

   bool_t ret_val     = 1;
1a001264:	4620      	mov	r0, r4
            pinNamePin,
            SCU_MODE_PULLDOWN | SCU_MODE_INBUFF_EN | SCU_MODE_ZIF_DIS,
            func
         );
         Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
      break;
1a001266:	e03d      	b.n	1a0012e4 <gpioConfig+0x168>
      case GPIO_INPUT_PULLUP_PULLDOWN:
         Chip_SCU_PinMux(
1a001268:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a00126c:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a001270:	f89d 200d 	ldrb.w	r2, [sp, #13]
 * @note   Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMux(uint8_t port, uint8_t pin, uint16_t mode, uint8_t func)
{
   Chip_SCU_PinMuxSet(port, pin, (mode | (uint16_t) func));
1a001274:	f042 02c8 	orr.w	r2, r2, #200	; 0xc8
 * @note   Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMuxSet(uint8_t port, uint8_t pin, uint16_t modefunc)
{
   LPC_SCU->SFSP[port][pin] = modefunc;
1a001278:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a00127c:	491b      	ldr	r1, [pc, #108]	; (1a0012ec <gpioConfig+0x170>)
1a00127e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            pinNamePort,
            pinNamePin,
            SCU_MODE_REPEATER | SCU_MODE_INBUFF_EN | SCU_MODE_ZIF_DIS,
            func
         );
         Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a001282:	f99d 300b 	ldrsb.w	r3, [sp, #11]
1a001286:	2401      	movs	r4, #1
1a001288:	4817      	ldr	r0, [pc, #92]	; (1a0012e8 <gpioConfig+0x16c>)
1a00128a:	f89d 100c 	ldrb.w	r1, [sp, #12]
1a00128e:	fa04 f203 	lsl.w	r2, r4, r3
1a001292:	2300      	movs	r3, #0
1a001294:	f7ff fc90 	bl	1a000bb8 <Chip_GPIO_SetDir>

/*==================[external functions definition]==========================*/

bool_t gpioConfig( gpioMap_t pin, gpioConfig_t config ){

   bool_t ret_val     = 1;
1a001298:	4620      	mov	r0, r4
            pinNamePin,
            SCU_MODE_REPEATER | SCU_MODE_INBUFF_EN | SCU_MODE_ZIF_DIS,
            func
         );
         Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
      break;
1a00129a:	e023      	b.n	1a0012e4 <gpioConfig+0x168>

      case GPIO_OUTPUT:
         Chip_SCU_PinMux(
1a00129c:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a0012a0:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a0012a4:	f89d 200d 	ldrb.w	r2, [sp, #13]
 * @note   Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMux(uint8_t port, uint8_t pin, uint16_t mode, uint8_t func)
{
   Chip_SCU_PinMuxSet(port, pin, (mode | (uint16_t) func));
1a0012a8:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
 * @note   Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMuxSet(uint8_t port, uint8_t pin, uint16_t modefunc)
{
   LPC_SCU->SFSP[port][pin] = modefunc;
1a0012ac:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a0012b0:	490e      	ldr	r1, [pc, #56]	; (1a0012ec <gpioConfig+0x170>)
1a0012b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            pinNamePort,
            pinNamePin,
            SCU_MODE_INACT | SCU_MODE_ZIF_DIS | SCU_MODE_INBUFF_EN,
            func
         );
         Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_OUTPUT );
1a0012b6:	f99d 300b 	ldrsb.w	r3, [sp, #11]
1a0012ba:	2401      	movs	r4, #1
1a0012bc:	4d0a      	ldr	r5, [pc, #40]	; (1a0012e8 <gpioConfig+0x16c>)
1a0012be:	4628      	mov	r0, r5
1a0012c0:	f89d 100c 	ldrb.w	r1, [sp, #12]
1a0012c4:	fa04 f203 	lsl.w	r2, r4, r3
1a0012c8:	4623      	mov	r3, r4
1a0012ca:	f7ff fc75 	bl	1a000bb8 <Chip_GPIO_SetDir>
         Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, 0);
1a0012ce:	f89d 200c 	ldrb.w	r2, [sp, #12]
1a0012d2:	f89d 300b 	ldrb.w	r3, [sp, #11]
1a0012d6:	eb03 1342 	add.w	r3, r3, r2, lsl #5
1a0012da:	2200      	movs	r2, #0
1a0012dc:	54ea      	strb	r2, [r5, r3]

/*==================[external functions definition]==========================*/

bool_t gpioConfig( gpioMap_t pin, gpioConfig_t config ){

   bool_t ret_val     = 1;
1a0012de:	4620      	mov	r0, r4
1a0012e0:	e000      	b.n	1a0012e4 <gpioConfig+0x168>
         Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_OUTPUT );
         Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, 0);
      break;

      default:
         ret_val = 0;
1a0012e2:	2000      	movs	r0, #0
      break;
   }

   return ret_val;

}
1a0012e4:	b005      	add	sp, #20
1a0012e6:	bd30      	pop	{r4, r5, pc}
1a0012e8:	400f4000 	.word	0x400f4000
1a0012ec:	40086000 	.word	0x40086000

1a0012f0 <gpioWrite>:


bool_t gpioWrite( gpioMap_t pin, bool_t value ){
1a0012f0:	b510      	push	{r4, lr}
1a0012f2:	b084      	sub	sp, #16
1a0012f4:	460c      	mov	r4, r1

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a0012f6:	2300      	movs	r3, #0
1a0012f8:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a0012fc:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a001300:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a001304:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a001308:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinConfig( pin, &pinNamePort, &pinNamePin, &func,
1a00130c:	ab03      	add	r3, sp, #12
1a00130e:	9300      	str	r3, [sp, #0]
1a001310:	f10d 030b 	add.w	r3, sp, #11
1a001314:	9301      	str	r3, [sp, #4]
1a001316:	f10d 010f 	add.w	r1, sp, #15
1a00131a:	f10d 020e 	add.w	r2, sp, #14
1a00131e:	f10d 030d 	add.w	r3, sp, #13
1a001322:	f7ff ff15 	bl	1a001150 <gpioObtainPinConfig>
                           &gpioPort, &gpioPin );

   Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, value);
1a001326:	f89d 200c 	ldrb.w	r2, [sp, #12]
1a00132a:	f89d 300b 	ldrb.w	r3, [sp, #11]
1a00132e:	3400      	adds	r4, #0
1a001330:	bf18      	it	ne
1a001332:	2401      	movne	r4, #1
1a001334:	eb03 1342 	add.w	r3, r3, r2, lsl #5
1a001338:	4a02      	ldr	r2, [pc, #8]	; (1a001344 <gpioWrite+0x54>)
1a00133a:	54d4      	strb	r4, [r2, r3]

   return ret_val;
}
1a00133c:	2001      	movs	r0, #1
1a00133e:	b004      	add	sp, #16
1a001340:	bd10      	pop	{r4, pc}
1a001342:	bf00      	nop
1a001344:	400f4000 	.word	0x400f4000

1a001348 <gpioRead>:

   return gpioWrite( pin, !gpioRead(pin) );
}


bool_t gpioRead( gpioMap_t pin ){
1a001348:	b500      	push	{lr}
1a00134a:	b085      	sub	sp, #20

   bool_t ret_val     = OFF;

   int8_t pinNamePort = 0;
1a00134c:	2300      	movs	r3, #0
1a00134e:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a001352:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a001356:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a00135a:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a00135e:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinConfig( pin, &pinNamePort, &pinNamePin, &func,
1a001362:	ab03      	add	r3, sp, #12
1a001364:	9300      	str	r3, [sp, #0]
1a001366:	f10d 030b 	add.w	r3, sp, #11
1a00136a:	9301      	str	r3, [sp, #4]
1a00136c:	f10d 010f 	add.w	r1, sp, #15
1a001370:	f10d 020e 	add.w	r2, sp, #14
1a001374:	f10d 030d 	add.w	r3, sp, #13
1a001378:	f7ff feea 	bl	1a001150 <gpioObtainPinConfig>
                           &gpioPort, &gpioPin );

   ret_val = (bool_t) Chip_GPIO_ReadPortBit( LPC_GPIO_PORT, gpioPort, gpioPin );
1a00137c:	f99d 200c 	ldrsb.w	r2, [sp, #12]
1a001380:	f89d 300b 	ldrb.w	r3, [sp, #11]
 * @return true of the GPIO is high, false if low
 * @note   It is recommended to use the Chip_GPIO_GetPinState() function instead.
 */
STATIC INLINE bool Chip_GPIO_ReadPortBit(LPC_GPIO_T *pGPIO, uint32_t port, uint8_t pin)
{
   return (bool) pGPIO->B[port][pin];
1a001384:	eb03 1342 	add.w	r3, r3, r2, lsl #5
1a001388:	4a04      	ldr	r2, [pc, #16]	; (1a00139c <gpioRead+0x54>)
1a00138a:	5cd3      	ldrb	r3, [r2, r3]
1a00138c:	f013 0fff 	tst.w	r3, #255	; 0xff

   return ret_val;
}
1a001390:	bf14      	ite	ne
1a001392:	2001      	movne	r0, #1
1a001394:	2000      	moveq	r0, #0
1a001396:	b005      	add	sp, #20
1a001398:	f85d fb04 	ldr.w	pc, [sp], #4
1a00139c:	400f4000 	.word	0x400f4000

1a0013a0 <gpioToggle>:

   return ret_val;
}


bool_t gpioToggle( gpioMap_t pin ){
1a0013a0:	b510      	push	{r4, lr}
1a0013a2:	4604      	mov	r4, r0

   return gpioWrite( pin, !gpioRead(pin) );
1a0013a4:	f7ff ffd0 	bl	1a001348 <gpioRead>
1a0013a8:	fab0 f180 	clz	r1, r0
1a0013ac:	0949      	lsrs	r1, r1, #5
1a0013ae:	4620      	mov	r0, r4
1a0013b0:	f7ff ff9e 	bl	1a0012f0 <gpioWrite>
}
1a0013b4:	bd10      	pop	{r4, pc}
1a0013b6:	bf00      	nop

1a0013b8 <__aeabi_uldivmod>:
1a0013b8:	b953      	cbnz	r3, 1a0013d0 <__aeabi_uldivmod+0x18>
1a0013ba:	b94a      	cbnz	r2, 1a0013d0 <__aeabi_uldivmod+0x18>
1a0013bc:	2900      	cmp	r1, #0
1a0013be:	bf08      	it	eq
1a0013c0:	2800      	cmpeq	r0, #0
1a0013c2:	bf1c      	itt	ne
1a0013c4:	f04f 31ff 	movne.w	r1, #4294967295
1a0013c8:	f04f 30ff 	movne.w	r0, #4294967295
1a0013cc:	f000 b83c 	b.w	1a001448 <__aeabi_idiv0>
1a0013d0:	b082      	sub	sp, #8
1a0013d2:	46ec      	mov	ip, sp
1a0013d4:	e92d 5000 	stmdb	sp!, {ip, lr}
1a0013d8:	f000 f81e 	bl	1a001418 <__gnu_uldivmod_helper>
1a0013dc:	f8dd e004 	ldr.w	lr, [sp, #4]
1a0013e0:	b002      	add	sp, #8
1a0013e2:	bc0c      	pop	{r2, r3}
1a0013e4:	4770      	bx	lr
1a0013e6:	bf00      	nop

1a0013e8 <__gnu_ldivmod_helper>:
1a0013e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a0013ec:	9c06      	ldr	r4, [sp, #24]
1a0013ee:	4615      	mov	r5, r2
1a0013f0:	4606      	mov	r6, r0
1a0013f2:	460f      	mov	r7, r1
1a0013f4:	4698      	mov	r8, r3
1a0013f6:	f000 f829 	bl	1a00144c <__divdi3>
1a0013fa:	fb05 f301 	mul.w	r3, r5, r1
1a0013fe:	fb00 3808 	mla	r8, r0, r8, r3
1a001402:	fba5 2300 	umull	r2, r3, r5, r0
1a001406:	1ab2      	subs	r2, r6, r2
1a001408:	4443      	add	r3, r8
1a00140a:	eb67 0303 	sbc.w	r3, r7, r3
1a00140e:	e9c4 2300 	strd	r2, r3, [r4]
1a001412:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a001416:	bf00      	nop

1a001418 <__gnu_uldivmod_helper>:
1a001418:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a00141c:	9c06      	ldr	r4, [sp, #24]
1a00141e:	4690      	mov	r8, r2
1a001420:	4606      	mov	r6, r0
1a001422:	460f      	mov	r7, r1
1a001424:	461d      	mov	r5, r3
1a001426:	f000 f95f 	bl	1a0016e8 <__udivdi3>
1a00142a:	fb00 f505 	mul.w	r5, r0, r5
1a00142e:	fba0 2308 	umull	r2, r3, r0, r8
1a001432:	fb08 5501 	mla	r5, r8, r1, r5
1a001436:	1ab2      	subs	r2, r6, r2
1a001438:	442b      	add	r3, r5
1a00143a:	eb67 0303 	sbc.w	r3, r7, r3
1a00143e:	e9c4 2300 	strd	r2, r3, [r4]
1a001442:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a001446:	bf00      	nop

1a001448 <__aeabi_idiv0>:
1a001448:	4770      	bx	lr
1a00144a:	bf00      	nop

1a00144c <__divdi3>:
1a00144c:	2900      	cmp	r1, #0
1a00144e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
1a001452:	f2c0 80a6 	blt.w	1a0015a2 <__divdi3+0x156>
1a001456:	2600      	movs	r6, #0
1a001458:	2b00      	cmp	r3, #0
1a00145a:	f2c0 809c 	blt.w	1a001596 <__divdi3+0x14a>
1a00145e:	4688      	mov	r8, r1
1a001460:	4694      	mov	ip, r2
1a001462:	469e      	mov	lr, r3
1a001464:	4615      	mov	r5, r2
1a001466:	4604      	mov	r4, r0
1a001468:	460f      	mov	r7, r1
1a00146a:	2b00      	cmp	r3, #0
1a00146c:	d13d      	bne.n	1a0014ea <__divdi3+0x9e>
1a00146e:	428a      	cmp	r2, r1
1a001470:	d959      	bls.n	1a001526 <__divdi3+0xda>
1a001472:	fab2 f382 	clz	r3, r2
1a001476:	b13b      	cbz	r3, 1a001488 <__divdi3+0x3c>
1a001478:	f1c3 0220 	rsb	r2, r3, #32
1a00147c:	409f      	lsls	r7, r3
1a00147e:	fa20 f202 	lsr.w	r2, r0, r2
1a001482:	409d      	lsls	r5, r3
1a001484:	4317      	orrs	r7, r2
1a001486:	409c      	lsls	r4, r3
1a001488:	0c29      	lsrs	r1, r5, #16
1a00148a:	0c22      	lsrs	r2, r4, #16
1a00148c:	fbb7 fef1 	udiv	lr, r7, r1
1a001490:	b2a8      	uxth	r0, r5
1a001492:	fb01 771e 	mls	r7, r1, lr, r7
1a001496:	ea42 4707 	orr.w	r7, r2, r7, lsl #16
1a00149a:	fb00 f30e 	mul.w	r3, r0, lr
1a00149e:	42bb      	cmp	r3, r7
1a0014a0:	d90a      	bls.n	1a0014b8 <__divdi3+0x6c>
1a0014a2:	197f      	adds	r7, r7, r5
1a0014a4:	f10e 32ff 	add.w	r2, lr, #4294967295
1a0014a8:	f080 8105 	bcs.w	1a0016b6 <__divdi3+0x26a>
1a0014ac:	42bb      	cmp	r3, r7
1a0014ae:	f240 8102 	bls.w	1a0016b6 <__divdi3+0x26a>
1a0014b2:	f1ae 0e02 	sub.w	lr, lr, #2
1a0014b6:	442f      	add	r7, r5
1a0014b8:	1aff      	subs	r7, r7, r3
1a0014ba:	b2a4      	uxth	r4, r4
1a0014bc:	fbb7 f3f1 	udiv	r3, r7, r1
1a0014c0:	fb01 7713 	mls	r7, r1, r3, r7
1a0014c4:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
1a0014c8:	fb00 f003 	mul.w	r0, r0, r3
1a0014cc:	42b8      	cmp	r0, r7
1a0014ce:	d908      	bls.n	1a0014e2 <__divdi3+0x96>
1a0014d0:	197f      	adds	r7, r7, r5
1a0014d2:	f103 32ff 	add.w	r2, r3, #4294967295
1a0014d6:	f080 80f0 	bcs.w	1a0016ba <__divdi3+0x26e>
1a0014da:	42b8      	cmp	r0, r7
1a0014dc:	f240 80ed 	bls.w	1a0016ba <__divdi3+0x26e>
1a0014e0:	3b02      	subs	r3, #2
1a0014e2:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
1a0014e6:	2200      	movs	r2, #0
1a0014e8:	e003      	b.n	1a0014f2 <__divdi3+0xa6>
1a0014ea:	428b      	cmp	r3, r1
1a0014ec:	d90f      	bls.n	1a00150e <__divdi3+0xc2>
1a0014ee:	2200      	movs	r2, #0
1a0014f0:	4613      	mov	r3, r2
1a0014f2:	1c34      	adds	r4, r6, #0
1a0014f4:	bf18      	it	ne
1a0014f6:	2401      	movne	r4, #1
1a0014f8:	4260      	negs	r0, r4
1a0014fa:	f04f 0500 	mov.w	r5, #0
1a0014fe:	eb65 0145 	sbc.w	r1, r5, r5, lsl #1
1a001502:	4058      	eors	r0, r3
1a001504:	4051      	eors	r1, r2
1a001506:	1900      	adds	r0, r0, r4
1a001508:	4169      	adcs	r1, r5
1a00150a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
1a00150e:	fab3 f283 	clz	r2, r3
1a001512:	2a00      	cmp	r2, #0
1a001514:	f040 8086 	bne.w	1a001624 <__divdi3+0x1d8>
1a001518:	428b      	cmp	r3, r1
1a00151a:	d302      	bcc.n	1a001522 <__divdi3+0xd6>
1a00151c:	4584      	cmp	ip, r0
1a00151e:	f200 80db 	bhi.w	1a0016d8 <__divdi3+0x28c>
1a001522:	2301      	movs	r3, #1
1a001524:	e7e5      	b.n	1a0014f2 <__divdi3+0xa6>
1a001526:	b912      	cbnz	r2, 1a00152e <__divdi3+0xe2>
1a001528:	2301      	movs	r3, #1
1a00152a:	fbb3 f5f2 	udiv	r5, r3, r2
1a00152e:	fab5 f085 	clz	r0, r5
1a001532:	2800      	cmp	r0, #0
1a001534:	d13b      	bne.n	1a0015ae <__divdi3+0x162>
1a001536:	1b78      	subs	r0, r7, r5
1a001538:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a00153c:	fa1f fc85 	uxth.w	ip, r5
1a001540:	2201      	movs	r2, #1
1a001542:	fbb0 f8fe 	udiv	r8, r0, lr
1a001546:	0c21      	lsrs	r1, r4, #16
1a001548:	fb0e 0718 	mls	r7, lr, r8, r0
1a00154c:	ea41 4707 	orr.w	r7, r1, r7, lsl #16
1a001550:	fb0c f308 	mul.w	r3, ip, r8
1a001554:	42bb      	cmp	r3, r7
1a001556:	d907      	bls.n	1a001568 <__divdi3+0x11c>
1a001558:	197f      	adds	r7, r7, r5
1a00155a:	f108 31ff 	add.w	r1, r8, #4294967295
1a00155e:	d202      	bcs.n	1a001566 <__divdi3+0x11a>
1a001560:	42bb      	cmp	r3, r7
1a001562:	f200 80bd 	bhi.w	1a0016e0 <__divdi3+0x294>
1a001566:	4688      	mov	r8, r1
1a001568:	1aff      	subs	r7, r7, r3
1a00156a:	b2a4      	uxth	r4, r4
1a00156c:	fbb7 f3fe 	udiv	r3, r7, lr
1a001570:	fb0e 7713 	mls	r7, lr, r3, r7
1a001574:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
1a001578:	fb0c fc03 	mul.w	ip, ip, r3
1a00157c:	45bc      	cmp	ip, r7
1a00157e:	d907      	bls.n	1a001590 <__divdi3+0x144>
1a001580:	197f      	adds	r7, r7, r5
1a001582:	f103 31ff 	add.w	r1, r3, #4294967295
1a001586:	d202      	bcs.n	1a00158e <__divdi3+0x142>
1a001588:	45bc      	cmp	ip, r7
1a00158a:	f200 80a7 	bhi.w	1a0016dc <__divdi3+0x290>
1a00158e:	460b      	mov	r3, r1
1a001590:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
1a001594:	e7ad      	b.n	1a0014f2 <__divdi3+0xa6>
1a001596:	4252      	negs	r2, r2
1a001598:	ea6f 0606 	mvn.w	r6, r6
1a00159c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
1a0015a0:	e75d      	b.n	1a00145e <__divdi3+0x12>
1a0015a2:	4240      	negs	r0, r0
1a0015a4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
1a0015a8:	f04f 36ff 	mov.w	r6, #4294967295
1a0015ac:	e754      	b.n	1a001458 <__divdi3+0xc>
1a0015ae:	f1c0 0220 	rsb	r2, r0, #32
1a0015b2:	fa24 f102 	lsr.w	r1, r4, r2
1a0015b6:	fa07 f300 	lsl.w	r3, r7, r0
1a0015ba:	4085      	lsls	r5, r0
1a0015bc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a0015c0:	40d7      	lsrs	r7, r2
1a0015c2:	4319      	orrs	r1, r3
1a0015c4:	fbb7 f2fe 	udiv	r2, r7, lr
1a0015c8:	0c0b      	lsrs	r3, r1, #16
1a0015ca:	fb0e 7712 	mls	r7, lr, r2, r7
1a0015ce:	fa1f fc85 	uxth.w	ip, r5
1a0015d2:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
1a0015d6:	fb0c f702 	mul.w	r7, ip, r2
1a0015da:	429f      	cmp	r7, r3
1a0015dc:	fa04 f400 	lsl.w	r4, r4, r0
1a0015e0:	d907      	bls.n	1a0015f2 <__divdi3+0x1a6>
1a0015e2:	195b      	adds	r3, r3, r5
1a0015e4:	f102 30ff 	add.w	r0, r2, #4294967295
1a0015e8:	d274      	bcs.n	1a0016d4 <__divdi3+0x288>
1a0015ea:	429f      	cmp	r7, r3
1a0015ec:	d972      	bls.n	1a0016d4 <__divdi3+0x288>
1a0015ee:	3a02      	subs	r2, #2
1a0015f0:	442b      	add	r3, r5
1a0015f2:	1bdf      	subs	r7, r3, r7
1a0015f4:	b289      	uxth	r1, r1
1a0015f6:	fbb7 f8fe 	udiv	r8, r7, lr
1a0015fa:	fb0e 7318 	mls	r3, lr, r8, r7
1a0015fe:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
1a001602:	fb0c f708 	mul.w	r7, ip, r8
1a001606:	429f      	cmp	r7, r3
1a001608:	d908      	bls.n	1a00161c <__divdi3+0x1d0>
1a00160a:	195b      	adds	r3, r3, r5
1a00160c:	f108 31ff 	add.w	r1, r8, #4294967295
1a001610:	d25c      	bcs.n	1a0016cc <__divdi3+0x280>
1a001612:	429f      	cmp	r7, r3
1a001614:	d95a      	bls.n	1a0016cc <__divdi3+0x280>
1a001616:	f1a8 0802 	sub.w	r8, r8, #2
1a00161a:	442b      	add	r3, r5
1a00161c:	1bd8      	subs	r0, r3, r7
1a00161e:	ea48 4202 	orr.w	r2, r8, r2, lsl #16
1a001622:	e78e      	b.n	1a001542 <__divdi3+0xf6>
1a001624:	f1c2 0320 	rsb	r3, r2, #32
1a001628:	fa2c f103 	lsr.w	r1, ip, r3
1a00162c:	fa0e fe02 	lsl.w	lr, lr, r2
1a001630:	fa20 f703 	lsr.w	r7, r0, r3
1a001634:	ea41 0e0e 	orr.w	lr, r1, lr
1a001638:	fa08 f002 	lsl.w	r0, r8, r2
1a00163c:	fa28 f103 	lsr.w	r1, r8, r3
1a001640:	ea4f 451e 	mov.w	r5, lr, lsr #16
1a001644:	4338      	orrs	r0, r7
1a001646:	fbb1 f8f5 	udiv	r8, r1, r5
1a00164a:	0c03      	lsrs	r3, r0, #16
1a00164c:	fb05 1118 	mls	r1, r5, r8, r1
1a001650:	fa1f f78e 	uxth.w	r7, lr
1a001654:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
1a001658:	fb07 f308 	mul.w	r3, r7, r8
1a00165c:	428b      	cmp	r3, r1
1a00165e:	fa0c fc02 	lsl.w	ip, ip, r2
1a001662:	d909      	bls.n	1a001678 <__divdi3+0x22c>
1a001664:	eb11 010e 	adds.w	r1, r1, lr
1a001668:	f108 39ff 	add.w	r9, r8, #4294967295
1a00166c:	d230      	bcs.n	1a0016d0 <__divdi3+0x284>
1a00166e:	428b      	cmp	r3, r1
1a001670:	d92e      	bls.n	1a0016d0 <__divdi3+0x284>
1a001672:	f1a8 0802 	sub.w	r8, r8, #2
1a001676:	4471      	add	r1, lr
1a001678:	1ac9      	subs	r1, r1, r3
1a00167a:	b280      	uxth	r0, r0
1a00167c:	fbb1 f3f5 	udiv	r3, r1, r5
1a001680:	fb05 1113 	mls	r1, r5, r3, r1
1a001684:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
1a001688:	fb07 f703 	mul.w	r7, r7, r3
1a00168c:	428f      	cmp	r7, r1
1a00168e:	d908      	bls.n	1a0016a2 <__divdi3+0x256>
1a001690:	eb11 010e 	adds.w	r1, r1, lr
1a001694:	f103 30ff 	add.w	r0, r3, #4294967295
1a001698:	d216      	bcs.n	1a0016c8 <__divdi3+0x27c>
1a00169a:	428f      	cmp	r7, r1
1a00169c:	d914      	bls.n	1a0016c8 <__divdi3+0x27c>
1a00169e:	3b02      	subs	r3, #2
1a0016a0:	4471      	add	r1, lr
1a0016a2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
1a0016a6:	1bc9      	subs	r1, r1, r7
1a0016a8:	fba3 890c 	umull	r8, r9, r3, ip
1a0016ac:	4549      	cmp	r1, r9
1a0016ae:	d309      	bcc.n	1a0016c4 <__divdi3+0x278>
1a0016b0:	d005      	beq.n	1a0016be <__divdi3+0x272>
1a0016b2:	2200      	movs	r2, #0
1a0016b4:	e71d      	b.n	1a0014f2 <__divdi3+0xa6>
1a0016b6:	4696      	mov	lr, r2
1a0016b8:	e6fe      	b.n	1a0014b8 <__divdi3+0x6c>
1a0016ba:	4613      	mov	r3, r2
1a0016bc:	e711      	b.n	1a0014e2 <__divdi3+0x96>
1a0016be:	4094      	lsls	r4, r2
1a0016c0:	4544      	cmp	r4, r8
1a0016c2:	d2f6      	bcs.n	1a0016b2 <__divdi3+0x266>
1a0016c4:	3b01      	subs	r3, #1
1a0016c6:	e7f4      	b.n	1a0016b2 <__divdi3+0x266>
1a0016c8:	4603      	mov	r3, r0
1a0016ca:	e7ea      	b.n	1a0016a2 <__divdi3+0x256>
1a0016cc:	4688      	mov	r8, r1
1a0016ce:	e7a5      	b.n	1a00161c <__divdi3+0x1d0>
1a0016d0:	46c8      	mov	r8, r9
1a0016d2:	e7d1      	b.n	1a001678 <__divdi3+0x22c>
1a0016d4:	4602      	mov	r2, r0
1a0016d6:	e78c      	b.n	1a0015f2 <__divdi3+0x1a6>
1a0016d8:	4613      	mov	r3, r2
1a0016da:	e70a      	b.n	1a0014f2 <__divdi3+0xa6>
1a0016dc:	3b02      	subs	r3, #2
1a0016de:	e757      	b.n	1a001590 <__divdi3+0x144>
1a0016e0:	f1a8 0802 	sub.w	r8, r8, #2
1a0016e4:	442f      	add	r7, r5
1a0016e6:	e73f      	b.n	1a001568 <__divdi3+0x11c>

1a0016e8 <__udivdi3>:
1a0016e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a0016ec:	2b00      	cmp	r3, #0
1a0016ee:	d144      	bne.n	1a00177a <__udivdi3+0x92>
1a0016f0:	428a      	cmp	r2, r1
1a0016f2:	4615      	mov	r5, r2
1a0016f4:	4604      	mov	r4, r0
1a0016f6:	d94f      	bls.n	1a001798 <__udivdi3+0xb0>
1a0016f8:	fab2 f782 	clz	r7, r2
1a0016fc:	460e      	mov	r6, r1
1a0016fe:	b14f      	cbz	r7, 1a001714 <__udivdi3+0x2c>
1a001700:	f1c7 0320 	rsb	r3, r7, #32
1a001704:	40b9      	lsls	r1, r7
1a001706:	fa20 f603 	lsr.w	r6, r0, r3
1a00170a:	fa02 f507 	lsl.w	r5, r2, r7
1a00170e:	430e      	orrs	r6, r1
1a001710:	fa00 f407 	lsl.w	r4, r0, r7
1a001714:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a001718:	0c23      	lsrs	r3, r4, #16
1a00171a:	fbb6 f0fe 	udiv	r0, r6, lr
1a00171e:	b2af      	uxth	r7, r5
1a001720:	fb0e 6110 	mls	r1, lr, r0, r6
1a001724:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a001728:	fb07 f100 	mul.w	r1, r7, r0
1a00172c:	4299      	cmp	r1, r3
1a00172e:	d909      	bls.n	1a001744 <__udivdi3+0x5c>
1a001730:	195b      	adds	r3, r3, r5
1a001732:	f100 32ff 	add.w	r2, r0, #4294967295
1a001736:	f080 80ec 	bcs.w	1a001912 <__udivdi3+0x22a>
1a00173a:	4299      	cmp	r1, r3
1a00173c:	f240 80e9 	bls.w	1a001912 <__udivdi3+0x22a>
1a001740:	3802      	subs	r0, #2
1a001742:	442b      	add	r3, r5
1a001744:	1a5a      	subs	r2, r3, r1
1a001746:	b2a4      	uxth	r4, r4
1a001748:	fbb2 f3fe 	udiv	r3, r2, lr
1a00174c:	fb0e 2213 	mls	r2, lr, r3, r2
1a001750:	ea44 4202 	orr.w	r2, r4, r2, lsl #16
1a001754:	fb07 f703 	mul.w	r7, r7, r3
1a001758:	4297      	cmp	r7, r2
1a00175a:	d908      	bls.n	1a00176e <__udivdi3+0x86>
1a00175c:	1952      	adds	r2, r2, r5
1a00175e:	f103 31ff 	add.w	r1, r3, #4294967295
1a001762:	f080 80d8 	bcs.w	1a001916 <__udivdi3+0x22e>
1a001766:	4297      	cmp	r7, r2
1a001768:	f240 80d5 	bls.w	1a001916 <__udivdi3+0x22e>
1a00176c:	3b02      	subs	r3, #2
1a00176e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
1a001772:	2600      	movs	r6, #0
1a001774:	4631      	mov	r1, r6
1a001776:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a00177a:	428b      	cmp	r3, r1
1a00177c:	d847      	bhi.n	1a00180e <__udivdi3+0x126>
1a00177e:	fab3 f683 	clz	r6, r3
1a001782:	2e00      	cmp	r6, #0
1a001784:	d148      	bne.n	1a001818 <__udivdi3+0x130>
1a001786:	428b      	cmp	r3, r1
1a001788:	d302      	bcc.n	1a001790 <__udivdi3+0xa8>
1a00178a:	4282      	cmp	r2, r0
1a00178c:	f200 80cd 	bhi.w	1a00192a <__udivdi3+0x242>
1a001790:	2001      	movs	r0, #1
1a001792:	4631      	mov	r1, r6
1a001794:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a001798:	b912      	cbnz	r2, 1a0017a0 <__udivdi3+0xb8>
1a00179a:	2501      	movs	r5, #1
1a00179c:	fbb5 f5f2 	udiv	r5, r5, r2
1a0017a0:	fab5 f885 	clz	r8, r5
1a0017a4:	f1b8 0f00 	cmp.w	r8, #0
1a0017a8:	d177      	bne.n	1a00189a <__udivdi3+0x1b2>
1a0017aa:	1b4a      	subs	r2, r1, r5
1a0017ac:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a0017b0:	b2af      	uxth	r7, r5
1a0017b2:	2601      	movs	r6, #1
1a0017b4:	fbb2 f0fe 	udiv	r0, r2, lr
1a0017b8:	0c23      	lsrs	r3, r4, #16
1a0017ba:	fb0e 2110 	mls	r1, lr, r0, r2
1a0017be:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
1a0017c2:	fb07 f300 	mul.w	r3, r7, r0
1a0017c6:	428b      	cmp	r3, r1
1a0017c8:	d907      	bls.n	1a0017da <__udivdi3+0xf2>
1a0017ca:	1949      	adds	r1, r1, r5
1a0017cc:	f100 32ff 	add.w	r2, r0, #4294967295
1a0017d0:	d202      	bcs.n	1a0017d8 <__udivdi3+0xf0>
1a0017d2:	428b      	cmp	r3, r1
1a0017d4:	f200 80ba 	bhi.w	1a00194c <__udivdi3+0x264>
1a0017d8:	4610      	mov	r0, r2
1a0017da:	1ac9      	subs	r1, r1, r3
1a0017dc:	b2a4      	uxth	r4, r4
1a0017de:	fbb1 f3fe 	udiv	r3, r1, lr
1a0017e2:	fb0e 1113 	mls	r1, lr, r3, r1
1a0017e6:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
1a0017ea:	fb07 f703 	mul.w	r7, r7, r3
1a0017ee:	42a7      	cmp	r7, r4
1a0017f0:	d908      	bls.n	1a001804 <__udivdi3+0x11c>
1a0017f2:	1964      	adds	r4, r4, r5
1a0017f4:	f103 32ff 	add.w	r2, r3, #4294967295
1a0017f8:	f080 808f 	bcs.w	1a00191a <__udivdi3+0x232>
1a0017fc:	42a7      	cmp	r7, r4
1a0017fe:	f240 808c 	bls.w	1a00191a <__udivdi3+0x232>
1a001802:	3b02      	subs	r3, #2
1a001804:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
1a001808:	4631      	mov	r1, r6
1a00180a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a00180e:	2600      	movs	r6, #0
1a001810:	4630      	mov	r0, r6
1a001812:	4631      	mov	r1, r6
1a001814:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a001818:	f1c6 0420 	rsb	r4, r6, #32
1a00181c:	fa22 f504 	lsr.w	r5, r2, r4
1a001820:	40b3      	lsls	r3, r6
1a001822:	432b      	orrs	r3, r5
1a001824:	fa20 fc04 	lsr.w	ip, r0, r4
1a001828:	fa01 f706 	lsl.w	r7, r1, r6
1a00182c:	fa21 f504 	lsr.w	r5, r1, r4
1a001830:	ea4f 4e13 	mov.w	lr, r3, lsr #16
1a001834:	ea4c 0707 	orr.w	r7, ip, r7
1a001838:	fbb5 f8fe 	udiv	r8, r5, lr
1a00183c:	0c39      	lsrs	r1, r7, #16
1a00183e:	fb0e 5518 	mls	r5, lr, r8, r5
1a001842:	fa1f fc83 	uxth.w	ip, r3
1a001846:	ea41 4505 	orr.w	r5, r1, r5, lsl #16
1a00184a:	fb0c f108 	mul.w	r1, ip, r8
1a00184e:	42a9      	cmp	r1, r5
1a001850:	fa02 f206 	lsl.w	r2, r2, r6
1a001854:	d904      	bls.n	1a001860 <__udivdi3+0x178>
1a001856:	18ed      	adds	r5, r5, r3
1a001858:	f108 34ff 	add.w	r4, r8, #4294967295
1a00185c:	d367      	bcc.n	1a00192e <__udivdi3+0x246>
1a00185e:	46a0      	mov	r8, r4
1a001860:	1a6d      	subs	r5, r5, r1
1a001862:	b2bf      	uxth	r7, r7
1a001864:	fbb5 f4fe 	udiv	r4, r5, lr
1a001868:	fb0e 5514 	mls	r5, lr, r4, r5
1a00186c:	ea47 4105 	orr.w	r1, r7, r5, lsl #16
1a001870:	fb0c fc04 	mul.w	ip, ip, r4
1a001874:	458c      	cmp	ip, r1
1a001876:	d904      	bls.n	1a001882 <__udivdi3+0x19a>
1a001878:	18c9      	adds	r1, r1, r3
1a00187a:	f104 35ff 	add.w	r5, r4, #4294967295
1a00187e:	d35c      	bcc.n	1a00193a <__udivdi3+0x252>
1a001880:	462c      	mov	r4, r5
1a001882:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
1a001886:	ebcc 0101 	rsb	r1, ip, r1
1a00188a:	fba4 2302 	umull	r2, r3, r4, r2
1a00188e:	4299      	cmp	r1, r3
1a001890:	d348      	bcc.n	1a001924 <__udivdi3+0x23c>
1a001892:	d044      	beq.n	1a00191e <__udivdi3+0x236>
1a001894:	4620      	mov	r0, r4
1a001896:	2600      	movs	r6, #0
1a001898:	e76c      	b.n	1a001774 <__udivdi3+0x8c>
1a00189a:	f1c8 0420 	rsb	r4, r8, #32
1a00189e:	fa01 f308 	lsl.w	r3, r1, r8
1a0018a2:	fa05 f508 	lsl.w	r5, r5, r8
1a0018a6:	fa20 f704 	lsr.w	r7, r0, r4
1a0018aa:	40e1      	lsrs	r1, r4
1a0018ac:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a0018b0:	431f      	orrs	r7, r3
1a0018b2:	fbb1 f6fe 	udiv	r6, r1, lr
1a0018b6:	0c3a      	lsrs	r2, r7, #16
1a0018b8:	fb0e 1116 	mls	r1, lr, r6, r1
1a0018bc:	fa1f fc85 	uxth.w	ip, r5
1a0018c0:	ea42 4301 	orr.w	r3, r2, r1, lsl #16
1a0018c4:	fb0c f206 	mul.w	r2, ip, r6
1a0018c8:	429a      	cmp	r2, r3
1a0018ca:	fa00 f408 	lsl.w	r4, r0, r8
1a0018ce:	d907      	bls.n	1a0018e0 <__udivdi3+0x1f8>
1a0018d0:	195b      	adds	r3, r3, r5
1a0018d2:	f106 31ff 	add.w	r1, r6, #4294967295
1a0018d6:	d237      	bcs.n	1a001948 <__udivdi3+0x260>
1a0018d8:	429a      	cmp	r2, r3
1a0018da:	d935      	bls.n	1a001948 <__udivdi3+0x260>
1a0018dc:	3e02      	subs	r6, #2
1a0018de:	442b      	add	r3, r5
1a0018e0:	1a9b      	subs	r3, r3, r2
1a0018e2:	b2bf      	uxth	r7, r7
1a0018e4:	fbb3 f0fe 	udiv	r0, r3, lr
1a0018e8:	fb0e 3310 	mls	r3, lr, r0, r3
1a0018ec:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
1a0018f0:	fb0c f100 	mul.w	r1, ip, r0
1a0018f4:	4299      	cmp	r1, r3
1a0018f6:	d907      	bls.n	1a001908 <__udivdi3+0x220>
1a0018f8:	195b      	adds	r3, r3, r5
1a0018fa:	f100 32ff 	add.w	r2, r0, #4294967295
1a0018fe:	d221      	bcs.n	1a001944 <__udivdi3+0x25c>
1a001900:	4299      	cmp	r1, r3
1a001902:	d91f      	bls.n	1a001944 <__udivdi3+0x25c>
1a001904:	3802      	subs	r0, #2
1a001906:	442b      	add	r3, r5
1a001908:	1a5a      	subs	r2, r3, r1
1a00190a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
1a00190e:	4667      	mov	r7, ip
1a001910:	e750      	b.n	1a0017b4 <__udivdi3+0xcc>
1a001912:	4610      	mov	r0, r2
1a001914:	e716      	b.n	1a001744 <__udivdi3+0x5c>
1a001916:	460b      	mov	r3, r1
1a001918:	e729      	b.n	1a00176e <__udivdi3+0x86>
1a00191a:	4613      	mov	r3, r2
1a00191c:	e772      	b.n	1a001804 <__udivdi3+0x11c>
1a00191e:	40b0      	lsls	r0, r6
1a001920:	4290      	cmp	r0, r2
1a001922:	d2b7      	bcs.n	1a001894 <__udivdi3+0x1ac>
1a001924:	1e60      	subs	r0, r4, #1
1a001926:	2600      	movs	r6, #0
1a001928:	e724      	b.n	1a001774 <__udivdi3+0x8c>
1a00192a:	4630      	mov	r0, r6
1a00192c:	e722      	b.n	1a001774 <__udivdi3+0x8c>
1a00192e:	42a9      	cmp	r1, r5
1a001930:	d995      	bls.n	1a00185e <__udivdi3+0x176>
1a001932:	f1a8 0802 	sub.w	r8, r8, #2
1a001936:	441d      	add	r5, r3
1a001938:	e792      	b.n	1a001860 <__udivdi3+0x178>
1a00193a:	458c      	cmp	ip, r1
1a00193c:	d9a0      	bls.n	1a001880 <__udivdi3+0x198>
1a00193e:	3c02      	subs	r4, #2
1a001940:	4419      	add	r1, r3
1a001942:	e79e      	b.n	1a001882 <__udivdi3+0x19a>
1a001944:	4610      	mov	r0, r2
1a001946:	e7df      	b.n	1a001908 <__udivdi3+0x220>
1a001948:	460e      	mov	r6, r1
1a00194a:	e7c9      	b.n	1a0018e0 <__udivdi3+0x1f8>
1a00194c:	3802      	subs	r0, #2
1a00194e:	4429      	add	r1, r5
1a001950:	e743      	b.n	1a0017da <__udivdi3+0xf2>
1a001952:	bf00      	nop

1a001954 <memset>:
1a001954:	4402      	add	r2, r0
1a001956:	4603      	mov	r3, r0
1a001958:	4293      	cmp	r3, r2
1a00195a:	d002      	beq.n	1a001962 <memset+0xe>
1a00195c:	f803 1b01 	strb.w	r1, [r3], #1
1a001960:	e7fa      	b.n	1a001958 <memset+0x4>
1a001962:	4770      	bx	lr

1a001964 <UART_BClock>:
1a001964:	01c2 01a2 0182 0162                         ......b.

1a00196c <UART_PClock>:
1a00196c:	0081 0082 00a1 00a2 0201 0804 0f03 0f0f     ................
1a00197c:	00ff 0000                                   ....

1a001980 <periph_to_base>:
1a001980:	0000 0005 000a 0020 0024 0009 0040 0040     ...... .$...@.@.
1a001990:	0005 0060 00a6 0004 00c0 00c3 0002 00e0     ..`.............
1a0019a0:	00e0 0001 0100 0100 0003 0120 0120 0006     .......... . ...
1a0019b0:	0140 0140 000c 0142 0142 0019 0162 0162     @.@...B.B...b.b.
1a0019c0:	0013 0182 0182 0012 01a2 01a2 0011 01c2     ................
1a0019d0:	01c2 0010 01e2 01e2 000f 0202 0202 000e     ................
1a0019e0:	0222 0222 000d 0223 0223 001c               "."...#.#...

1a0019ec <InitClkStates>:
1a0019ec:	0100 0001 0909 0001 090a 0001 0701 0101     ................
1a0019fc:	0902 0001 0906 0001 090c 0101 090d 0001     ................
1a001a0c:	090e 0001 090f 0001 0910 0001 0911 0001     ................
1a001a1c:	0912 0001 0913 0001 1114 0001 1119 0001     ................
1a001a2c:	111a 0001 111b 0001                         ........

1a001a34 <OscRateIn>:
1a001a34:	1b00 00b7                                   ....

1a001a38 <ExtRateIn>:
1a001a38:	0000 0000                                   ....

1a001a3c <gpioLEDBits>:
1a001a3c:	0e00 0b01 0c01 0005 0105 0205               ............

1a001a48 <InitClkStates>:
1a001a48:	0308 0001 0307 0001 0f01 0101               ............

1a001a54 <pinmuxing>:
1a001a54:	0a02 0040 0b02 0040 0c02 0040 0002 0044     ..@...@...@...D.
1a001a64:	0102 0044 0202 0044 0302 0052 0402 0052     ..D...D...R...R.
1a001a74:	0509 0052 0609 0057 0206 0057 0001 0050     ..R...W...W...P.
1a001a84:	0101 0050 0201 0050 0601 0050 0f01 00f3     ..P...P...P.....
1a001a94:	1001 00f7 1101 00f3 1201 00b3 1301 00f0     ................
1a001aa4:	1401 00b3 0707 00b6 0000 00f2 0100 00b6     ................

1a001ab4 <gpioPinsConfig>:
1a001ab4:	0104 0200 0701 0005 0d03 0501 0100 0408     ................
1a001ac4:	0002 0202 0304 0200 0403 0000 0002 0407     ................
1a001ad4:	0300 030c 0402 0905 0103 0504 0208 0403     ................
1a001ae4:	0305 0402 0504 0604 000c 0802 0b06 0300     ................
1a001af4:	0607 0009 0503 0706 0504 060f 0004 0303     ................
1a001b04:	0404 0200 0404 0005 0502 0604 0200 0406     ................
1a001b14:	0408 0c05 0a04 0504 010e 0003 0a00 1401     ................
1a001b24:	0000 010f 0012 0d00 1101 0000 010c 0010     ................
1a001b34:	0300 0707 0300 000f 0001 0100 0000 0000     ................
1a001b44:	0600 000a 0603 0806 0504 0610 0005 0403     ................
1a001b54:	0106 0300 0400 0409 0d05 0401 0000 010b     ................
1a001b64:	000f 0200 0001 0000 0104 0001 0800 0201     ................
1a001b74:	0000 0109 0006 0901 0002 0504 0200 0401     ................
1a001b84:	0105 0202 0504 0202 000a 0e00 0b02 0100     ................
1a001b94:	020b 000c 0c01 0004 0200 0400 0001 0102     ................
1a001ba4:	0204 0200 0402 0003 0302 0307 0300 070b     ................
1a001bb4:	0004 0c03 0507 0300 070d 0006 0e03 0102     ................
1a001bc4:	0504 0401 0006 0602 0504 0200 0405 0004     ................
1a001bd4:	0402 0804 0504 040c 0409 0d05 0a04 0504     ................
1a001be4:	010e 0005 0801 0000                         ........
